# Generated by Grammarinator 19.3+50.g8a7372f

from itertools import chain
from math import inf
from grammarinator.runtime import *

charset_0 = list(chain(range(76, 77), range(108, 109)))
charset_1 = list(chain(range(49, 58)))
charset_2 = list(chain(range(88, 89), range(120, 121)))
charset_3 = list(chain(range(48, 58), range(65, 71), range(97, 103)))
charset_4 = list(chain(range(48, 56)))
charset_5 = list(chain(range(66, 67), range(98, 99)))
charset_6 = list(chain(range(48, 49), range(49, 50)))
charset_7 = list(chain(range(69, 70), range(101, 102)))
charset_8 = list(chain(range(43, 44), range(45, 46)))
charset_9 = list(chain(range(68, 69), range(70, 71), range(100, 101), range(102, 103)))
charset_10 = list(chain(range(88, 89), range(120, 121)))
charset_11 = list(chain(range(80, 81), range(112, 113)))
charset_12 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11), (13, 14), (39, 40), (92, 93)])))
charset_13 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11), (13, 14), (34, 35), (92, 93)])))
charset_14 = list(chain(range(34, 35), range(39, 40), range(92, 93), range(98, 99), range(102, 103), range(110, 111), range(114, 115), range(116, 117)))
charset_15 = list(chain(range(48, 52)))
charset_16 = list(chain(range(36, 37)))
charset_17 = list(chain(range(65, 91)))
charset_18 = list(chain(range(95, 96)))
charset_19 = list(chain(range(97, 123)))
charset_20 = list(chain(range(162, 166)))
charset_21 = list(chain(range(170, 171)))
charset_22 = list(chain(range(181, 182)))
charset_23 = list(chain(range(186, 187)))
charset_24 = list(chain(range(192, 215)))
charset_25 = list(chain(range(216, 247)))
charset_26 = list(chain(range(248, 706)))
charset_27 = list(chain(range(710, 722)))
charset_28 = list(chain(range(736, 741)))
charset_29 = list(chain(range(748, 749)))
charset_30 = list(chain(range(750, 751)))
charset_31 = list(chain(range(880, 885)))
charset_32 = list(chain(range(886, 888)))
charset_33 = list(chain(range(890, 894)))
charset_34 = list(chain(range(895, 896)))
charset_35 = list(chain(range(902, 903)))
charset_36 = list(chain(range(904, 907)))
charset_37 = list(chain(range(908, 909)))
charset_38 = list(chain(range(910, 930)))
charset_39 = list(chain(range(931, 1014)))
charset_40 = list(chain(range(1015, 1154)))
charset_41 = list(chain(range(1162, 1328)))
charset_42 = list(chain(range(1329, 1367)))
charset_43 = list(chain(range(1369, 1370)))
charset_44 = list(chain(range(1377, 1416)))
charset_45 = list(chain(range(1423, 1424)))
charset_46 = list(chain(range(1488, 1515)))
charset_47 = list(chain(range(1520, 1523)))
charset_48 = list(chain(range(1547, 1548)))
charset_49 = list(chain(range(1568, 1611)))
charset_50 = list(chain(range(1646, 1648)))
charset_51 = list(chain(range(1649, 1748)))
charset_52 = list(chain(range(1749, 1750)))
charset_53 = list(chain(range(1765, 1767)))
charset_54 = list(chain(range(1774, 1776)))
charset_55 = list(chain(range(1786, 1789)))
charset_56 = list(chain(range(1791, 1792)))
charset_57 = list(chain(range(1808, 1809)))
charset_58 = list(chain(range(1810, 1840)))
charset_59 = list(chain(range(1869, 1958)))
charset_60 = list(chain(range(1969, 1970)))
charset_61 = list(chain(range(1994, 2027)))
charset_62 = list(chain(range(2036, 2038)))
charset_63 = list(chain(range(2042, 2043)))
charset_64 = list(chain(range(2048, 2070)))
charset_65 = list(chain(range(2074, 2075)))
charset_66 = list(chain(range(2084, 2085)))
charset_67 = list(chain(range(2088, 2089)))
charset_68 = list(chain(range(2112, 2137)))
charset_69 = list(chain(range(2144, 2155)))
charset_70 = list(chain(range(2208, 2229)))
charset_71 = list(chain(range(2230, 2238)))
charset_72 = list(chain(range(2308, 2362)))
charset_73 = list(chain(range(2365, 2366)))
charset_74 = list(chain(range(2384, 2385)))
charset_75 = list(chain(range(2392, 2402)))
charset_76 = list(chain(range(2417, 2433)))
charset_77 = list(chain(range(2437, 2445)))
charset_78 = list(chain(range(2447, 2449)))
charset_79 = list(chain(range(2451, 2473)))
charset_80 = list(chain(range(2474, 2481)))
charset_81 = list(chain(range(2482, 2483)))
charset_82 = list(chain(range(2486, 2490)))
charset_83 = list(chain(range(2493, 2494)))
charset_84 = list(chain(range(2510, 2511)))
charset_85 = list(chain(range(2524, 2526)))
charset_86 = list(chain(range(2527, 2530)))
charset_87 = list(chain(range(2544, 2548)))
charset_88 = list(chain(range(2555, 2557)))
charset_89 = list(chain(range(2565, 2571)))
charset_90 = list(chain(range(2575, 2577)))
charset_91 = list(chain(range(2579, 2601)))
charset_92 = list(chain(range(2602, 2609)))
charset_93 = list(chain(range(2610, 2612)))
charset_94 = list(chain(range(2613, 2615)))
charset_95 = list(chain(range(2616, 2618)))
charset_96 = list(chain(range(2649, 2653)))
charset_97 = list(chain(range(2654, 2655)))
charset_98 = list(chain(range(2674, 2677)))
charset_99 = list(chain(range(2693, 2702)))
charset_100 = list(chain(range(2703, 2706)))
charset_101 = list(chain(range(2707, 2729)))
charset_102 = list(chain(range(2730, 2737)))
charset_103 = list(chain(range(2738, 2740)))
charset_104 = list(chain(range(2741, 2746)))
charset_105 = list(chain(range(2749, 2750)))
charset_106 = list(chain(range(2768, 2769)))
charset_107 = list(chain(range(2784, 2786)))
charset_108 = list(chain(range(2801, 2802)))
charset_109 = list(chain(range(2809, 2810)))
charset_110 = list(chain(range(2821, 2829)))
charset_111 = list(chain(range(2831, 2833)))
charset_112 = list(chain(range(2835, 2857)))
charset_113 = list(chain(range(2858, 2865)))
charset_114 = list(chain(range(2866, 2868)))
charset_115 = list(chain(range(2869, 2874)))
charset_116 = list(chain(range(2877, 2878)))
charset_117 = list(chain(range(2908, 2910)))
charset_118 = list(chain(range(2911, 2914)))
charset_119 = list(chain(range(2929, 2930)))
charset_120 = list(chain(range(2947, 2948)))
charset_121 = list(chain(range(2949, 2955)))
charset_122 = list(chain(range(2958, 2961)))
charset_123 = list(chain(range(2962, 2966)))
charset_124 = list(chain(range(2969, 2971)))
charset_125 = list(chain(range(2972, 2973)))
charset_126 = list(chain(range(2974, 2976)))
charset_127 = list(chain(range(2979, 2981)))
charset_128 = list(chain(range(2984, 2987)))
charset_129 = list(chain(range(2990, 3002)))
charset_130 = list(chain(range(3024, 3025)))
charset_131 = list(chain(range(3065, 3066)))
charset_132 = list(chain(range(3077, 3085)))
charset_133 = list(chain(range(3086, 3089)))
charset_134 = list(chain(range(3090, 3113)))
charset_135 = list(chain(range(3114, 3130)))
charset_136 = list(chain(range(3133, 3134)))
charset_137 = list(chain(range(3160, 3163)))
charset_138 = list(chain(range(3168, 3170)))
charset_139 = list(chain(range(3200, 3201)))
charset_140 = list(chain(range(3205, 3213)))
charset_141 = list(chain(range(3214, 3217)))
charset_142 = list(chain(range(3218, 3241)))
charset_143 = list(chain(range(3242, 3252)))
charset_144 = list(chain(range(3253, 3258)))
charset_145 = list(chain(range(3261, 3262)))
charset_146 = list(chain(range(3294, 3295)))
charset_147 = list(chain(range(3296, 3298)))
charset_148 = list(chain(range(3313, 3315)))
charset_149 = list(chain(range(3333, 3341)))
charset_150 = list(chain(range(3342, 3345)))
charset_151 = list(chain(range(3346, 3387)))
charset_152 = list(chain(range(3389, 3390)))
charset_153 = list(chain(range(3406, 3407)))
charset_154 = list(chain(range(3412, 3415)))
charset_155 = list(chain(range(3423, 3426)))
charset_156 = list(chain(range(3450, 3456)))
charset_157 = list(chain(range(3461, 3479)))
charset_158 = list(chain(range(3482, 3506)))
charset_159 = list(chain(range(3507, 3516)))
charset_160 = list(chain(range(3517, 3518)))
charset_161 = list(chain(range(3520, 3527)))
charset_162 = list(chain(range(3585, 3633)))
charset_163 = list(chain(range(3634, 3636)))
charset_164 = list(chain(range(3647, 3655)))
charset_165 = list(chain(range(3713, 3715)))
charset_166 = list(chain(range(3716, 3717)))
charset_167 = list(chain(range(3719, 3721)))
charset_168 = list(chain(range(3722, 3723)))
charset_169 = list(chain(range(3725, 3726)))
charset_170 = list(chain(range(3732, 3736)))
charset_171 = list(chain(range(3737, 3744)))
charset_172 = list(chain(range(3745, 3748)))
charset_173 = list(chain(range(3749, 3750)))
charset_174 = list(chain(range(3751, 3752)))
charset_175 = list(chain(range(3754, 3756)))
charset_176 = list(chain(range(3757, 3761)))
charset_177 = list(chain(range(3762, 3764)))
charset_178 = list(chain(range(3773, 3774)))
charset_179 = list(chain(range(3776, 3781)))
charset_180 = list(chain(range(3782, 3783)))
charset_181 = list(chain(range(3804, 3808)))
charset_182 = list(chain(range(3840, 3841)))
charset_183 = list(chain(range(3904, 3912)))
charset_184 = list(chain(range(3913, 3949)))
charset_185 = list(chain(range(3976, 3981)))
charset_186 = list(chain(range(4096, 4139)))
charset_187 = list(chain(range(4159, 4160)))
charset_188 = list(chain(range(4176, 4182)))
charset_189 = list(chain(range(4186, 4190)))
charset_190 = list(chain(range(4193, 4194)))
charset_191 = list(chain(range(4197, 4199)))
charset_192 = list(chain(range(4206, 4209)))
charset_193 = list(chain(range(4213, 4226)))
charset_194 = list(chain(range(4238, 4239)))
charset_195 = list(chain(range(4256, 4294)))
charset_196 = list(chain(range(4295, 4296)))
charset_197 = list(chain(range(4301, 4302)))
charset_198 = list(chain(range(4304, 4347)))
charset_199 = list(chain(range(4348, 4681)))
charset_200 = list(chain(range(4682, 4686)))
charset_201 = list(chain(range(4688, 4695)))
charset_202 = list(chain(range(4696, 4697)))
charset_203 = list(chain(range(4698, 4702)))
charset_204 = list(chain(range(4704, 4745)))
charset_205 = list(chain(range(4746, 4750)))
charset_206 = list(chain(range(4752, 4785)))
charset_207 = list(chain(range(4786, 4790)))
charset_208 = list(chain(range(4792, 4799)))
charset_209 = list(chain(range(4800, 4801)))
charset_210 = list(chain(range(4802, 4806)))
charset_211 = list(chain(range(4808, 4823)))
charset_212 = list(chain(range(4824, 4881)))
charset_213 = list(chain(range(4882, 4886)))
charset_214 = list(chain(range(4888, 4955)))
charset_215 = list(chain(range(4992, 5008)))
charset_216 = list(chain(range(5024, 5110)))
charset_217 = list(chain(range(5112, 5118)))
charset_218 = list(chain(range(5121, 5741)))
charset_219 = list(chain(range(5743, 5760)))
charset_220 = list(chain(range(5761, 5787)))
charset_221 = list(chain(range(5792, 5867)))
charset_222 = list(chain(range(5870, 5881)))
charset_223 = list(chain(range(5888, 5901)))
charset_224 = list(chain(range(5902, 5906)))
charset_225 = list(chain(range(5920, 5938)))
charset_226 = list(chain(range(5952, 5970)))
charset_227 = list(chain(range(5984, 5997)))
charset_228 = list(chain(range(5998, 6001)))
charset_229 = list(chain(range(6016, 6068)))
charset_230 = list(chain(range(6103, 6104)))
charset_231 = list(chain(range(6107, 6109)))
charset_232 = list(chain(range(6176, 6264)))
charset_233 = list(chain(range(6272, 6277)))
charset_234 = list(chain(range(6279, 6313)))
charset_235 = list(chain(range(6314, 6315)))
charset_236 = list(chain(range(6320, 6390)))
charset_237 = list(chain(range(6400, 6431)))
charset_238 = list(chain(range(6480, 6510)))
charset_239 = list(chain(range(6512, 6517)))
charset_240 = list(chain(range(6528, 6572)))
charset_241 = list(chain(range(6576, 6602)))
charset_242 = list(chain(range(6656, 6679)))
charset_243 = list(chain(range(6688, 6741)))
charset_244 = list(chain(range(6823, 6824)))
charset_245 = list(chain(range(6917, 6964)))
charset_246 = list(chain(range(6981, 6988)))
charset_247 = list(chain(range(7043, 7073)))
charset_248 = list(chain(range(7086, 7088)))
charset_249 = list(chain(range(7098, 7142)))
charset_250 = list(chain(range(7168, 7204)))
charset_251 = list(chain(range(7245, 7248)))
charset_252 = list(chain(range(7258, 7294)))
charset_253 = list(chain(range(7296, 7305)))
charset_254 = list(chain(range(7401, 7405)))
charset_255 = list(chain(range(7406, 7410)))
charset_256 = list(chain(range(7413, 7415)))
charset_257 = list(chain(range(7424, 7616)))
charset_258 = list(chain(range(7680, 7958)))
charset_259 = list(chain(range(7960, 7966)))
charset_260 = list(chain(range(7968, 8006)))
charset_261 = list(chain(range(8008, 8014)))
charset_262 = list(chain(range(8016, 8024)))
charset_263 = list(chain(range(8025, 8026)))
charset_264 = list(chain(range(8027, 8028)))
charset_265 = list(chain(range(8029, 8030)))
charset_266 = list(chain(range(8031, 8062)))
charset_267 = list(chain(range(8064, 8117)))
charset_268 = list(chain(range(8118, 8125)))
charset_269 = list(chain(range(8126, 8127)))
charset_270 = list(chain(range(8130, 8133)))
charset_271 = list(chain(range(8134, 8141)))
charset_272 = list(chain(range(8144, 8148)))
charset_273 = list(chain(range(8150, 8156)))
charset_274 = list(chain(range(8160, 8173)))
charset_275 = list(chain(range(8178, 8181)))
charset_276 = list(chain(range(8182, 8189)))
charset_277 = list(chain(range(8255, 8257)))
charset_278 = list(chain(range(8276, 8277)))
charset_279 = list(chain(range(8305, 8306)))
charset_280 = list(chain(range(8319, 8320)))
charset_281 = list(chain(range(8336, 8349)))
charset_282 = list(chain(range(8352, 8384)))
charset_283 = list(chain(range(8450, 8451)))
charset_284 = list(chain(range(8455, 8456)))
charset_285 = list(chain(range(8458, 8468)))
charset_286 = list(chain(range(8469, 8470)))
charset_287 = list(chain(range(8473, 8478)))
charset_288 = list(chain(range(8484, 8485)))
charset_289 = list(chain(range(8486, 8487)))
charset_290 = list(chain(range(8488, 8489)))
charset_291 = list(chain(range(8490, 8494)))
charset_292 = list(chain(range(8495, 8506)))
charset_293 = list(chain(range(8508, 8512)))
charset_294 = list(chain(range(8517, 8522)))
charset_295 = list(chain(range(8526, 8527)))
charset_296 = list(chain(range(8544, 8585)))
charset_297 = list(chain(range(11264, 11311)))
charset_298 = list(chain(range(11312, 11359)))
charset_299 = list(chain(range(11360, 11493)))
charset_300 = list(chain(range(11499, 11503)))
charset_301 = list(chain(range(11506, 11508)))
charset_302 = list(chain(range(11520, 11558)))
charset_303 = list(chain(range(11559, 11560)))
charset_304 = list(chain(range(11565, 11566)))
charset_305 = list(chain(range(11568, 11624)))
charset_306 = list(chain(range(11631, 11632)))
charset_307 = list(chain(range(11648, 11671)))
charset_308 = list(chain(range(11680, 11687)))
charset_309 = list(chain(range(11688, 11695)))
charset_310 = list(chain(range(11696, 11703)))
charset_311 = list(chain(range(11704, 11711)))
charset_312 = list(chain(range(11712, 11719)))
charset_313 = list(chain(range(11720, 11727)))
charset_314 = list(chain(range(11728, 11735)))
charset_315 = list(chain(range(11736, 11743)))
charset_316 = list(chain(range(11823, 11824)))
charset_317 = list(chain(range(12293, 12296)))
charset_318 = list(chain(range(12321, 12330)))
charset_319 = list(chain(range(12337, 12342)))
charset_320 = list(chain(range(12344, 12349)))
charset_321 = list(chain(range(12353, 12439)))
charset_322 = list(chain(range(12445, 12448)))
charset_323 = list(chain(range(12449, 12539)))
charset_324 = list(chain(range(12540, 12544)))
charset_325 = list(chain(range(12549, 12591)))
charset_326 = list(chain(range(12593, 12687)))
charset_327 = list(chain(range(12704, 12731)))
charset_328 = list(chain(range(12784, 12800)))
charset_329 = list(chain(range(13312, 19894)))
charset_330 = list(chain(range(19968, 40939)))
charset_331 = list(chain(range(40960, 42125)))
charset_332 = list(chain(range(42192, 42238)))
charset_333 = list(chain(range(42240, 42509)))
charset_334 = list(chain(range(42512, 42528)))
charset_335 = list(chain(range(42538, 42540)))
charset_336 = list(chain(range(42560, 42607)))
charset_337 = list(chain(range(42623, 42654)))
charset_338 = list(chain(range(42656, 42736)))
charset_339 = list(chain(range(42775, 42784)))
charset_340 = list(chain(range(42786, 42889)))
charset_341 = list(chain(range(42891, 42927)))
charset_342 = list(chain(range(42928, 42936)))
charset_343 = list(chain(range(42999, 43010)))
charset_344 = list(chain(range(43011, 43014)))
charset_345 = list(chain(range(43015, 43019)))
charset_346 = list(chain(range(43020, 43043)))
charset_347 = list(chain(range(43064, 43065)))
charset_348 = list(chain(range(43072, 43124)))
charset_349 = list(chain(range(43138, 43188)))
charset_350 = list(chain(range(43250, 43256)))
charset_351 = list(chain(range(43259, 43260)))
charset_352 = list(chain(range(43261, 43262)))
charset_353 = list(chain(range(43274, 43302)))
charset_354 = list(chain(range(43312, 43335)))
charset_355 = list(chain(range(43360, 43389)))
charset_356 = list(chain(range(43396, 43443)))
charset_357 = list(chain(range(43471, 43472)))
charset_358 = list(chain(range(43488, 43493)))
charset_359 = list(chain(range(43494, 43504)))
charset_360 = list(chain(range(43514, 43519)))
charset_361 = list(chain(range(43520, 43561)))
charset_362 = list(chain(range(43584, 43587)))
charset_363 = list(chain(range(43588, 43596)))
charset_364 = list(chain(range(43616, 43639)))
charset_365 = list(chain(range(43642, 43643)))
charset_366 = list(chain(range(43646, 43696)))
charset_367 = list(chain(range(43697, 43698)))
charset_368 = list(chain(range(43701, 43703)))
charset_369 = list(chain(range(43705, 43710)))
charset_370 = list(chain(range(43712, 43713)))
charset_371 = list(chain(range(43714, 43715)))
charset_372 = list(chain(range(43739, 43742)))
charset_373 = list(chain(range(43744, 43755)))
charset_374 = list(chain(range(43762, 43765)))
charset_375 = list(chain(range(43777, 43783)))
charset_376 = list(chain(range(43785, 43791)))
charset_377 = list(chain(range(43793, 43799)))
charset_378 = list(chain(range(43808, 43815)))
charset_379 = list(chain(range(43816, 43823)))
charset_380 = list(chain(range(43824, 43867)))
charset_381 = list(chain(range(43868, 43878)))
charset_382 = list(chain(range(43888, 44003)))
charset_383 = list(chain(range(44032, 55204)))
charset_384 = list(chain(range(55216, 55239)))
charset_385 = list(chain(range(55243, 55292)))
charset_386 = list(chain(range(63744, 64110)))
charset_387 = list(chain(range(64112, 64218)))
charset_388 = list(chain(range(64256, 64263)))
charset_389 = list(chain(range(64275, 64280)))
charset_390 = list(chain(range(64285, 64286)))
charset_391 = list(chain(range(64287, 64297)))
charset_392 = list(chain(range(64298, 64311)))
charset_393 = list(chain(range(64312, 64317)))
charset_394 = list(chain(range(64318, 64319)))
charset_395 = list(chain(range(64320, 64322)))
charset_396 = list(chain(range(64323, 64325)))
charset_397 = list(chain(range(64326, 64434)))
charset_398 = list(chain(range(64467, 64830)))
charset_399 = list(chain(range(64848, 64912)))
charset_400 = list(chain(range(64914, 64968)))
charset_401 = list(chain(range(65008, 65021)))
charset_402 = list(chain(range(65075, 65077)))
charset_403 = list(chain(range(65101, 65104)))
charset_404 = list(chain(range(65129, 65130)))
charset_405 = list(chain(range(65136, 65141)))
charset_406 = list(chain(range(65142, 65277)))
charset_407 = list(chain(range(65284, 65285)))
charset_408 = list(chain(range(65313, 65339)))
charset_409 = list(chain(range(65343, 65344)))
charset_410 = list(chain(range(65345, 65371)))
charset_411 = list(chain(range(65382, 65471)))
charset_412 = list(chain(range(65474, 65480)))
charset_413 = list(chain(range(65482, 65488)))
charset_414 = list(chain(range(65490, 65496)))
charset_415 = list(chain(range(65498, 65501)))
charset_416 = list(chain(range(65504, 65506)))
charset_417 = list(chain(range(65509, 65511)))
charset_418 = list(chain(range(48, 58)))
charset_419 = list(chain(range(127, 160)))
charset_420 = list(chain(range(173, 174)))
charset_421 = list(chain(range(768, 880)))
charset_422 = list(chain(range(1155, 1160)))
charset_423 = list(chain(range(1425, 1470)))
charset_424 = list(chain(range(1471, 1472)))
charset_425 = list(chain(range(1473, 1475)))
charset_426 = list(chain(range(1476, 1478)))
charset_427 = list(chain(range(1479, 1480)))
charset_428 = list(chain(range(1536, 1542)))
charset_429 = list(chain(range(1552, 1563)))
charset_430 = list(chain(range(1564, 1565)))
charset_431 = list(chain(range(1611, 1642)))
charset_432 = list(chain(range(1648, 1649)))
charset_433 = list(chain(range(1750, 1758)))
charset_434 = list(chain(range(1759, 1765)))
charset_435 = list(chain(range(1767, 1769)))
charset_436 = list(chain(range(1770, 1774)))
charset_437 = list(chain(range(1776, 1786)))
charset_438 = list(chain(range(1807, 1808)))
charset_439 = list(chain(range(1809, 1810)))
charset_440 = list(chain(range(1840, 1867)))
charset_441 = list(chain(range(1958, 1969)))
charset_442 = list(chain(range(1984, 1994)))
charset_443 = list(chain(range(2027, 2036)))
charset_444 = list(chain(range(2070, 2074)))
charset_445 = list(chain(range(2075, 2084)))
charset_446 = list(chain(range(2085, 2088)))
charset_447 = list(chain(range(2089, 2094)))
charset_448 = list(chain(range(2137, 2140)))
charset_449 = list(chain(range(2260, 2308)))
charset_450 = list(chain(range(2362, 2365)))
charset_451 = list(chain(range(2366, 2384)))
charset_452 = list(chain(range(2385, 2392)))
charset_453 = list(chain(range(2402, 2404)))
charset_454 = list(chain(range(2406, 2416)))
charset_455 = list(chain(range(2433, 2436)))
charset_456 = list(chain(range(2492, 2493)))
charset_457 = list(chain(range(2494, 2501)))
charset_458 = list(chain(range(2503, 2505)))
charset_459 = list(chain(range(2507, 2510)))
charset_460 = list(chain(range(2519, 2520)))
charset_461 = list(chain(range(2530, 2532)))
charset_462 = list(chain(range(2534, 2544)))
charset_463 = list(chain(range(2561, 2564)))
charset_464 = list(chain(range(2620, 2621)))
charset_465 = list(chain(range(2622, 2627)))
charset_466 = list(chain(range(2631, 2633)))
charset_467 = list(chain(range(2635, 2638)))
charset_468 = list(chain(range(2641, 2642)))
charset_469 = list(chain(range(2662, 2674)))
charset_470 = list(chain(range(2677, 2678)))
charset_471 = list(chain(range(2689, 2692)))
charset_472 = list(chain(range(2748, 2749)))
charset_473 = list(chain(range(2750, 2758)))
charset_474 = list(chain(range(2759, 2762)))
charset_475 = list(chain(range(2763, 2766)))
charset_476 = list(chain(range(2786, 2788)))
charset_477 = list(chain(range(2790, 2800)))
charset_478 = list(chain(range(2810, 2816)))
charset_479 = list(chain(range(2817, 2820)))
charset_480 = list(chain(range(2876, 2877)))
charset_481 = list(chain(range(2878, 2885)))
charset_482 = list(chain(range(2887, 2889)))
charset_483 = list(chain(range(2891, 2894)))
charset_484 = list(chain(range(2902, 2904)))
charset_485 = list(chain(range(2914, 2916)))
charset_486 = list(chain(range(2918, 2928)))
charset_487 = list(chain(range(2946, 2947)))
charset_488 = list(chain(range(3006, 3011)))
charset_489 = list(chain(range(3014, 3017)))
charset_490 = list(chain(range(3018, 3022)))
charset_491 = list(chain(range(3031, 3032)))
charset_492 = list(chain(range(3046, 3056)))
charset_493 = list(chain(range(3072, 3076)))
charset_494 = list(chain(range(3134, 3141)))
charset_495 = list(chain(range(3142, 3145)))
charset_496 = list(chain(range(3146, 3150)))
charset_497 = list(chain(range(3157, 3159)))
charset_498 = list(chain(range(3170, 3172)))
charset_499 = list(chain(range(3174, 3184)))
charset_500 = list(chain(range(3201, 3204)))
charset_501 = list(chain(range(3260, 3261)))
charset_502 = list(chain(range(3262, 3269)))
charset_503 = list(chain(range(3270, 3273)))
charset_504 = list(chain(range(3274, 3278)))
charset_505 = list(chain(range(3285, 3287)))
charset_506 = list(chain(range(3298, 3300)))
charset_507 = list(chain(range(3302, 3312)))
charset_508 = list(chain(range(3328, 3332)))
charset_509 = list(chain(range(3387, 3389)))
charset_510 = list(chain(range(3390, 3397)))
charset_511 = list(chain(range(3398, 3401)))
charset_512 = list(chain(range(3402, 3406)))
charset_513 = list(chain(range(3415, 3416)))
charset_514 = list(chain(range(3426, 3428)))
charset_515 = list(chain(range(3430, 3440)))
charset_516 = list(chain(range(3458, 3460)))
charset_517 = list(chain(range(3530, 3531)))
charset_518 = list(chain(range(3535, 3541)))
charset_519 = list(chain(range(3542, 3543)))
charset_520 = list(chain(range(3544, 3552)))
charset_521 = list(chain(range(3558, 3568)))
charset_522 = list(chain(range(3570, 3572)))
charset_523 = list(chain(range(3633, 3634)))
charset_524 = list(chain(range(3636, 3643)))
charset_525 = list(chain(range(3655, 3663)))
charset_526 = list(chain(range(3664, 3674)))
charset_527 = list(chain(range(3761, 3762)))
charset_528 = list(chain(range(3764, 3770)))
charset_529 = list(chain(range(3771, 3773)))
charset_530 = list(chain(range(3784, 3790)))
charset_531 = list(chain(range(3792, 3802)))
charset_532 = list(chain(range(3864, 3866)))
charset_533 = list(chain(range(3872, 3882)))
charset_534 = list(chain(range(3893, 3894)))
charset_535 = list(chain(range(3895, 3896)))
charset_536 = list(chain(range(3897, 3898)))
charset_537 = list(chain(range(3902, 3904)))
charset_538 = list(chain(range(3953, 3973)))
charset_539 = list(chain(range(3974, 3976)))
charset_540 = list(chain(range(3981, 3992)))
charset_541 = list(chain(range(3993, 4029)))
charset_542 = list(chain(range(4038, 4039)))
charset_543 = list(chain(range(4139, 4159)))
charset_544 = list(chain(range(4160, 4170)))
charset_545 = list(chain(range(4182, 4186)))
charset_546 = list(chain(range(4190, 4193)))
charset_547 = list(chain(range(4194, 4197)))
charset_548 = list(chain(range(4199, 4206)))
charset_549 = list(chain(range(4209, 4213)))
charset_550 = list(chain(range(4226, 4238)))
charset_551 = list(chain(range(4239, 4254)))
charset_552 = list(chain(range(4957, 4960)))
charset_553 = list(chain(range(5906, 5909)))
charset_554 = list(chain(range(5938, 5941)))
charset_555 = list(chain(range(5970, 5972)))
charset_556 = list(chain(range(6002, 6004)))
charset_557 = list(chain(range(6068, 6100)))
charset_558 = list(chain(range(6109, 6110)))
charset_559 = list(chain(range(6112, 6122)))
charset_560 = list(chain(range(6155, 6159)))
charset_561 = list(chain(range(6160, 6170)))
charset_562 = list(chain(range(6277, 6279)))
charset_563 = list(chain(range(6313, 6314)))
charset_564 = list(chain(range(6432, 6444)))
charset_565 = list(chain(range(6448, 6460)))
charset_566 = list(chain(range(6470, 6480)))
charset_567 = list(chain(range(6608, 6618)))
charset_568 = list(chain(range(6679, 6684)))
charset_569 = list(chain(range(6741, 6751)))
charset_570 = list(chain(range(6752, 6781)))
charset_571 = list(chain(range(6783, 6794)))
charset_572 = list(chain(range(6800, 6810)))
charset_573 = list(chain(range(6832, 6846)))
charset_574 = list(chain(range(6912, 6917)))
charset_575 = list(chain(range(6964, 6981)))
charset_576 = list(chain(range(6992, 7002)))
charset_577 = list(chain(range(7019, 7028)))
charset_578 = list(chain(range(7040, 7043)))
charset_579 = list(chain(range(7073, 7086)))
charset_580 = list(chain(range(7088, 7098)))
charset_581 = list(chain(range(7142, 7156)))
charset_582 = list(chain(range(7204, 7224)))
charset_583 = list(chain(range(7232, 7242)))
charset_584 = list(chain(range(7248, 7258)))
charset_585 = list(chain(range(7376, 7379)))
charset_586 = list(chain(range(7380, 7401)))
charset_587 = list(chain(range(7405, 7406)))
charset_588 = list(chain(range(7410, 7413)))
charset_589 = list(chain(range(7415, 7418)))
charset_590 = list(chain(range(7616, 7674)))
charset_591 = list(chain(range(7675, 7680)))
charset_592 = list(chain(range(8203, 8208)))
charset_593 = list(chain(range(8234, 8239)))
charset_594 = list(chain(range(8288, 8293)))
charset_595 = list(chain(range(8294, 8304)))
charset_596 = list(chain(range(8400, 8413)))
charset_597 = list(chain(range(8417, 8418)))
charset_598 = list(chain(range(8421, 8433)))
charset_599 = list(chain(range(11503, 11506)))
charset_600 = list(chain(range(11647, 11648)))
charset_601 = list(chain(range(11744, 11776)))
charset_602 = list(chain(range(12330, 12336)))
charset_603 = list(chain(range(12441, 12443)))
charset_604 = list(chain(range(42528, 42538)))
charset_605 = list(chain(range(42607, 42608)))
charset_606 = list(chain(range(42612, 42622)))
charset_607 = list(chain(range(42654, 42656)))
charset_608 = list(chain(range(42736, 42738)))
charset_609 = list(chain(range(43010, 43011)))
charset_610 = list(chain(range(43014, 43015)))
charset_611 = list(chain(range(43019, 43020)))
charset_612 = list(chain(range(43043, 43048)))
charset_613 = list(chain(range(43136, 43138)))
charset_614 = list(chain(range(43188, 43206)))
charset_615 = list(chain(range(43216, 43226)))
charset_616 = list(chain(range(43232, 43250)))
charset_617 = list(chain(range(43264, 43274)))
charset_618 = list(chain(range(43302, 43310)))
charset_619 = list(chain(range(43335, 43348)))
charset_620 = list(chain(range(43392, 43396)))
charset_621 = list(chain(range(43443, 43457)))
charset_622 = list(chain(range(43472, 43482)))
charset_623 = list(chain(range(43493, 43494)))
charset_624 = list(chain(range(43504, 43514)))
charset_625 = list(chain(range(43561, 43575)))
charset_626 = list(chain(range(43587, 43588)))
charset_627 = list(chain(range(43596, 43598)))
charset_628 = list(chain(range(43600, 43610)))
charset_629 = list(chain(range(43643, 43646)))
charset_630 = list(chain(range(43696, 43697)))
charset_631 = list(chain(range(43698, 43701)))
charset_632 = list(chain(range(43703, 43705)))
charset_633 = list(chain(range(43710, 43712)))
charset_634 = list(chain(range(43713, 43714)))
charset_635 = list(chain(range(43755, 43760)))
charset_636 = list(chain(range(43765, 43767)))
charset_637 = list(chain(range(44003, 44011)))
charset_638 = list(chain(range(44012, 44014)))
charset_639 = list(chain(range(44016, 44026)))
charset_640 = list(chain(range(64286, 64287)))
charset_641 = list(chain(range(65024, 65040)))
charset_642 = list(chain(range(65056, 65072)))
charset_643 = list(chain(range(65279, 65280)))
charset_644 = list(chain(range(65296, 65306)))
charset_645 = list(chain(range(65529, 65532)))
charset_646 = list(chain(range(9, 10), range(10, 11), range(12, 13), range(13, 14), range(32, 33)))
charset_647 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11), (13, 14)])))

class FRJGenerator(Generator):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)


    @depthcontrol
    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    @depthcontrol
    def MDF(self, parent=None):
        current = UnlexerRule(name='MDF', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 0, 0, 0][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
        if choice == 0:
            UnlexerRule(src='imm', parent=current)
        elif choice == 1:
            UnlexerRule(src='mut', parent=current)
        elif choice == 2:
            UnlexerRule(src='capsule', parent=current)
        elif choice == 3:
            UnlexerRule(src='read', parent=current)
        self.exit_rule(current)
        return current
    MDF.min_depth = 0

    @depthcontrol
    def CAP(self, parent=None):
        current = UnlexerRule(name='CAP', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='capability', parent=current)
        self.exit_rule(current)
        return current
    CAP.min_depth = 0

    @depthcontrol
    def METHOD(self, parent=None):
        current = UnlexerRule(name='METHOD', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='method', parent=current)
        self.exit_rule(current)
        return current
    METHOD.min_depth = 0

    @depthcontrol
    def HEAD(self, parent=None):
        current = UnlexerRule(name='HEAD', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='head', parent=current)
        self.exit_rule(current)
        return current
    HEAD.min_depth = 0

    @depthcontrol
    def TAIL(self, parent=None):
        current = UnlexerRule(name='TAIL', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='tail', parent=current)
        self.exit_rule(current)
        return current
    TAIL.min_depth = 0

    @depthcontrol
    def MAIN(self, parent=None):
        current = UnlexerRule(name='MAIN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='main', parent=current)
        self.exit_rule(current)
        return current
    MAIN.min_depth = 0

    @depthcontrol
    def ABSTRACT(self, parent=None):
        current = UnlexerRule(name='ABSTRACT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='abstract', parent=current)
        self.exit_rule(current)
        return current
    ABSTRACT.min_depth = 0

    @depthcontrol
    def ASSERT(self, parent=None):
        current = UnlexerRule(name='ASSERT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='assert', parent=current)
        self.exit_rule(current)
        return current
    ASSERT.min_depth = 0

    @depthcontrol
    def BOOLEAN(self, parent=None):
        current = UnlexerRule(name='BOOLEAN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='boolean', parent=current)
        self.exit_rule(current)
        return current
    BOOLEAN.min_depth = 0

    @depthcontrol
    def BREAK(self, parent=None):
        current = UnlexerRule(name='BREAK', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='break', parent=current)
        self.exit_rule(current)
        return current
    BREAK.min_depth = 0

    @depthcontrol
    def BYTE(self, parent=None):
        current = UnlexerRule(name='BYTE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='byte', parent=current)
        self.exit_rule(current)
        return current
    BYTE.min_depth = 0

    @depthcontrol
    def CASE(self, parent=None):
        current = UnlexerRule(name='CASE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='case', parent=current)
        self.exit_rule(current)
        return current
    CASE.min_depth = 0

    @depthcontrol
    def CATCH(self, parent=None):
        current = UnlexerRule(name='CATCH', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='catch', parent=current)
        self.exit_rule(current)
        return current
    CATCH.min_depth = 0

    @depthcontrol
    def CHAR(self, parent=None):
        current = UnlexerRule(name='CHAR', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='char', parent=current)
        self.exit_rule(current)
        return current
    CHAR.min_depth = 0

    @depthcontrol
    def CLASS(self, parent=None):
        current = UnlexerRule(name='CLASS', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='class', parent=current)
        self.exit_rule(current)
        return current
    CLASS.min_depth = 0

    @depthcontrol
    def CONST(self, parent=None):
        current = UnlexerRule(name='CONST', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='const', parent=current)
        self.exit_rule(current)
        return current
    CONST.min_depth = 0

    @depthcontrol
    def CONTINUE(self, parent=None):
        current = UnlexerRule(name='CONTINUE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='continue', parent=current)
        self.exit_rule(current)
        return current
    CONTINUE.min_depth = 0

    @depthcontrol
    def DEFAULT(self, parent=None):
        current = UnlexerRule(name='DEFAULT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='default', parent=current)
        self.exit_rule(current)
        return current
    DEFAULT.min_depth = 0

    @depthcontrol
    def DO(self, parent=None):
        current = UnlexerRule(name='DO', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='do', parent=current)
        self.exit_rule(current)
        return current
    DO.min_depth = 0

    @depthcontrol
    def DOUBLE(self, parent=None):
        current = UnlexerRule(name='DOUBLE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='double', parent=current)
        self.exit_rule(current)
        return current
    DOUBLE.min_depth = 0

    @depthcontrol
    def ELSE(self, parent=None):
        current = UnlexerRule(name='ELSE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='else', parent=current)
        self.exit_rule(current)
        return current
    ELSE.min_depth = 0

    @depthcontrol
    def ENUM(self, parent=None):
        current = UnlexerRule(name='ENUM', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='enum', parent=current)
        self.exit_rule(current)
        return current
    ENUM.min_depth = 0

    @depthcontrol
    def EXTENDS(self, parent=None):
        current = UnlexerRule(name='EXTENDS', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='extends', parent=current)
        self.exit_rule(current)
        return current
    EXTENDS.min_depth = 0

    @depthcontrol
    def FINAL(self, parent=None):
        current = UnlexerRule(name='FINAL', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='final', parent=current)
        self.exit_rule(current)
        return current
    FINAL.min_depth = 0

    @depthcontrol
    def FINALLY(self, parent=None):
        current = UnlexerRule(name='FINALLY', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='finally', parent=current)
        self.exit_rule(current)
        return current
    FINALLY.min_depth = 0

    @depthcontrol
    def FLOAT(self, parent=None):
        current = UnlexerRule(name='FLOAT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='float', parent=current)
        self.exit_rule(current)
        return current
    FLOAT.min_depth = 0

    @depthcontrol
    def FOR(self, parent=None):
        current = UnlexerRule(name='FOR', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='for', parent=current)
        self.exit_rule(current)
        return current
    FOR.min_depth = 0

    @depthcontrol
    def IF(self, parent=None):
        current = UnlexerRule(name='IF', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='if', parent=current)
        self.exit_rule(current)
        return current
    IF.min_depth = 0

    @depthcontrol
    def GOTO(self, parent=None):
        current = UnlexerRule(name='GOTO', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='goto', parent=current)
        self.exit_rule(current)
        return current
    GOTO.min_depth = 0

    @depthcontrol
    def IMPLEMENTS(self, parent=None):
        current = UnlexerRule(name='IMPLEMENTS', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='implements', parent=current)
        self.exit_rule(current)
        return current
    IMPLEMENTS.min_depth = 0

    @depthcontrol
    def IMPORT(self, parent=None):
        current = UnlexerRule(name='IMPORT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='import', parent=current)
        self.exit_rule(current)
        return current
    IMPORT.min_depth = 0

    @depthcontrol
    def INSTANCEOF(self, parent=None):
        current = UnlexerRule(name='INSTANCEOF', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='instanceof', parent=current)
        self.exit_rule(current)
        return current
    INSTANCEOF.min_depth = 0

    @depthcontrol
    def INT(self, parent=None):
        current = UnlexerRule(name='INT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='int', parent=current)
        self.exit_rule(current)
        return current
    INT.min_depth = 0

    @depthcontrol
    def INTERFACE(self, parent=None):
        current = UnlexerRule(name='INTERFACE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='interface', parent=current)
        self.exit_rule(current)
        return current
    INTERFACE.min_depth = 0

    @depthcontrol
    def LONG(self, parent=None):
        current = UnlexerRule(name='LONG', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='long', parent=current)
        self.exit_rule(current)
        return current
    LONG.min_depth = 0

    @depthcontrol
    def NATIVE(self, parent=None):
        current = UnlexerRule(name='NATIVE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='native', parent=current)
        self.exit_rule(current)
        return current
    NATIVE.min_depth = 0

    @depthcontrol
    def NEW(self, parent=None):
        current = UnlexerRule(name='NEW', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='new', parent=current)
        self.exit_rule(current)
        return current
    NEW.min_depth = 0

    @depthcontrol
    def PACKAGE(self, parent=None):
        current = UnlexerRule(name='PACKAGE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='package', parent=current)
        self.exit_rule(current)
        return current
    PACKAGE.min_depth = 0

    @depthcontrol
    def PRIVATE(self, parent=None):
        current = UnlexerRule(name='PRIVATE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='private', parent=current)
        self.exit_rule(current)
        return current
    PRIVATE.min_depth = 0

    @depthcontrol
    def PROTECTED(self, parent=None):
        current = UnlexerRule(name='PROTECTED', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='protected', parent=current)
        self.exit_rule(current)
        return current
    PROTECTED.min_depth = 0

    @depthcontrol
    def PUBLIC(self, parent=None):
        current = UnlexerRule(name='PUBLIC', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='public', parent=current)
        self.exit_rule(current)
        return current
    PUBLIC.min_depth = 0

    @depthcontrol
    def RETURN(self, parent=None):
        current = UnlexerRule(name='RETURN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='return', parent=current)
        self.exit_rule(current)
        return current
    RETURN.min_depth = 0

    @depthcontrol
    def SHORT(self, parent=None):
        current = UnlexerRule(name='SHORT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='short', parent=current)
        self.exit_rule(current)
        return current
    SHORT.min_depth = 0

    @depthcontrol
    def STATIC(self, parent=None):
        current = UnlexerRule(name='STATIC', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='static', parent=current)
        self.exit_rule(current)
        return current
    STATIC.min_depth = 0

    @depthcontrol
    def STRICTFP(self, parent=None):
        current = UnlexerRule(name='STRICTFP', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='strictfp', parent=current)
        self.exit_rule(current)
        return current
    STRICTFP.min_depth = 0

    @depthcontrol
    def SUPER(self, parent=None):
        current = UnlexerRule(name='SUPER', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='super', parent=current)
        self.exit_rule(current)
        return current
    SUPER.min_depth = 0

    @depthcontrol
    def SWITCH(self, parent=None):
        current = UnlexerRule(name='SWITCH', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='switch', parent=current)
        self.exit_rule(current)
        return current
    SWITCH.min_depth = 0

    @depthcontrol
    def SYNCHRONIZED(self, parent=None):
        current = UnlexerRule(name='SYNCHRONIZED', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='synchronized', parent=current)
        self.exit_rule(current)
        return current
    SYNCHRONIZED.min_depth = 0

    @depthcontrol
    def THIS(self, parent=None):
        current = UnlexerRule(name='THIS', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='this', parent=current)
        self.exit_rule(current)
        return current
    THIS.min_depth = 0

    @depthcontrol
    def THROW(self, parent=None):
        current = UnlexerRule(name='THROW', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='throw', parent=current)
        self.exit_rule(current)
        return current
    THROW.min_depth = 0

    @depthcontrol
    def THROWS(self, parent=None):
        current = UnlexerRule(name='THROWS', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='throws', parent=current)
        self.exit_rule(current)
        return current
    THROWS.min_depth = 0

    @depthcontrol
    def TRANSIENT(self, parent=None):
        current = UnlexerRule(name='TRANSIENT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='transient', parent=current)
        self.exit_rule(current)
        return current
    TRANSIENT.min_depth = 0

    @depthcontrol
    def TRY(self, parent=None):
        current = UnlexerRule(name='TRY', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='try', parent=current)
        self.exit_rule(current)
        return current
    TRY.min_depth = 0

    @depthcontrol
    def VOID(self, parent=None):
        current = UnlexerRule(name='VOID', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='void', parent=current)
        self.exit_rule(current)
        return current
    VOID.min_depth = 0

    @depthcontrol
    def VOLATILE(self, parent=None):
        current = UnlexerRule(name='VOLATILE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='volatile', parent=current)
        self.exit_rule(current)
        return current
    VOLATILE.min_depth = 0

    @depthcontrol
    def WHILE(self, parent=None):
        current = UnlexerRule(name='WHILE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='while', parent=current)
        self.exit_rule(current)
        return current
    WHILE.min_depth = 0

    @depthcontrol
    def IntegerLiteral(self, parent=None):
        current = UnlexerRule(name='IntegerLiteral', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [2, 4, 4, 4][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
        if choice == 0:
            self.DecimalIntegerLiteral(parent=current)
        elif choice == 1:
            self.HexIntegerLiteral(parent=current)
        elif choice == 2:
            self.OctalIntegerLiteral(parent=current)
        elif choice == 3:
            self.BinaryIntegerLiteral(parent=current)
        self.exit_rule(current)
        return current
    IntegerLiteral.min_depth = 2

    @depthcontrol
    def DecimalIntegerLiteral(self, parent=None):
        current = UnlexerRule(name='DecimalIntegerLiteral', parent=parent)
        self.enter_rule(current)
        self.DecimalNumeral(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.IntegerTypeSuffix(parent=current)
        self.exit_rule(current)
        return current
    DecimalIntegerLiteral.min_depth = 1

    @depthcontrol
    def HexIntegerLiteral(self, parent=None):
        current = UnlexerRule(name='HexIntegerLiteral', parent=parent)
        self.enter_rule(current)
        self.HexNumeral(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.IntegerTypeSuffix(parent=current)
        self.exit_rule(current)
        return current
    HexIntegerLiteral.min_depth = 3

    @depthcontrol
    def OctalIntegerLiteral(self, parent=None):
        current = UnlexerRule(name='OctalIntegerLiteral', parent=parent)
        self.enter_rule(current)
        self.OctalNumeral(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.IntegerTypeSuffix(parent=current)
        self.exit_rule(current)
        return current
    OctalIntegerLiteral.min_depth = 3

    @depthcontrol
    def BinaryIntegerLiteral(self, parent=None):
        current = UnlexerRule(name='BinaryIntegerLiteral', parent=parent)
        self.enter_rule(current)
        self.BinaryNumeral(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.IntegerTypeSuffix(parent=current)
        self.exit_rule(current)
        return current
    BinaryIntegerLiteral.min_depth = 3

    @depthcontrol
    def IntegerTypeSuffix(self, parent=None):
        current = UnlexerRule(name='IntegerTypeSuffix', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_0), parent=current)
        self.exit_rule(current)
        return current
    IntegerTypeSuffix.min_depth = 0

    @depthcontrol
    def DecimalNumeral(self, parent=None):
        current = UnlexerRule(name='DecimalNumeral', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 1][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            UnlexerRule(src='0', parent=current)
        elif choice == 1:
            self.NonZeroDigit(parent=current)
            choice = self.model.choice(current, 1, [0 if [0, 2][i] > self.max_depth else w for i, w in enumerate([1, 1])])
            if choice == 0:
                if self.max_depth >= 2:
                    for _ in self.model.quantify(current, 0, min=0, max=1):
                        self.Digits(parent=current)
            elif choice == 1:
                self.Underscores(parent=current)
                self.Digits(parent=current)
        self.exit_rule(current)
        return current
    DecimalNumeral.min_depth = 0

    @depthcontrol
    def Digits(self, parent=None):
        current = UnlexerRule(name='Digits', parent=parent)
        self.enter_rule(current)
        self.Digit(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                if self.max_depth >= 2:
                    for _ in self.model.quantify(current, 1, min=0, max=1):
                        self.DigitsAndUnderscores(parent=current)
                self.Digit(parent=current)
        self.exit_rule(current)
        return current
    Digits.min_depth = 1

    @depthcontrol
    def Digit(self, parent=None):
        current = UnlexerRule(name='Digit', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 1][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            UnlexerRule(src='0', parent=current)
        elif choice == 1:
            self.NonZeroDigit(parent=current)
        self.exit_rule(current)
        return current
    Digit.min_depth = 0

    @depthcontrol
    def NonZeroDigit(self, parent=None):
        current = UnlexerRule(name='NonZeroDigit', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_1), parent=current)
        self.exit_rule(current)
        return current
    NonZeroDigit.min_depth = 0

    @depthcontrol
    def DigitsAndUnderscores(self, parent=None):
        current = UnlexerRule(name='DigitsAndUnderscores', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                self.DigitOrUnderscore(parent=current)
        self.exit_rule(current)
        return current
    DigitsAndUnderscores.min_depth = 1

    @depthcontrol
    def DigitOrUnderscore(self, parent=None):
        current = UnlexerRule(name='DigitOrUnderscore', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 0][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            self.Digit(parent=current)
        elif choice == 1:
            UnlexerRule(src='_', parent=current)
        self.exit_rule(current)
        return current
    DigitOrUnderscore.min_depth = 0

    @depthcontrol
    def Underscores(self, parent=None):
        current = UnlexerRule(name='Underscores', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                UnlexerRule(src='_', parent=current)
        self.exit_rule(current)
        return current
    Underscores.min_depth = 0

    @depthcontrol
    def HexNumeral(self, parent=None):
        current = UnlexerRule(name='HexNumeral', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='0', parent=current)
        UnlexerRule(src=self.char_from_list(charset_2), parent=current)
        self.HexDigits(parent=current)
        self.exit_rule(current)
        return current
    HexNumeral.min_depth = 2

    @depthcontrol
    def HexDigits(self, parent=None):
        current = UnlexerRule(name='HexDigits', parent=parent)
        self.enter_rule(current)
        self.HexDigit(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                if self.max_depth >= 2:
                    for _ in self.model.quantify(current, 1, min=0, max=1):
                        self.HexDigitsAndUnderscores(parent=current)
                self.HexDigit(parent=current)
        self.exit_rule(current)
        return current
    HexDigits.min_depth = 1

    @depthcontrol
    def HexDigit(self, parent=None):
        current = UnlexerRule(name='HexDigit', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_3), parent=current)
        self.exit_rule(current)
        return current
    HexDigit.min_depth = 0

    @depthcontrol
    def HexDigitsAndUnderscores(self, parent=None):
        current = UnlexerRule(name='HexDigitsAndUnderscores', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                self.HexDigitOrUnderscore(parent=current)
        self.exit_rule(current)
        return current
    HexDigitsAndUnderscores.min_depth = 1

    @depthcontrol
    def HexDigitOrUnderscore(self, parent=None):
        current = UnlexerRule(name='HexDigitOrUnderscore', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 0][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            self.HexDigit(parent=current)
        elif choice == 1:
            UnlexerRule(src='_', parent=current)
        self.exit_rule(current)
        return current
    HexDigitOrUnderscore.min_depth = 0

    @depthcontrol
    def OctalNumeral(self, parent=None):
        current = UnlexerRule(name='OctalNumeral', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='0', parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.Underscores(parent=current)
        self.OctalDigits(parent=current)
        self.exit_rule(current)
        return current
    OctalNumeral.min_depth = 2

    @depthcontrol
    def OctalDigits(self, parent=None):
        current = UnlexerRule(name='OctalDigits', parent=parent)
        self.enter_rule(current)
        self.OctalDigit(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                if self.max_depth >= 2:
                    for _ in self.model.quantify(current, 1, min=0, max=1):
                        self.OctalDigitsAndUnderscores(parent=current)
                self.OctalDigit(parent=current)
        self.exit_rule(current)
        return current
    OctalDigits.min_depth = 1

    @depthcontrol
    def OctalDigit(self, parent=None):
        current = UnlexerRule(name='OctalDigit', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_4), parent=current)
        self.exit_rule(current)
        return current
    OctalDigit.min_depth = 0

    @depthcontrol
    def OctalDigitsAndUnderscores(self, parent=None):
        current = UnlexerRule(name='OctalDigitsAndUnderscores', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                self.OctalDigitOrUnderscore(parent=current)
        self.exit_rule(current)
        return current
    OctalDigitsAndUnderscores.min_depth = 1

    @depthcontrol
    def OctalDigitOrUnderscore(self, parent=None):
        current = UnlexerRule(name='OctalDigitOrUnderscore', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 0][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            self.OctalDigit(parent=current)
        elif choice == 1:
            UnlexerRule(src='_', parent=current)
        self.exit_rule(current)
        return current
    OctalDigitOrUnderscore.min_depth = 0

    @depthcontrol
    def BinaryNumeral(self, parent=None):
        current = UnlexerRule(name='BinaryNumeral', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='0', parent=current)
        UnlexerRule(src=self.char_from_list(charset_5), parent=current)
        self.BinaryDigits(parent=current)
        self.exit_rule(current)
        return current
    BinaryNumeral.min_depth = 2

    @depthcontrol
    def BinaryDigits(self, parent=None):
        current = UnlexerRule(name='BinaryDigits', parent=parent)
        self.enter_rule(current)
        self.BinaryDigit(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                if self.max_depth >= 2:
                    for _ in self.model.quantify(current, 1, min=0, max=1):
                        self.BinaryDigitsAndUnderscores(parent=current)
                self.BinaryDigit(parent=current)
        self.exit_rule(current)
        return current
    BinaryDigits.min_depth = 1

    @depthcontrol
    def BinaryDigit(self, parent=None):
        current = UnlexerRule(name='BinaryDigit', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_6), parent=current)
        self.exit_rule(current)
        return current
    BinaryDigit.min_depth = 0

    @depthcontrol
    def BinaryDigitsAndUnderscores(self, parent=None):
        current = UnlexerRule(name='BinaryDigitsAndUnderscores', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                self.BinaryDigitOrUnderscore(parent=current)
        self.exit_rule(current)
        return current
    BinaryDigitsAndUnderscores.min_depth = 1

    @depthcontrol
    def BinaryDigitOrUnderscore(self, parent=None):
        current = UnlexerRule(name='BinaryDigitOrUnderscore', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 0][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            self.BinaryDigit(parent=current)
        elif choice == 1:
            UnlexerRule(src='_', parent=current)
        self.exit_rule(current)
        return current
    BinaryDigitOrUnderscore.min_depth = 0

    @depthcontrol
    def FloatingPointLiteral(self, parent=None):
        current = UnlexerRule(name='FloatingPointLiteral', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [3, 5][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            self.DecimalFloatingPointLiteral(parent=current)
        elif choice == 1:
            self.HexadecimalFloatingPointLiteral(parent=current)
        self.exit_rule(current)
        return current
    FloatingPointLiteral.min_depth = 3

    @depthcontrol
    def DecimalFloatingPointLiteral(self, parent=None):
        current = UnlexerRule(name='DecimalFloatingPointLiteral', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [2, 2, 4, 2][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
        if choice == 0:
            self.Digits(parent=current)
            UnlexerRule(src='.', parent=current)
            if self.max_depth >= 2:
                for _ in self.model.quantify(current, 0, min=0, max=1):
                    self.Digits(parent=current)
            if self.max_depth >= 4:
                for _ in self.model.quantify(current, 1, min=0, max=1):
                    self.ExponentPart(parent=current)
            if self.max_depth >= 1:
                for _ in self.model.quantify(current, 2, min=0, max=1):
                    self.FloatTypeSuffix(parent=current)
        elif choice == 1:
            UnlexerRule(src='.', parent=current)
            self.Digits(parent=current)
            if self.max_depth >= 4:
                for _ in self.model.quantify(current, 3, min=0, max=1):
                    self.ExponentPart(parent=current)
            if self.max_depth >= 1:
                for _ in self.model.quantify(current, 4, min=0, max=1):
                    self.FloatTypeSuffix(parent=current)
        elif choice == 2:
            self.Digits(parent=current)
            self.ExponentPart(parent=current)
            if self.max_depth >= 1:
                for _ in self.model.quantify(current, 5, min=0, max=1):
                    self.FloatTypeSuffix(parent=current)
        elif choice == 3:
            self.Digits(parent=current)
            self.FloatTypeSuffix(parent=current)
        self.exit_rule(current)
        return current
    DecimalFloatingPointLiteral.min_depth = 2

    @depthcontrol
    def ExponentPart(self, parent=None):
        current = UnlexerRule(name='ExponentPart', parent=parent)
        self.enter_rule(current)
        self.ExponentIndicator(parent=current)
        self.SignedInteger(parent=current)
        self.exit_rule(current)
        return current
    ExponentPart.min_depth = 3

    @depthcontrol
    def ExponentIndicator(self, parent=None):
        current = UnlexerRule(name='ExponentIndicator', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_7), parent=current)
        self.exit_rule(current)
        return current
    ExponentIndicator.min_depth = 0

    @depthcontrol
    def SignedInteger(self, parent=None):
        current = UnlexerRule(name='SignedInteger', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.Sign(parent=current)
        self.Digits(parent=current)
        self.exit_rule(current)
        return current
    SignedInteger.min_depth = 2

    @depthcontrol
    def Sign(self, parent=None):
        current = UnlexerRule(name='Sign', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_8), parent=current)
        self.exit_rule(current)
        return current
    Sign.min_depth = 0

    @depthcontrol
    def FloatTypeSuffix(self, parent=None):
        current = UnlexerRule(name='FloatTypeSuffix', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_9), parent=current)
        self.exit_rule(current)
        return current
    FloatTypeSuffix.min_depth = 0

    @depthcontrol
    def HexadecimalFloatingPointLiteral(self, parent=None):
        current = UnlexerRule(name='HexadecimalFloatingPointLiteral', parent=parent)
        self.enter_rule(current)
        self.HexSignificand(parent=current)
        self.BinaryExponent(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.FloatTypeSuffix(parent=current)
        self.exit_rule(current)
        return current
    HexadecimalFloatingPointLiteral.min_depth = 4

    @depthcontrol
    def HexSignificand(self, parent=None):
        current = UnlexerRule(name='HexSignificand', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [3, 2][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            self.HexNumeral(parent=current)
            if self.max_depth >= 0:
                for _ in self.model.quantify(current, 0, min=0, max=1):
                    UnlexerRule(src='.', parent=current)
        elif choice == 1:
            UnlexerRule(src='0', parent=current)
            UnlexerRule(src=self.char_from_list(charset_10), parent=current)
            if self.max_depth >= 2:
                for _ in self.model.quantify(current, 1, min=0, max=1):
                    self.HexDigits(parent=current)
            UnlexerRule(src='.', parent=current)
            self.HexDigits(parent=current)
        self.exit_rule(current)
        return current
    HexSignificand.min_depth = 2

    @depthcontrol
    def BinaryExponent(self, parent=None):
        current = UnlexerRule(name='BinaryExponent', parent=parent)
        self.enter_rule(current)
        self.BinaryExponentIndicator(parent=current)
        self.SignedInteger(parent=current)
        self.exit_rule(current)
        return current
    BinaryExponent.min_depth = 3

    @depthcontrol
    def BinaryExponentIndicator(self, parent=None):
        current = UnlexerRule(name='BinaryExponentIndicator', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_11), parent=current)
        self.exit_rule(current)
        return current
    BinaryExponentIndicator.min_depth = 0

    @depthcontrol
    def BooleanLiteral(self, parent=None):
        current = UnlexerRule(name='BooleanLiteral', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 0][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            UnlexerRule(src='true', parent=current)
        elif choice == 1:
            UnlexerRule(src='false', parent=current)
        self.exit_rule(current)
        return current
    BooleanLiteral.min_depth = 0

    @depthcontrol
    def CharacterLiteral(self, parent=None):
        current = UnlexerRule(name='CharacterLiteral', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 1][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            UnlexerRule(src='\'', parent=current)
            self.SingleCharacter(parent=current)
            UnlexerRule(src='\'', parent=current)
        elif choice == 1:
            UnlexerRule(src='\'', parent=current)
            self.EscapeSequence(parent=current)
            UnlexerRule(src='\'', parent=current)
        self.exit_rule(current)
        return current
    CharacterLiteral.min_depth = 1

    @depthcontrol
    def SingleCharacter(self, parent=None):
        current = UnlexerRule(name='SingleCharacter', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_12), parent=current)
        self.exit_rule(current)
        return current
    SingleCharacter.min_depth = 0

    @depthcontrol
    def StringLiteral(self, parent=None):
        current = UnlexerRule(name='StringLiteral', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='"', parent=current)
        if self.max_depth >= 2:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.StringCharacters(parent=current)
        UnlexerRule(src='"', parent=current)
        self.exit_rule(current)
        return current
    StringLiteral.min_depth = 0

    @depthcontrol
    def StringCharacters(self, parent=None):
        current = UnlexerRule(name='StringCharacters', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                self.StringCharacter(parent=current)
        self.exit_rule(current)
        return current
    StringCharacters.min_depth = 1

    @depthcontrol
    def StringCharacter(self, parent=None):
        current = UnlexerRule(name='StringCharacter', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 1][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            UnlexerRule(src=self.char_from_list(charset_13), parent=current)
        elif choice == 1:
            self.EscapeSequence(parent=current)
        self.exit_rule(current)
        return current
    StringCharacter.min_depth = 0

    @depthcontrol
    def EscapeSequence(self, parent=None):
        current = UnlexerRule(name='EscapeSequence', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 2, 2][i] > self.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            UnlexerRule(src='\\', parent=current)
            UnlexerRule(src=self.char_from_list(charset_14), parent=current)
        elif choice == 1:
            self.OctalEscape(parent=current)
        elif choice == 2:
            self.UnicodeEscape(parent=current)
        self.exit_rule(current)
        return current
    EscapeSequence.min_depth = 0

    @depthcontrol
    def OctalEscape(self, parent=None):
        current = UnlexerRule(name='OctalEscape', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 1, 1][i] > self.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            UnlexerRule(src='\\', parent=current)
            self.OctalDigit(parent=current)
        elif choice == 1:
            UnlexerRule(src='\\', parent=current)
            self.OctalDigit(parent=current)
            self.OctalDigit(parent=current)
        elif choice == 2:
            UnlexerRule(src='\\', parent=current)
            self.ZeroToThree(parent=current)
            self.OctalDigit(parent=current)
            self.OctalDigit(parent=current)
        self.exit_rule(current)
        return current
    OctalEscape.min_depth = 1

    @depthcontrol
    def ZeroToThree(self, parent=None):
        current = UnlexerRule(name='ZeroToThree', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=self.char_from_list(charset_15), parent=current)
        self.exit_rule(current)
        return current
    ZeroToThree.min_depth = 0

    @depthcontrol
    def UnicodeEscape(self, parent=None):
        current = UnlexerRule(name='UnicodeEscape', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='\\', parent=current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                UnlexerRule(src='u', parent=current)
        self.HexDigit(parent=current)
        self.HexDigit(parent=current)
        self.HexDigit(parent=current)
        self.HexDigit(parent=current)
        self.exit_rule(current)
        return current
    UnicodeEscape.min_depth = 1

    @depthcontrol
    def NullLiteral(self, parent=None):
        current = UnlexerRule(name='NullLiteral', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='null', parent=current)
        self.exit_rule(current)
        return current
    NullLiteral.min_depth = 0

    @depthcontrol
    def LPAREN(self, parent=None):
        current = UnlexerRule(name='LPAREN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='(', parent=current)
        self.exit_rule(current)
        return current
    LPAREN.min_depth = 0

    @depthcontrol
    def RPAREN(self, parent=None):
        current = UnlexerRule(name='RPAREN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=')', parent=current)
        self.exit_rule(current)
        return current
    RPAREN.min_depth = 0

    @depthcontrol
    def LBRACE(self, parent=None):
        current = UnlexerRule(name='LBRACE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='{', parent=current)
        self.exit_rule(current)
        return current
    LBRACE.min_depth = 0

    @depthcontrol
    def RBRACE(self, parent=None):
        current = UnlexerRule(name='RBRACE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='}', parent=current)
        self.exit_rule(current)
        return current
    RBRACE.min_depth = 0

    @depthcontrol
    def LBRACK(self, parent=None):
        current = UnlexerRule(name='LBRACK', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='[', parent=current)
        self.exit_rule(current)
        return current
    LBRACK.min_depth = 0

    @depthcontrol
    def RBRACK(self, parent=None):
        current = UnlexerRule(name='RBRACK', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=']', parent=current)
        self.exit_rule(current)
        return current
    RBRACK.min_depth = 0

    @depthcontrol
    def SEMI(self, parent=None):
        current = UnlexerRule(name='SEMI', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=';', parent=current)
        self.exit_rule(current)
        return current
    SEMI.min_depth = 0

    @depthcontrol
    def COMMA(self, parent=None):
        current = UnlexerRule(name='COMMA', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=',', parent=current)
        self.exit_rule(current)
        return current
    COMMA.min_depth = 0

    @depthcontrol
    def DOT(self, parent=None):
        current = UnlexerRule(name='DOT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='.', parent=current)
        self.exit_rule(current)
        return current
    DOT.min_depth = 0

    @depthcontrol
    def ASSIGN(self, parent=None):
        current = UnlexerRule(name='ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='=', parent=current)
        self.exit_rule(current)
        return current
    ASSIGN.min_depth = 0

    @depthcontrol
    def GT(self, parent=None):
        current = UnlexerRule(name='GT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='>', parent=current)
        self.exit_rule(current)
        return current
    GT.min_depth = 0

    @depthcontrol
    def LT(self, parent=None):
        current = UnlexerRule(name='LT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='<', parent=current)
        self.exit_rule(current)
        return current
    LT.min_depth = 0

    @depthcontrol
    def BANG(self, parent=None):
        current = UnlexerRule(name='BANG', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='!', parent=current)
        self.exit_rule(current)
        return current
    BANG.min_depth = 0

    @depthcontrol
    def TILDE(self, parent=None):
        current = UnlexerRule(name='TILDE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='~', parent=current)
        self.exit_rule(current)
        return current
    TILDE.min_depth = 0

    @depthcontrol
    def QUESTION(self, parent=None):
        current = UnlexerRule(name='QUESTION', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='?', parent=current)
        self.exit_rule(current)
        return current
    QUESTION.min_depth = 0

    @depthcontrol
    def COLON(self, parent=None):
        current = UnlexerRule(name='COLON', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src=':', parent=current)
        self.exit_rule(current)
        return current
    COLON.min_depth = 0

    @depthcontrol
    def EQUAL(self, parent=None):
        current = UnlexerRule(name='EQUAL', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='==', parent=current)
        self.exit_rule(current)
        return current
    EQUAL.min_depth = 0

    @depthcontrol
    def LE(self, parent=None):
        current = UnlexerRule(name='LE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='<=', parent=current)
        self.exit_rule(current)
        return current
    LE.min_depth = 0

    @depthcontrol
    def GE(self, parent=None):
        current = UnlexerRule(name='GE', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='>=', parent=current)
        self.exit_rule(current)
        return current
    GE.min_depth = 0

    @depthcontrol
    def NOTEQUAL(self, parent=None):
        current = UnlexerRule(name='NOTEQUAL', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='!=', parent=current)
        self.exit_rule(current)
        return current
    NOTEQUAL.min_depth = 0

    @depthcontrol
    def AND(self, parent=None):
        current = UnlexerRule(name='AND', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='&&', parent=current)
        self.exit_rule(current)
        return current
    AND.min_depth = 0

    @depthcontrol
    def OR(self, parent=None):
        current = UnlexerRule(name='OR', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='||', parent=current)
        self.exit_rule(current)
        return current
    OR.min_depth = 0

    @depthcontrol
    def INC(self, parent=None):
        current = UnlexerRule(name='INC', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='++', parent=current)
        self.exit_rule(current)
        return current
    INC.min_depth = 0

    @depthcontrol
    def DEC(self, parent=None):
        current = UnlexerRule(name='DEC', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='--', parent=current)
        self.exit_rule(current)
        return current
    DEC.min_depth = 0

    @depthcontrol
    def ADD(self, parent=None):
        current = UnlexerRule(name='ADD', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='+', parent=current)
        self.exit_rule(current)
        return current
    ADD.min_depth = 0

    @depthcontrol
    def SUB(self, parent=None):
        current = UnlexerRule(name='SUB', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='-', parent=current)
        self.exit_rule(current)
        return current
    SUB.min_depth = 0

    @depthcontrol
    def MUL(self, parent=None):
        current = UnlexerRule(name='MUL', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='*', parent=current)
        self.exit_rule(current)
        return current
    MUL.min_depth = 0

    @depthcontrol
    def DIV(self, parent=None):
        current = UnlexerRule(name='DIV', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='/', parent=current)
        self.exit_rule(current)
        return current
    DIV.min_depth = 0

    @depthcontrol
    def BITAND(self, parent=None):
        current = UnlexerRule(name='BITAND', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='&', parent=current)
        self.exit_rule(current)
        return current
    BITAND.min_depth = 0

    @depthcontrol
    def BITOR(self, parent=None):
        current = UnlexerRule(name='BITOR', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='|', parent=current)
        self.exit_rule(current)
        return current
    BITOR.min_depth = 0

    @depthcontrol
    def CARET(self, parent=None):
        current = UnlexerRule(name='CARET', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='^', parent=current)
        self.exit_rule(current)
        return current
    CARET.min_depth = 0

    @depthcontrol
    def MOD(self, parent=None):
        current = UnlexerRule(name='MOD', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='%', parent=current)
        self.exit_rule(current)
        return current
    MOD.min_depth = 0

    @depthcontrol
    def ARROW(self, parent=None):
        current = UnlexerRule(name='ARROW', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='->', parent=current)
        self.exit_rule(current)
        return current
    ARROW.min_depth = 0

    @depthcontrol
    def COLONCOLON(self, parent=None):
        current = UnlexerRule(name='COLONCOLON', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='::', parent=current)
        self.exit_rule(current)
        return current
    COLONCOLON.min_depth = 0

    @depthcontrol
    def ADD_ASSIGN(self, parent=None):
        current = UnlexerRule(name='ADD_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='+=', parent=current)
        self.exit_rule(current)
        return current
    ADD_ASSIGN.min_depth = 0

    @depthcontrol
    def SUB_ASSIGN(self, parent=None):
        current = UnlexerRule(name='SUB_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='-=', parent=current)
        self.exit_rule(current)
        return current
    SUB_ASSIGN.min_depth = 0

    @depthcontrol
    def MUL_ASSIGN(self, parent=None):
        current = UnlexerRule(name='MUL_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='*=', parent=current)
        self.exit_rule(current)
        return current
    MUL_ASSIGN.min_depth = 0

    @depthcontrol
    def DIV_ASSIGN(self, parent=None):
        current = UnlexerRule(name='DIV_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='/=', parent=current)
        self.exit_rule(current)
        return current
    DIV_ASSIGN.min_depth = 0

    @depthcontrol
    def AND_ASSIGN(self, parent=None):
        current = UnlexerRule(name='AND_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='&=', parent=current)
        self.exit_rule(current)
        return current
    AND_ASSIGN.min_depth = 0

    @depthcontrol
    def OR_ASSIGN(self, parent=None):
        current = UnlexerRule(name='OR_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='|=', parent=current)
        self.exit_rule(current)
        return current
    OR_ASSIGN.min_depth = 0

    @depthcontrol
    def XOR_ASSIGN(self, parent=None):
        current = UnlexerRule(name='XOR_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='^=', parent=current)
        self.exit_rule(current)
        return current
    XOR_ASSIGN.min_depth = 0

    @depthcontrol
    def MOD_ASSIGN(self, parent=None):
        current = UnlexerRule(name='MOD_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='%=', parent=current)
        self.exit_rule(current)
        return current
    MOD_ASSIGN.min_depth = 0

    @depthcontrol
    def LSHIFT_ASSIGN(self, parent=None):
        current = UnlexerRule(name='LSHIFT_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='<<=', parent=current)
        self.exit_rule(current)
        return current
    LSHIFT_ASSIGN.min_depth = 0

    @depthcontrol
    def RSHIFT_ASSIGN(self, parent=None):
        current = UnlexerRule(name='RSHIFT_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='>>=', parent=current)
        self.exit_rule(current)
        return current
    RSHIFT_ASSIGN.min_depth = 0

    @depthcontrol
    def URSHIFT_ASSIGN(self, parent=None):
        current = UnlexerRule(name='URSHIFT_ASSIGN', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='>>>=', parent=current)
        self.exit_rule(current)
        return current
    URSHIFT_ASSIGN.min_depth = 0

    @depthcontrol
    def Identifier(self, parent=None):
        current = UnlexerRule(name='Identifier', parent=parent)
        self.enter_rule(current)
        self.IdentifierStart(parent=current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=inf):
                self.IdentifierPart(parent=current)
        self.exit_rule(current)
        return current
    Identifier.min_depth = 1

    @depthcontrol
    def IdentifierStart(self, parent=None):
        current = UnlexerRule(name='IdentifierStart', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            UnlexerRule(src=self.char_from_list(charset_16), parent=current)
        elif choice == 1:
            UnlexerRule(src=self.char_from_list(charset_17), parent=current)
        elif choice == 2:
            UnlexerRule(src=self.char_from_list(charset_18), parent=current)
        elif choice == 3:
            UnlexerRule(src=self.char_from_list(charset_19), parent=current)
        elif choice == 4:
            UnlexerRule(src=self.char_from_list(charset_20), parent=current)
        elif choice == 5:
            UnlexerRule(src=self.char_from_list(charset_21), parent=current)
        elif choice == 6:
            UnlexerRule(src=self.char_from_list(charset_22), parent=current)
        elif choice == 7:
            UnlexerRule(src=self.char_from_list(charset_23), parent=current)
        elif choice == 8:
            UnlexerRule(src=self.char_from_list(charset_24), parent=current)
        elif choice == 9:
            UnlexerRule(src=self.char_from_list(charset_25), parent=current)
        elif choice == 10:
            UnlexerRule(src=self.char_from_list(charset_26), parent=current)
        elif choice == 11:
            UnlexerRule(src=self.char_from_list(charset_27), parent=current)
        elif choice == 12:
            UnlexerRule(src=self.char_from_list(charset_28), parent=current)
        elif choice == 13:
            UnlexerRule(src=self.char_from_list(charset_29), parent=current)
        elif choice == 14:
            UnlexerRule(src=self.char_from_list(charset_30), parent=current)
        elif choice == 15:
            UnlexerRule(src=self.char_from_list(charset_31), parent=current)
        elif choice == 16:
            UnlexerRule(src=self.char_from_list(charset_32), parent=current)
        elif choice == 17:
            UnlexerRule(src=self.char_from_list(charset_33), parent=current)
        elif choice == 18:
            UnlexerRule(src=self.char_from_list(charset_34), parent=current)
        elif choice == 19:
            UnlexerRule(src=self.char_from_list(charset_35), parent=current)
        elif choice == 20:
            UnlexerRule(src=self.char_from_list(charset_36), parent=current)
        elif choice == 21:
            UnlexerRule(src=self.char_from_list(charset_37), parent=current)
        elif choice == 22:
            UnlexerRule(src=self.char_from_list(charset_38), parent=current)
        elif choice == 23:
            UnlexerRule(src=self.char_from_list(charset_39), parent=current)
        elif choice == 24:
            UnlexerRule(src=self.char_from_list(charset_40), parent=current)
        elif choice == 25:
            UnlexerRule(src=self.char_from_list(charset_41), parent=current)
        elif choice == 26:
            UnlexerRule(src=self.char_from_list(charset_42), parent=current)
        elif choice == 27:
            UnlexerRule(src=self.char_from_list(charset_43), parent=current)
        elif choice == 28:
            UnlexerRule(src=self.char_from_list(charset_44), parent=current)
        elif choice == 29:
            UnlexerRule(src=self.char_from_list(charset_45), parent=current)
        elif choice == 30:
            UnlexerRule(src=self.char_from_list(charset_46), parent=current)
        elif choice == 31:
            UnlexerRule(src=self.char_from_list(charset_47), parent=current)
        elif choice == 32:
            UnlexerRule(src=self.char_from_list(charset_48), parent=current)
        elif choice == 33:
            UnlexerRule(src=self.char_from_list(charset_49), parent=current)
        elif choice == 34:
            UnlexerRule(src=self.char_from_list(charset_50), parent=current)
        elif choice == 35:
            UnlexerRule(src=self.char_from_list(charset_51), parent=current)
        elif choice == 36:
            UnlexerRule(src=self.char_from_list(charset_52), parent=current)
        elif choice == 37:
            UnlexerRule(src=self.char_from_list(charset_53), parent=current)
        elif choice == 38:
            UnlexerRule(src=self.char_from_list(charset_54), parent=current)
        elif choice == 39:
            UnlexerRule(src=self.char_from_list(charset_55), parent=current)
        elif choice == 40:
            UnlexerRule(src=self.char_from_list(charset_56), parent=current)
        elif choice == 41:
            UnlexerRule(src=self.char_from_list(charset_57), parent=current)
        elif choice == 42:
            UnlexerRule(src=self.char_from_list(charset_58), parent=current)
        elif choice == 43:
            UnlexerRule(src=self.char_from_list(charset_59), parent=current)
        elif choice == 44:
            UnlexerRule(src=self.char_from_list(charset_60), parent=current)
        elif choice == 45:
            UnlexerRule(src=self.char_from_list(charset_61), parent=current)
        elif choice == 46:
            UnlexerRule(src=self.char_from_list(charset_62), parent=current)
        elif choice == 47:
            UnlexerRule(src=self.char_from_list(charset_63), parent=current)
        elif choice == 48:
            UnlexerRule(src=self.char_from_list(charset_64), parent=current)
        elif choice == 49:
            UnlexerRule(src=self.char_from_list(charset_65), parent=current)
        elif choice == 50:
            UnlexerRule(src=self.char_from_list(charset_66), parent=current)
        elif choice == 51:
            UnlexerRule(src=self.char_from_list(charset_67), parent=current)
        elif choice == 52:
            UnlexerRule(src=self.char_from_list(charset_68), parent=current)
        elif choice == 53:
            UnlexerRule(src=self.char_from_list(charset_69), parent=current)
        elif choice == 54:
            UnlexerRule(src=self.char_from_list(charset_70), parent=current)
        elif choice == 55:
            UnlexerRule(src=self.char_from_list(charset_71), parent=current)
        elif choice == 56:
            UnlexerRule(src=self.char_from_list(charset_72), parent=current)
        elif choice == 57:
            UnlexerRule(src=self.char_from_list(charset_73), parent=current)
        elif choice == 58:
            UnlexerRule(src=self.char_from_list(charset_74), parent=current)
        elif choice == 59:
            UnlexerRule(src=self.char_from_list(charset_75), parent=current)
        elif choice == 60:
            UnlexerRule(src=self.char_from_list(charset_76), parent=current)
        elif choice == 61:
            UnlexerRule(src=self.char_from_list(charset_77), parent=current)
        elif choice == 62:
            UnlexerRule(src=self.char_from_list(charset_78), parent=current)
        elif choice == 63:
            UnlexerRule(src=self.char_from_list(charset_79), parent=current)
        elif choice == 64:
            UnlexerRule(src=self.char_from_list(charset_80), parent=current)
        elif choice == 65:
            UnlexerRule(src=self.char_from_list(charset_81), parent=current)
        elif choice == 66:
            UnlexerRule(src=self.char_from_list(charset_82), parent=current)
        elif choice == 67:
            UnlexerRule(src=self.char_from_list(charset_83), parent=current)
        elif choice == 68:
            UnlexerRule(src=self.char_from_list(charset_84), parent=current)
        elif choice == 69:
            UnlexerRule(src=self.char_from_list(charset_85), parent=current)
        elif choice == 70:
            UnlexerRule(src=self.char_from_list(charset_86), parent=current)
        elif choice == 71:
            UnlexerRule(src=self.char_from_list(charset_87), parent=current)
        elif choice == 72:
            UnlexerRule(src=self.char_from_list(charset_88), parent=current)
        elif choice == 73:
            UnlexerRule(src=self.char_from_list(charset_89), parent=current)
        elif choice == 74:
            UnlexerRule(src=self.char_from_list(charset_90), parent=current)
        elif choice == 75:
            UnlexerRule(src=self.char_from_list(charset_91), parent=current)
        elif choice == 76:
            UnlexerRule(src=self.char_from_list(charset_92), parent=current)
        elif choice == 77:
            UnlexerRule(src=self.char_from_list(charset_93), parent=current)
        elif choice == 78:
            UnlexerRule(src=self.char_from_list(charset_94), parent=current)
        elif choice == 79:
            UnlexerRule(src=self.char_from_list(charset_95), parent=current)
        elif choice == 80:
            UnlexerRule(src=self.char_from_list(charset_96), parent=current)
        elif choice == 81:
            UnlexerRule(src=self.char_from_list(charset_97), parent=current)
        elif choice == 82:
            UnlexerRule(src=self.char_from_list(charset_98), parent=current)
        elif choice == 83:
            UnlexerRule(src=self.char_from_list(charset_99), parent=current)
        elif choice == 84:
            UnlexerRule(src=self.char_from_list(charset_100), parent=current)
        elif choice == 85:
            UnlexerRule(src=self.char_from_list(charset_101), parent=current)
        elif choice == 86:
            UnlexerRule(src=self.char_from_list(charset_102), parent=current)
        elif choice == 87:
            UnlexerRule(src=self.char_from_list(charset_103), parent=current)
        elif choice == 88:
            UnlexerRule(src=self.char_from_list(charset_104), parent=current)
        elif choice == 89:
            UnlexerRule(src=self.char_from_list(charset_105), parent=current)
        elif choice == 90:
            UnlexerRule(src=self.char_from_list(charset_106), parent=current)
        elif choice == 91:
            UnlexerRule(src=self.char_from_list(charset_107), parent=current)
        elif choice == 92:
            UnlexerRule(src=self.char_from_list(charset_108), parent=current)
        elif choice == 93:
            UnlexerRule(src=self.char_from_list(charset_109), parent=current)
        elif choice == 94:
            UnlexerRule(src=self.char_from_list(charset_110), parent=current)
        elif choice == 95:
            UnlexerRule(src=self.char_from_list(charset_111), parent=current)
        elif choice == 96:
            UnlexerRule(src=self.char_from_list(charset_112), parent=current)
        elif choice == 97:
            UnlexerRule(src=self.char_from_list(charset_113), parent=current)
        elif choice == 98:
            UnlexerRule(src=self.char_from_list(charset_114), parent=current)
        elif choice == 99:
            UnlexerRule(src=self.char_from_list(charset_115), parent=current)
        elif choice == 100:
            UnlexerRule(src=self.char_from_list(charset_116), parent=current)
        elif choice == 101:
            UnlexerRule(src=self.char_from_list(charset_117), parent=current)
        elif choice == 102:
            UnlexerRule(src=self.char_from_list(charset_118), parent=current)
        elif choice == 103:
            UnlexerRule(src=self.char_from_list(charset_119), parent=current)
        elif choice == 104:
            UnlexerRule(src=self.char_from_list(charset_120), parent=current)
        elif choice == 105:
            UnlexerRule(src=self.char_from_list(charset_121), parent=current)
        elif choice == 106:
            UnlexerRule(src=self.char_from_list(charset_122), parent=current)
        elif choice == 107:
            UnlexerRule(src=self.char_from_list(charset_123), parent=current)
        elif choice == 108:
            UnlexerRule(src=self.char_from_list(charset_124), parent=current)
        elif choice == 109:
            UnlexerRule(src=self.char_from_list(charset_125), parent=current)
        elif choice == 110:
            UnlexerRule(src=self.char_from_list(charset_126), parent=current)
        elif choice == 111:
            UnlexerRule(src=self.char_from_list(charset_127), parent=current)
        elif choice == 112:
            UnlexerRule(src=self.char_from_list(charset_128), parent=current)
        elif choice == 113:
            UnlexerRule(src=self.char_from_list(charset_129), parent=current)
        elif choice == 114:
            UnlexerRule(src=self.char_from_list(charset_130), parent=current)
        elif choice == 115:
            UnlexerRule(src=self.char_from_list(charset_131), parent=current)
        elif choice == 116:
            UnlexerRule(src=self.char_from_list(charset_132), parent=current)
        elif choice == 117:
            UnlexerRule(src=self.char_from_list(charset_133), parent=current)
        elif choice == 118:
            UnlexerRule(src=self.char_from_list(charset_134), parent=current)
        elif choice == 119:
            UnlexerRule(src=self.char_from_list(charset_135), parent=current)
        elif choice == 120:
            UnlexerRule(src=self.char_from_list(charset_136), parent=current)
        elif choice == 121:
            UnlexerRule(src=self.char_from_list(charset_137), parent=current)
        elif choice == 122:
            UnlexerRule(src=self.char_from_list(charset_138), parent=current)
        elif choice == 123:
            UnlexerRule(src=self.char_from_list(charset_139), parent=current)
        elif choice == 124:
            UnlexerRule(src=self.char_from_list(charset_140), parent=current)
        elif choice == 125:
            UnlexerRule(src=self.char_from_list(charset_141), parent=current)
        elif choice == 126:
            UnlexerRule(src=self.char_from_list(charset_142), parent=current)
        elif choice == 127:
            UnlexerRule(src=self.char_from_list(charset_143), parent=current)
        elif choice == 128:
            UnlexerRule(src=self.char_from_list(charset_144), parent=current)
        elif choice == 129:
            UnlexerRule(src=self.char_from_list(charset_145), parent=current)
        elif choice == 130:
            UnlexerRule(src=self.char_from_list(charset_146), parent=current)
        elif choice == 131:
            UnlexerRule(src=self.char_from_list(charset_147), parent=current)
        elif choice == 132:
            UnlexerRule(src=self.char_from_list(charset_148), parent=current)
        elif choice == 133:
            UnlexerRule(src=self.char_from_list(charset_149), parent=current)
        elif choice == 134:
            UnlexerRule(src=self.char_from_list(charset_150), parent=current)
        elif choice == 135:
            UnlexerRule(src=self.char_from_list(charset_151), parent=current)
        elif choice == 136:
            UnlexerRule(src=self.char_from_list(charset_152), parent=current)
        elif choice == 137:
            UnlexerRule(src=self.char_from_list(charset_153), parent=current)
        elif choice == 138:
            UnlexerRule(src=self.char_from_list(charset_154), parent=current)
        elif choice == 139:
            UnlexerRule(src=self.char_from_list(charset_155), parent=current)
        elif choice == 140:
            UnlexerRule(src=self.char_from_list(charset_156), parent=current)
        elif choice == 141:
            UnlexerRule(src=self.char_from_list(charset_157), parent=current)
        elif choice == 142:
            UnlexerRule(src=self.char_from_list(charset_158), parent=current)
        elif choice == 143:
            UnlexerRule(src=self.char_from_list(charset_159), parent=current)
        elif choice == 144:
            UnlexerRule(src=self.char_from_list(charset_160), parent=current)
        elif choice == 145:
            UnlexerRule(src=self.char_from_list(charset_161), parent=current)
        elif choice == 146:
            UnlexerRule(src=self.char_from_list(charset_162), parent=current)
        elif choice == 147:
            UnlexerRule(src=self.char_from_list(charset_163), parent=current)
        elif choice == 148:
            UnlexerRule(src=self.char_from_list(charset_164), parent=current)
        elif choice == 149:
            UnlexerRule(src=self.char_from_list(charset_165), parent=current)
        elif choice == 150:
            UnlexerRule(src=self.char_from_list(charset_166), parent=current)
        elif choice == 151:
            UnlexerRule(src=self.char_from_list(charset_167), parent=current)
        elif choice == 152:
            UnlexerRule(src=self.char_from_list(charset_168), parent=current)
        elif choice == 153:
            UnlexerRule(src=self.char_from_list(charset_169), parent=current)
        elif choice == 154:
            UnlexerRule(src=self.char_from_list(charset_170), parent=current)
        elif choice == 155:
            UnlexerRule(src=self.char_from_list(charset_171), parent=current)
        elif choice == 156:
            UnlexerRule(src=self.char_from_list(charset_172), parent=current)
        elif choice == 157:
            UnlexerRule(src=self.char_from_list(charset_173), parent=current)
        elif choice == 158:
            UnlexerRule(src=self.char_from_list(charset_174), parent=current)
        elif choice == 159:
            UnlexerRule(src=self.char_from_list(charset_175), parent=current)
        elif choice == 160:
            UnlexerRule(src=self.char_from_list(charset_176), parent=current)
        elif choice == 161:
            UnlexerRule(src=self.char_from_list(charset_177), parent=current)
        elif choice == 162:
            UnlexerRule(src=self.char_from_list(charset_178), parent=current)
        elif choice == 163:
            UnlexerRule(src=self.char_from_list(charset_179), parent=current)
        elif choice == 164:
            UnlexerRule(src=self.char_from_list(charset_180), parent=current)
        elif choice == 165:
            UnlexerRule(src=self.char_from_list(charset_181), parent=current)
        elif choice == 166:
            UnlexerRule(src=self.char_from_list(charset_182), parent=current)
        elif choice == 167:
            UnlexerRule(src=self.char_from_list(charset_183), parent=current)
        elif choice == 168:
            UnlexerRule(src=self.char_from_list(charset_184), parent=current)
        elif choice == 169:
            UnlexerRule(src=self.char_from_list(charset_185), parent=current)
        elif choice == 170:
            UnlexerRule(src=self.char_from_list(charset_186), parent=current)
        elif choice == 171:
            UnlexerRule(src=self.char_from_list(charset_187), parent=current)
        elif choice == 172:
            UnlexerRule(src=self.char_from_list(charset_188), parent=current)
        elif choice == 173:
            UnlexerRule(src=self.char_from_list(charset_189), parent=current)
        elif choice == 174:
            UnlexerRule(src=self.char_from_list(charset_190), parent=current)
        elif choice == 175:
            UnlexerRule(src=self.char_from_list(charset_191), parent=current)
        elif choice == 176:
            UnlexerRule(src=self.char_from_list(charset_192), parent=current)
        elif choice == 177:
            UnlexerRule(src=self.char_from_list(charset_193), parent=current)
        elif choice == 178:
            UnlexerRule(src=self.char_from_list(charset_194), parent=current)
        elif choice == 179:
            UnlexerRule(src=self.char_from_list(charset_195), parent=current)
        elif choice == 180:
            UnlexerRule(src=self.char_from_list(charset_196), parent=current)
        elif choice == 181:
            UnlexerRule(src=self.char_from_list(charset_197), parent=current)
        elif choice == 182:
            UnlexerRule(src=self.char_from_list(charset_198), parent=current)
        elif choice == 183:
            UnlexerRule(src=self.char_from_list(charset_199), parent=current)
        elif choice == 184:
            UnlexerRule(src=self.char_from_list(charset_200), parent=current)
        elif choice == 185:
            UnlexerRule(src=self.char_from_list(charset_201), parent=current)
        elif choice == 186:
            UnlexerRule(src=self.char_from_list(charset_202), parent=current)
        elif choice == 187:
            UnlexerRule(src=self.char_from_list(charset_203), parent=current)
        elif choice == 188:
            UnlexerRule(src=self.char_from_list(charset_204), parent=current)
        elif choice == 189:
            UnlexerRule(src=self.char_from_list(charset_205), parent=current)
        elif choice == 190:
            UnlexerRule(src=self.char_from_list(charset_206), parent=current)
        elif choice == 191:
            UnlexerRule(src=self.char_from_list(charset_207), parent=current)
        elif choice == 192:
            UnlexerRule(src=self.char_from_list(charset_208), parent=current)
        elif choice == 193:
            UnlexerRule(src=self.char_from_list(charset_209), parent=current)
        elif choice == 194:
            UnlexerRule(src=self.char_from_list(charset_210), parent=current)
        elif choice == 195:
            UnlexerRule(src=self.char_from_list(charset_211), parent=current)
        elif choice == 196:
            UnlexerRule(src=self.char_from_list(charset_212), parent=current)
        elif choice == 197:
            UnlexerRule(src=self.char_from_list(charset_213), parent=current)
        elif choice == 198:
            UnlexerRule(src=self.char_from_list(charset_214), parent=current)
        elif choice == 199:
            UnlexerRule(src=self.char_from_list(charset_215), parent=current)
        elif choice == 200:
            UnlexerRule(src=self.char_from_list(charset_216), parent=current)
        elif choice == 201:
            UnlexerRule(src=self.char_from_list(charset_217), parent=current)
        elif choice == 202:
            UnlexerRule(src=self.char_from_list(charset_218), parent=current)
        elif choice == 203:
            UnlexerRule(src=self.char_from_list(charset_219), parent=current)
        elif choice == 204:
            UnlexerRule(src=self.char_from_list(charset_220), parent=current)
        elif choice == 205:
            UnlexerRule(src=self.char_from_list(charset_221), parent=current)
        elif choice == 206:
            UnlexerRule(src=self.char_from_list(charset_222), parent=current)
        elif choice == 207:
            UnlexerRule(src=self.char_from_list(charset_223), parent=current)
        elif choice == 208:
            UnlexerRule(src=self.char_from_list(charset_224), parent=current)
        elif choice == 209:
            UnlexerRule(src=self.char_from_list(charset_225), parent=current)
        elif choice == 210:
            UnlexerRule(src=self.char_from_list(charset_226), parent=current)
        elif choice == 211:
            UnlexerRule(src=self.char_from_list(charset_227), parent=current)
        elif choice == 212:
            UnlexerRule(src=self.char_from_list(charset_228), parent=current)
        elif choice == 213:
            UnlexerRule(src=self.char_from_list(charset_229), parent=current)
        elif choice == 214:
            UnlexerRule(src=self.char_from_list(charset_230), parent=current)
        elif choice == 215:
            UnlexerRule(src=self.char_from_list(charset_231), parent=current)
        elif choice == 216:
            UnlexerRule(src=self.char_from_list(charset_232), parent=current)
        elif choice == 217:
            UnlexerRule(src=self.char_from_list(charset_233), parent=current)
        elif choice == 218:
            UnlexerRule(src=self.char_from_list(charset_234), parent=current)
        elif choice == 219:
            UnlexerRule(src=self.char_from_list(charset_235), parent=current)
        elif choice == 220:
            UnlexerRule(src=self.char_from_list(charset_236), parent=current)
        elif choice == 221:
            UnlexerRule(src=self.char_from_list(charset_237), parent=current)
        elif choice == 222:
            UnlexerRule(src=self.char_from_list(charset_238), parent=current)
        elif choice == 223:
            UnlexerRule(src=self.char_from_list(charset_239), parent=current)
        elif choice == 224:
            UnlexerRule(src=self.char_from_list(charset_240), parent=current)
        elif choice == 225:
            UnlexerRule(src=self.char_from_list(charset_241), parent=current)
        elif choice == 226:
            UnlexerRule(src=self.char_from_list(charset_242), parent=current)
        elif choice == 227:
            UnlexerRule(src=self.char_from_list(charset_243), parent=current)
        elif choice == 228:
            UnlexerRule(src=self.char_from_list(charset_244), parent=current)
        elif choice == 229:
            UnlexerRule(src=self.char_from_list(charset_245), parent=current)
        elif choice == 230:
            UnlexerRule(src=self.char_from_list(charset_246), parent=current)
        elif choice == 231:
            UnlexerRule(src=self.char_from_list(charset_247), parent=current)
        elif choice == 232:
            UnlexerRule(src=self.char_from_list(charset_248), parent=current)
        elif choice == 233:
            UnlexerRule(src=self.char_from_list(charset_249), parent=current)
        elif choice == 234:
            UnlexerRule(src=self.char_from_list(charset_250), parent=current)
        elif choice == 235:
            UnlexerRule(src=self.char_from_list(charset_251), parent=current)
        elif choice == 236:
            UnlexerRule(src=self.char_from_list(charset_252), parent=current)
        elif choice == 237:
            UnlexerRule(src=self.char_from_list(charset_253), parent=current)
        elif choice == 238:
            UnlexerRule(src=self.char_from_list(charset_254), parent=current)
        elif choice == 239:
            UnlexerRule(src=self.char_from_list(charset_255), parent=current)
        elif choice == 240:
            UnlexerRule(src=self.char_from_list(charset_256), parent=current)
        elif choice == 241:
            UnlexerRule(src=self.char_from_list(charset_257), parent=current)
        elif choice == 242:
            UnlexerRule(src=self.char_from_list(charset_258), parent=current)
        elif choice == 243:
            UnlexerRule(src=self.char_from_list(charset_259), parent=current)
        elif choice == 244:
            UnlexerRule(src=self.char_from_list(charset_260), parent=current)
        elif choice == 245:
            UnlexerRule(src=self.char_from_list(charset_261), parent=current)
        elif choice == 246:
            UnlexerRule(src=self.char_from_list(charset_262), parent=current)
        elif choice == 247:
            UnlexerRule(src=self.char_from_list(charset_263), parent=current)
        elif choice == 248:
            UnlexerRule(src=self.char_from_list(charset_264), parent=current)
        elif choice == 249:
            UnlexerRule(src=self.char_from_list(charset_265), parent=current)
        elif choice == 250:
            UnlexerRule(src=self.char_from_list(charset_266), parent=current)
        elif choice == 251:
            UnlexerRule(src=self.char_from_list(charset_267), parent=current)
        elif choice == 252:
            UnlexerRule(src=self.char_from_list(charset_268), parent=current)
        elif choice == 253:
            UnlexerRule(src=self.char_from_list(charset_269), parent=current)
        elif choice == 254:
            UnlexerRule(src=self.char_from_list(charset_270), parent=current)
        elif choice == 255:
            UnlexerRule(src=self.char_from_list(charset_271), parent=current)
        elif choice == 256:
            UnlexerRule(src=self.char_from_list(charset_272), parent=current)
        elif choice == 257:
            UnlexerRule(src=self.char_from_list(charset_273), parent=current)
        elif choice == 258:
            UnlexerRule(src=self.char_from_list(charset_274), parent=current)
        elif choice == 259:
            UnlexerRule(src=self.char_from_list(charset_275), parent=current)
        elif choice == 260:
            UnlexerRule(src=self.char_from_list(charset_276), parent=current)
        elif choice == 261:
            UnlexerRule(src=self.char_from_list(charset_277), parent=current)
        elif choice == 262:
            UnlexerRule(src=self.char_from_list(charset_278), parent=current)
        elif choice == 263:
            UnlexerRule(src=self.char_from_list(charset_279), parent=current)
        elif choice == 264:
            UnlexerRule(src=self.char_from_list(charset_280), parent=current)
        elif choice == 265:
            UnlexerRule(src=self.char_from_list(charset_281), parent=current)
        elif choice == 266:
            UnlexerRule(src=self.char_from_list(charset_282), parent=current)
        elif choice == 267:
            UnlexerRule(src=self.char_from_list(charset_283), parent=current)
        elif choice == 268:
            UnlexerRule(src=self.char_from_list(charset_284), parent=current)
        elif choice == 269:
            UnlexerRule(src=self.char_from_list(charset_285), parent=current)
        elif choice == 270:
            UnlexerRule(src=self.char_from_list(charset_286), parent=current)
        elif choice == 271:
            UnlexerRule(src=self.char_from_list(charset_287), parent=current)
        elif choice == 272:
            UnlexerRule(src=self.char_from_list(charset_288), parent=current)
        elif choice == 273:
            UnlexerRule(src=self.char_from_list(charset_289), parent=current)
        elif choice == 274:
            UnlexerRule(src=self.char_from_list(charset_290), parent=current)
        elif choice == 275:
            UnlexerRule(src=self.char_from_list(charset_291), parent=current)
        elif choice == 276:
            UnlexerRule(src=self.char_from_list(charset_292), parent=current)
        elif choice == 277:
            UnlexerRule(src=self.char_from_list(charset_293), parent=current)
        elif choice == 278:
            UnlexerRule(src=self.char_from_list(charset_294), parent=current)
        elif choice == 279:
            UnlexerRule(src=self.char_from_list(charset_295), parent=current)
        elif choice == 280:
            UnlexerRule(src=self.char_from_list(charset_296), parent=current)
        elif choice == 281:
            UnlexerRule(src=self.char_from_list(charset_297), parent=current)
        elif choice == 282:
            UnlexerRule(src=self.char_from_list(charset_298), parent=current)
        elif choice == 283:
            UnlexerRule(src=self.char_from_list(charset_299), parent=current)
        elif choice == 284:
            UnlexerRule(src=self.char_from_list(charset_300), parent=current)
        elif choice == 285:
            UnlexerRule(src=self.char_from_list(charset_301), parent=current)
        elif choice == 286:
            UnlexerRule(src=self.char_from_list(charset_302), parent=current)
        elif choice == 287:
            UnlexerRule(src=self.char_from_list(charset_303), parent=current)
        elif choice == 288:
            UnlexerRule(src=self.char_from_list(charset_304), parent=current)
        elif choice == 289:
            UnlexerRule(src=self.char_from_list(charset_305), parent=current)
        elif choice == 290:
            UnlexerRule(src=self.char_from_list(charset_306), parent=current)
        elif choice == 291:
            UnlexerRule(src=self.char_from_list(charset_307), parent=current)
        elif choice == 292:
            UnlexerRule(src=self.char_from_list(charset_308), parent=current)
        elif choice == 293:
            UnlexerRule(src=self.char_from_list(charset_309), parent=current)
        elif choice == 294:
            UnlexerRule(src=self.char_from_list(charset_310), parent=current)
        elif choice == 295:
            UnlexerRule(src=self.char_from_list(charset_311), parent=current)
        elif choice == 296:
            UnlexerRule(src=self.char_from_list(charset_312), parent=current)
        elif choice == 297:
            UnlexerRule(src=self.char_from_list(charset_313), parent=current)
        elif choice == 298:
            UnlexerRule(src=self.char_from_list(charset_314), parent=current)
        elif choice == 299:
            UnlexerRule(src=self.char_from_list(charset_315), parent=current)
        elif choice == 300:
            UnlexerRule(src=self.char_from_list(charset_316), parent=current)
        elif choice == 301:
            UnlexerRule(src=self.char_from_list(charset_317), parent=current)
        elif choice == 302:
            UnlexerRule(src=self.char_from_list(charset_318), parent=current)
        elif choice == 303:
            UnlexerRule(src=self.char_from_list(charset_319), parent=current)
        elif choice == 304:
            UnlexerRule(src=self.char_from_list(charset_320), parent=current)
        elif choice == 305:
            UnlexerRule(src=self.char_from_list(charset_321), parent=current)
        elif choice == 306:
            UnlexerRule(src=self.char_from_list(charset_322), parent=current)
        elif choice == 307:
            UnlexerRule(src=self.char_from_list(charset_323), parent=current)
        elif choice == 308:
            UnlexerRule(src=self.char_from_list(charset_324), parent=current)
        elif choice == 309:
            UnlexerRule(src=self.char_from_list(charset_325), parent=current)
        elif choice == 310:
            UnlexerRule(src=self.char_from_list(charset_326), parent=current)
        elif choice == 311:
            UnlexerRule(src=self.char_from_list(charset_327), parent=current)
        elif choice == 312:
            UnlexerRule(src=self.char_from_list(charset_328), parent=current)
        elif choice == 313:
            UnlexerRule(src=self.char_from_list(charset_329), parent=current)
        elif choice == 314:
            UnlexerRule(src=self.char_from_list(charset_330), parent=current)
        elif choice == 315:
            UnlexerRule(src=self.char_from_list(charset_331), parent=current)
        elif choice == 316:
            UnlexerRule(src=self.char_from_list(charset_332), parent=current)
        elif choice == 317:
            UnlexerRule(src=self.char_from_list(charset_333), parent=current)
        elif choice == 318:
            UnlexerRule(src=self.char_from_list(charset_334), parent=current)
        elif choice == 319:
            UnlexerRule(src=self.char_from_list(charset_335), parent=current)
        elif choice == 320:
            UnlexerRule(src=self.char_from_list(charset_336), parent=current)
        elif choice == 321:
            UnlexerRule(src=self.char_from_list(charset_337), parent=current)
        elif choice == 322:
            UnlexerRule(src=self.char_from_list(charset_338), parent=current)
        elif choice == 323:
            UnlexerRule(src=self.char_from_list(charset_339), parent=current)
        elif choice == 324:
            UnlexerRule(src=self.char_from_list(charset_340), parent=current)
        elif choice == 325:
            UnlexerRule(src=self.char_from_list(charset_341), parent=current)
        elif choice == 326:
            UnlexerRule(src=self.char_from_list(charset_342), parent=current)
        elif choice == 327:
            UnlexerRule(src=self.char_from_list(charset_343), parent=current)
        elif choice == 328:
            UnlexerRule(src=self.char_from_list(charset_344), parent=current)
        elif choice == 329:
            UnlexerRule(src=self.char_from_list(charset_345), parent=current)
        elif choice == 330:
            UnlexerRule(src=self.char_from_list(charset_346), parent=current)
        elif choice == 331:
            UnlexerRule(src=self.char_from_list(charset_347), parent=current)
        elif choice == 332:
            UnlexerRule(src=self.char_from_list(charset_348), parent=current)
        elif choice == 333:
            UnlexerRule(src=self.char_from_list(charset_349), parent=current)
        elif choice == 334:
            UnlexerRule(src=self.char_from_list(charset_350), parent=current)
        elif choice == 335:
            UnlexerRule(src=self.char_from_list(charset_351), parent=current)
        elif choice == 336:
            UnlexerRule(src=self.char_from_list(charset_352), parent=current)
        elif choice == 337:
            UnlexerRule(src=self.char_from_list(charset_353), parent=current)
        elif choice == 338:
            UnlexerRule(src=self.char_from_list(charset_354), parent=current)
        elif choice == 339:
            UnlexerRule(src=self.char_from_list(charset_355), parent=current)
        elif choice == 340:
            UnlexerRule(src=self.char_from_list(charset_356), parent=current)
        elif choice == 341:
            UnlexerRule(src=self.char_from_list(charset_357), parent=current)
        elif choice == 342:
            UnlexerRule(src=self.char_from_list(charset_358), parent=current)
        elif choice == 343:
            UnlexerRule(src=self.char_from_list(charset_359), parent=current)
        elif choice == 344:
            UnlexerRule(src=self.char_from_list(charset_360), parent=current)
        elif choice == 345:
            UnlexerRule(src=self.char_from_list(charset_361), parent=current)
        elif choice == 346:
            UnlexerRule(src=self.char_from_list(charset_362), parent=current)
        elif choice == 347:
            UnlexerRule(src=self.char_from_list(charset_363), parent=current)
        elif choice == 348:
            UnlexerRule(src=self.char_from_list(charset_364), parent=current)
        elif choice == 349:
            UnlexerRule(src=self.char_from_list(charset_365), parent=current)
        elif choice == 350:
            UnlexerRule(src=self.char_from_list(charset_366), parent=current)
        elif choice == 351:
            UnlexerRule(src=self.char_from_list(charset_367), parent=current)
        elif choice == 352:
            UnlexerRule(src=self.char_from_list(charset_368), parent=current)
        elif choice == 353:
            UnlexerRule(src=self.char_from_list(charset_369), parent=current)
        elif choice == 354:
            UnlexerRule(src=self.char_from_list(charset_370), parent=current)
        elif choice == 355:
            UnlexerRule(src=self.char_from_list(charset_371), parent=current)
        elif choice == 356:
            UnlexerRule(src=self.char_from_list(charset_372), parent=current)
        elif choice == 357:
            UnlexerRule(src=self.char_from_list(charset_373), parent=current)
        elif choice == 358:
            UnlexerRule(src=self.char_from_list(charset_374), parent=current)
        elif choice == 359:
            UnlexerRule(src=self.char_from_list(charset_375), parent=current)
        elif choice == 360:
            UnlexerRule(src=self.char_from_list(charset_376), parent=current)
        elif choice == 361:
            UnlexerRule(src=self.char_from_list(charset_377), parent=current)
        elif choice == 362:
            UnlexerRule(src=self.char_from_list(charset_378), parent=current)
        elif choice == 363:
            UnlexerRule(src=self.char_from_list(charset_379), parent=current)
        elif choice == 364:
            UnlexerRule(src=self.char_from_list(charset_380), parent=current)
        elif choice == 365:
            UnlexerRule(src=self.char_from_list(charset_381), parent=current)
        elif choice == 366:
            UnlexerRule(src=self.char_from_list(charset_382), parent=current)
        elif choice == 367:
            UnlexerRule(src=self.char_from_list(charset_383), parent=current)
        elif choice == 368:
            UnlexerRule(src=self.char_from_list(charset_384), parent=current)
        elif choice == 369:
            UnlexerRule(src=self.char_from_list(charset_385), parent=current)
        elif choice == 370:
            UnlexerRule(src=self.char_from_list(charset_386), parent=current)
        elif choice == 371:
            UnlexerRule(src=self.char_from_list(charset_387), parent=current)
        elif choice == 372:
            UnlexerRule(src=self.char_from_list(charset_388), parent=current)
        elif choice == 373:
            UnlexerRule(src=self.char_from_list(charset_389), parent=current)
        elif choice == 374:
            UnlexerRule(src=self.char_from_list(charset_390), parent=current)
        elif choice == 375:
            UnlexerRule(src=self.char_from_list(charset_391), parent=current)
        elif choice == 376:
            UnlexerRule(src=self.char_from_list(charset_392), parent=current)
        elif choice == 377:
            UnlexerRule(src=self.char_from_list(charset_393), parent=current)
        elif choice == 378:
            UnlexerRule(src=self.char_from_list(charset_394), parent=current)
        elif choice == 379:
            UnlexerRule(src=self.char_from_list(charset_395), parent=current)
        elif choice == 380:
            UnlexerRule(src=self.char_from_list(charset_396), parent=current)
        elif choice == 381:
            UnlexerRule(src=self.char_from_list(charset_397), parent=current)
        elif choice == 382:
            UnlexerRule(src=self.char_from_list(charset_398), parent=current)
        elif choice == 383:
            UnlexerRule(src=self.char_from_list(charset_399), parent=current)
        elif choice == 384:
            UnlexerRule(src=self.char_from_list(charset_400), parent=current)
        elif choice == 385:
            UnlexerRule(src=self.char_from_list(charset_401), parent=current)
        elif choice == 386:
            UnlexerRule(src=self.char_from_list(charset_402), parent=current)
        elif choice == 387:
            UnlexerRule(src=self.char_from_list(charset_403), parent=current)
        elif choice == 388:
            UnlexerRule(src=self.char_from_list(charset_404), parent=current)
        elif choice == 389:
            UnlexerRule(src=self.char_from_list(charset_405), parent=current)
        elif choice == 390:
            UnlexerRule(src=self.char_from_list(charset_406), parent=current)
        elif choice == 391:
            UnlexerRule(src=self.char_from_list(charset_407), parent=current)
        elif choice == 392:
            UnlexerRule(src=self.char_from_list(charset_408), parent=current)
        elif choice == 393:
            UnlexerRule(src=self.char_from_list(charset_409), parent=current)
        elif choice == 394:
            UnlexerRule(src=self.char_from_list(charset_410), parent=current)
        elif choice == 395:
            UnlexerRule(src=self.char_from_list(charset_411), parent=current)
        elif choice == 396:
            UnlexerRule(src=self.char_from_list(charset_412), parent=current)
        elif choice == 397:
            UnlexerRule(src=self.char_from_list(charset_413), parent=current)
        elif choice == 398:
            UnlexerRule(src=self.char_from_list(charset_414), parent=current)
        elif choice == 399:
            UnlexerRule(src=self.char_from_list(charset_415), parent=current)
        elif choice == 400:
            UnlexerRule(src=self.char_from_list(charset_416), parent=current)
        elif choice == 401:
            UnlexerRule(src=self.char_from_list(charset_417), parent=current)
        self.exit_rule(current)
        return current
    IdentifierStart.min_depth = 0

    @depthcontrol
    def IdentifierPart(self, parent=None):
        current = UnlexerRule(name='IdentifierPart', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            self.IdentifierStart(parent=current)
        elif choice == 1:
            UnlexerRule(src=self.char_from_list(charset_418), parent=current)
        elif choice == 2:
            UnlexerRule(src=self.char_from_list(charset_419), parent=current)
        elif choice == 3:
            UnlexerRule(src=self.char_from_list(charset_420), parent=current)
        elif choice == 4:
            UnlexerRule(src=self.char_from_list(charset_421), parent=current)
        elif choice == 5:
            UnlexerRule(src=self.char_from_list(charset_422), parent=current)
        elif choice == 6:
            UnlexerRule(src=self.char_from_list(charset_423), parent=current)
        elif choice == 7:
            UnlexerRule(src=self.char_from_list(charset_424), parent=current)
        elif choice == 8:
            UnlexerRule(src=self.char_from_list(charset_425), parent=current)
        elif choice == 9:
            UnlexerRule(src=self.char_from_list(charset_426), parent=current)
        elif choice == 10:
            UnlexerRule(src=self.char_from_list(charset_427), parent=current)
        elif choice == 11:
            UnlexerRule(src=self.char_from_list(charset_428), parent=current)
        elif choice == 12:
            UnlexerRule(src=self.char_from_list(charset_429), parent=current)
        elif choice == 13:
            UnlexerRule(src=self.char_from_list(charset_430), parent=current)
        elif choice == 14:
            UnlexerRule(src=self.char_from_list(charset_431), parent=current)
        elif choice == 15:
            UnlexerRule(src=self.char_from_list(charset_432), parent=current)
        elif choice == 16:
            UnlexerRule(src=self.char_from_list(charset_433), parent=current)
        elif choice == 17:
            UnlexerRule(src=self.char_from_list(charset_434), parent=current)
        elif choice == 18:
            UnlexerRule(src=self.char_from_list(charset_435), parent=current)
        elif choice == 19:
            UnlexerRule(src=self.char_from_list(charset_436), parent=current)
        elif choice == 20:
            UnlexerRule(src=self.char_from_list(charset_437), parent=current)
        elif choice == 21:
            UnlexerRule(src=self.char_from_list(charset_438), parent=current)
        elif choice == 22:
            UnlexerRule(src=self.char_from_list(charset_439), parent=current)
        elif choice == 23:
            UnlexerRule(src=self.char_from_list(charset_440), parent=current)
        elif choice == 24:
            UnlexerRule(src=self.char_from_list(charset_441), parent=current)
        elif choice == 25:
            UnlexerRule(src=self.char_from_list(charset_442), parent=current)
        elif choice == 26:
            UnlexerRule(src=self.char_from_list(charset_443), parent=current)
        elif choice == 27:
            UnlexerRule(src=self.char_from_list(charset_444), parent=current)
        elif choice == 28:
            UnlexerRule(src=self.char_from_list(charset_445), parent=current)
        elif choice == 29:
            UnlexerRule(src=self.char_from_list(charset_446), parent=current)
        elif choice == 30:
            UnlexerRule(src=self.char_from_list(charset_447), parent=current)
        elif choice == 31:
            UnlexerRule(src=self.char_from_list(charset_448), parent=current)
        elif choice == 32:
            UnlexerRule(src=self.char_from_list(charset_449), parent=current)
        elif choice == 33:
            UnlexerRule(src=self.char_from_list(charset_450), parent=current)
        elif choice == 34:
            UnlexerRule(src=self.char_from_list(charset_451), parent=current)
        elif choice == 35:
            UnlexerRule(src=self.char_from_list(charset_452), parent=current)
        elif choice == 36:
            UnlexerRule(src=self.char_from_list(charset_453), parent=current)
        elif choice == 37:
            UnlexerRule(src=self.char_from_list(charset_454), parent=current)
        elif choice == 38:
            UnlexerRule(src=self.char_from_list(charset_455), parent=current)
        elif choice == 39:
            UnlexerRule(src=self.char_from_list(charset_456), parent=current)
        elif choice == 40:
            UnlexerRule(src=self.char_from_list(charset_457), parent=current)
        elif choice == 41:
            UnlexerRule(src=self.char_from_list(charset_458), parent=current)
        elif choice == 42:
            UnlexerRule(src=self.char_from_list(charset_459), parent=current)
        elif choice == 43:
            UnlexerRule(src=self.char_from_list(charset_460), parent=current)
        elif choice == 44:
            UnlexerRule(src=self.char_from_list(charset_461), parent=current)
        elif choice == 45:
            UnlexerRule(src=self.char_from_list(charset_462), parent=current)
        elif choice == 46:
            UnlexerRule(src=self.char_from_list(charset_463), parent=current)
        elif choice == 47:
            UnlexerRule(src=self.char_from_list(charset_464), parent=current)
        elif choice == 48:
            UnlexerRule(src=self.char_from_list(charset_465), parent=current)
        elif choice == 49:
            UnlexerRule(src=self.char_from_list(charset_466), parent=current)
        elif choice == 50:
            UnlexerRule(src=self.char_from_list(charset_467), parent=current)
        elif choice == 51:
            UnlexerRule(src=self.char_from_list(charset_468), parent=current)
        elif choice == 52:
            UnlexerRule(src=self.char_from_list(charset_469), parent=current)
        elif choice == 53:
            UnlexerRule(src=self.char_from_list(charset_470), parent=current)
        elif choice == 54:
            UnlexerRule(src=self.char_from_list(charset_471), parent=current)
        elif choice == 55:
            UnlexerRule(src=self.char_from_list(charset_472), parent=current)
        elif choice == 56:
            UnlexerRule(src=self.char_from_list(charset_473), parent=current)
        elif choice == 57:
            UnlexerRule(src=self.char_from_list(charset_474), parent=current)
        elif choice == 58:
            UnlexerRule(src=self.char_from_list(charset_475), parent=current)
        elif choice == 59:
            UnlexerRule(src=self.char_from_list(charset_476), parent=current)
        elif choice == 60:
            UnlexerRule(src=self.char_from_list(charset_477), parent=current)
        elif choice == 61:
            UnlexerRule(src=self.char_from_list(charset_478), parent=current)
        elif choice == 62:
            UnlexerRule(src=self.char_from_list(charset_479), parent=current)
        elif choice == 63:
            UnlexerRule(src=self.char_from_list(charset_480), parent=current)
        elif choice == 64:
            UnlexerRule(src=self.char_from_list(charset_481), parent=current)
        elif choice == 65:
            UnlexerRule(src=self.char_from_list(charset_482), parent=current)
        elif choice == 66:
            UnlexerRule(src=self.char_from_list(charset_483), parent=current)
        elif choice == 67:
            UnlexerRule(src=self.char_from_list(charset_484), parent=current)
        elif choice == 68:
            UnlexerRule(src=self.char_from_list(charset_485), parent=current)
        elif choice == 69:
            UnlexerRule(src=self.char_from_list(charset_486), parent=current)
        elif choice == 70:
            UnlexerRule(src=self.char_from_list(charset_487), parent=current)
        elif choice == 71:
            UnlexerRule(src=self.char_from_list(charset_488), parent=current)
        elif choice == 72:
            UnlexerRule(src=self.char_from_list(charset_489), parent=current)
        elif choice == 73:
            UnlexerRule(src=self.char_from_list(charset_490), parent=current)
        elif choice == 74:
            UnlexerRule(src=self.char_from_list(charset_491), parent=current)
        elif choice == 75:
            UnlexerRule(src=self.char_from_list(charset_492), parent=current)
        elif choice == 76:
            UnlexerRule(src=self.char_from_list(charset_493), parent=current)
        elif choice == 77:
            UnlexerRule(src=self.char_from_list(charset_494), parent=current)
        elif choice == 78:
            UnlexerRule(src=self.char_from_list(charset_495), parent=current)
        elif choice == 79:
            UnlexerRule(src=self.char_from_list(charset_496), parent=current)
        elif choice == 80:
            UnlexerRule(src=self.char_from_list(charset_497), parent=current)
        elif choice == 81:
            UnlexerRule(src=self.char_from_list(charset_498), parent=current)
        elif choice == 82:
            UnlexerRule(src=self.char_from_list(charset_499), parent=current)
        elif choice == 83:
            UnlexerRule(src=self.char_from_list(charset_500), parent=current)
        elif choice == 84:
            UnlexerRule(src=self.char_from_list(charset_501), parent=current)
        elif choice == 85:
            UnlexerRule(src=self.char_from_list(charset_502), parent=current)
        elif choice == 86:
            UnlexerRule(src=self.char_from_list(charset_503), parent=current)
        elif choice == 87:
            UnlexerRule(src=self.char_from_list(charset_504), parent=current)
        elif choice == 88:
            UnlexerRule(src=self.char_from_list(charset_505), parent=current)
        elif choice == 89:
            UnlexerRule(src=self.char_from_list(charset_506), parent=current)
        elif choice == 90:
            UnlexerRule(src=self.char_from_list(charset_507), parent=current)
        elif choice == 91:
            UnlexerRule(src=self.char_from_list(charset_508), parent=current)
        elif choice == 92:
            UnlexerRule(src=self.char_from_list(charset_509), parent=current)
        elif choice == 93:
            UnlexerRule(src=self.char_from_list(charset_510), parent=current)
        elif choice == 94:
            UnlexerRule(src=self.char_from_list(charset_511), parent=current)
        elif choice == 95:
            UnlexerRule(src=self.char_from_list(charset_512), parent=current)
        elif choice == 96:
            UnlexerRule(src=self.char_from_list(charset_513), parent=current)
        elif choice == 97:
            UnlexerRule(src=self.char_from_list(charset_514), parent=current)
        elif choice == 98:
            UnlexerRule(src=self.char_from_list(charset_515), parent=current)
        elif choice == 99:
            UnlexerRule(src=self.char_from_list(charset_516), parent=current)
        elif choice == 100:
            UnlexerRule(src=self.char_from_list(charset_517), parent=current)
        elif choice == 101:
            UnlexerRule(src=self.char_from_list(charset_518), parent=current)
        elif choice == 102:
            UnlexerRule(src=self.char_from_list(charset_519), parent=current)
        elif choice == 103:
            UnlexerRule(src=self.char_from_list(charset_520), parent=current)
        elif choice == 104:
            UnlexerRule(src=self.char_from_list(charset_521), parent=current)
        elif choice == 105:
            UnlexerRule(src=self.char_from_list(charset_522), parent=current)
        elif choice == 106:
            UnlexerRule(src=self.char_from_list(charset_523), parent=current)
        elif choice == 107:
            UnlexerRule(src=self.char_from_list(charset_524), parent=current)
        elif choice == 108:
            UnlexerRule(src=self.char_from_list(charset_525), parent=current)
        elif choice == 109:
            UnlexerRule(src=self.char_from_list(charset_526), parent=current)
        elif choice == 110:
            UnlexerRule(src=self.char_from_list(charset_527), parent=current)
        elif choice == 111:
            UnlexerRule(src=self.char_from_list(charset_528), parent=current)
        elif choice == 112:
            UnlexerRule(src=self.char_from_list(charset_529), parent=current)
        elif choice == 113:
            UnlexerRule(src=self.char_from_list(charset_530), parent=current)
        elif choice == 114:
            UnlexerRule(src=self.char_from_list(charset_531), parent=current)
        elif choice == 115:
            UnlexerRule(src=self.char_from_list(charset_532), parent=current)
        elif choice == 116:
            UnlexerRule(src=self.char_from_list(charset_533), parent=current)
        elif choice == 117:
            UnlexerRule(src=self.char_from_list(charset_534), parent=current)
        elif choice == 118:
            UnlexerRule(src=self.char_from_list(charset_535), parent=current)
        elif choice == 119:
            UnlexerRule(src=self.char_from_list(charset_536), parent=current)
        elif choice == 120:
            UnlexerRule(src=self.char_from_list(charset_537), parent=current)
        elif choice == 121:
            UnlexerRule(src=self.char_from_list(charset_538), parent=current)
        elif choice == 122:
            UnlexerRule(src=self.char_from_list(charset_539), parent=current)
        elif choice == 123:
            UnlexerRule(src=self.char_from_list(charset_540), parent=current)
        elif choice == 124:
            UnlexerRule(src=self.char_from_list(charset_541), parent=current)
        elif choice == 125:
            UnlexerRule(src=self.char_from_list(charset_542), parent=current)
        elif choice == 126:
            UnlexerRule(src=self.char_from_list(charset_543), parent=current)
        elif choice == 127:
            UnlexerRule(src=self.char_from_list(charset_544), parent=current)
        elif choice == 128:
            UnlexerRule(src=self.char_from_list(charset_545), parent=current)
        elif choice == 129:
            UnlexerRule(src=self.char_from_list(charset_546), parent=current)
        elif choice == 130:
            UnlexerRule(src=self.char_from_list(charset_547), parent=current)
        elif choice == 131:
            UnlexerRule(src=self.char_from_list(charset_548), parent=current)
        elif choice == 132:
            UnlexerRule(src=self.char_from_list(charset_549), parent=current)
        elif choice == 133:
            UnlexerRule(src=self.char_from_list(charset_550), parent=current)
        elif choice == 134:
            UnlexerRule(src=self.char_from_list(charset_551), parent=current)
        elif choice == 135:
            UnlexerRule(src=self.char_from_list(charset_552), parent=current)
        elif choice == 136:
            UnlexerRule(src=self.char_from_list(charset_553), parent=current)
        elif choice == 137:
            UnlexerRule(src=self.char_from_list(charset_554), parent=current)
        elif choice == 138:
            UnlexerRule(src=self.char_from_list(charset_555), parent=current)
        elif choice == 139:
            UnlexerRule(src=self.char_from_list(charset_556), parent=current)
        elif choice == 140:
            UnlexerRule(src=self.char_from_list(charset_557), parent=current)
        elif choice == 141:
            UnlexerRule(src=self.char_from_list(charset_558), parent=current)
        elif choice == 142:
            UnlexerRule(src=self.char_from_list(charset_559), parent=current)
        elif choice == 143:
            UnlexerRule(src=self.char_from_list(charset_560), parent=current)
        elif choice == 144:
            UnlexerRule(src=self.char_from_list(charset_561), parent=current)
        elif choice == 145:
            UnlexerRule(src=self.char_from_list(charset_562), parent=current)
        elif choice == 146:
            UnlexerRule(src=self.char_from_list(charset_563), parent=current)
        elif choice == 147:
            UnlexerRule(src=self.char_from_list(charset_564), parent=current)
        elif choice == 148:
            UnlexerRule(src=self.char_from_list(charset_565), parent=current)
        elif choice == 149:
            UnlexerRule(src=self.char_from_list(charset_566), parent=current)
        elif choice == 150:
            UnlexerRule(src=self.char_from_list(charset_567), parent=current)
        elif choice == 151:
            UnlexerRule(src=self.char_from_list(charset_568), parent=current)
        elif choice == 152:
            UnlexerRule(src=self.char_from_list(charset_569), parent=current)
        elif choice == 153:
            UnlexerRule(src=self.char_from_list(charset_570), parent=current)
        elif choice == 154:
            UnlexerRule(src=self.char_from_list(charset_571), parent=current)
        elif choice == 155:
            UnlexerRule(src=self.char_from_list(charset_572), parent=current)
        elif choice == 156:
            UnlexerRule(src=self.char_from_list(charset_573), parent=current)
        elif choice == 157:
            UnlexerRule(src=self.char_from_list(charset_574), parent=current)
        elif choice == 158:
            UnlexerRule(src=self.char_from_list(charset_575), parent=current)
        elif choice == 159:
            UnlexerRule(src=self.char_from_list(charset_576), parent=current)
        elif choice == 160:
            UnlexerRule(src=self.char_from_list(charset_577), parent=current)
        elif choice == 161:
            UnlexerRule(src=self.char_from_list(charset_578), parent=current)
        elif choice == 162:
            UnlexerRule(src=self.char_from_list(charset_579), parent=current)
        elif choice == 163:
            UnlexerRule(src=self.char_from_list(charset_580), parent=current)
        elif choice == 164:
            UnlexerRule(src=self.char_from_list(charset_581), parent=current)
        elif choice == 165:
            UnlexerRule(src=self.char_from_list(charset_582), parent=current)
        elif choice == 166:
            UnlexerRule(src=self.char_from_list(charset_583), parent=current)
        elif choice == 167:
            UnlexerRule(src=self.char_from_list(charset_584), parent=current)
        elif choice == 168:
            UnlexerRule(src=self.char_from_list(charset_585), parent=current)
        elif choice == 169:
            UnlexerRule(src=self.char_from_list(charset_586), parent=current)
        elif choice == 170:
            UnlexerRule(src=self.char_from_list(charset_587), parent=current)
        elif choice == 171:
            UnlexerRule(src=self.char_from_list(charset_588), parent=current)
        elif choice == 172:
            UnlexerRule(src=self.char_from_list(charset_589), parent=current)
        elif choice == 173:
            UnlexerRule(src=self.char_from_list(charset_590), parent=current)
        elif choice == 174:
            UnlexerRule(src=self.char_from_list(charset_591), parent=current)
        elif choice == 175:
            UnlexerRule(src=self.char_from_list(charset_592), parent=current)
        elif choice == 176:
            UnlexerRule(src=self.char_from_list(charset_593), parent=current)
        elif choice == 177:
            UnlexerRule(src=self.char_from_list(charset_594), parent=current)
        elif choice == 178:
            UnlexerRule(src=self.char_from_list(charset_595), parent=current)
        elif choice == 179:
            UnlexerRule(src=self.char_from_list(charset_596), parent=current)
        elif choice == 180:
            UnlexerRule(src=self.char_from_list(charset_597), parent=current)
        elif choice == 181:
            UnlexerRule(src=self.char_from_list(charset_598), parent=current)
        elif choice == 182:
            UnlexerRule(src=self.char_from_list(charset_599), parent=current)
        elif choice == 183:
            UnlexerRule(src=self.char_from_list(charset_600), parent=current)
        elif choice == 184:
            UnlexerRule(src=self.char_from_list(charset_601), parent=current)
        elif choice == 185:
            UnlexerRule(src=self.char_from_list(charset_602), parent=current)
        elif choice == 186:
            UnlexerRule(src=self.char_from_list(charset_603), parent=current)
        elif choice == 187:
            UnlexerRule(src=self.char_from_list(charset_604), parent=current)
        elif choice == 188:
            UnlexerRule(src=self.char_from_list(charset_605), parent=current)
        elif choice == 189:
            UnlexerRule(src=self.char_from_list(charset_606), parent=current)
        elif choice == 190:
            UnlexerRule(src=self.char_from_list(charset_607), parent=current)
        elif choice == 191:
            UnlexerRule(src=self.char_from_list(charset_608), parent=current)
        elif choice == 192:
            UnlexerRule(src=self.char_from_list(charset_609), parent=current)
        elif choice == 193:
            UnlexerRule(src=self.char_from_list(charset_610), parent=current)
        elif choice == 194:
            UnlexerRule(src=self.char_from_list(charset_611), parent=current)
        elif choice == 195:
            UnlexerRule(src=self.char_from_list(charset_612), parent=current)
        elif choice == 196:
            UnlexerRule(src=self.char_from_list(charset_613), parent=current)
        elif choice == 197:
            UnlexerRule(src=self.char_from_list(charset_614), parent=current)
        elif choice == 198:
            UnlexerRule(src=self.char_from_list(charset_615), parent=current)
        elif choice == 199:
            UnlexerRule(src=self.char_from_list(charset_616), parent=current)
        elif choice == 200:
            UnlexerRule(src=self.char_from_list(charset_617), parent=current)
        elif choice == 201:
            UnlexerRule(src=self.char_from_list(charset_618), parent=current)
        elif choice == 202:
            UnlexerRule(src=self.char_from_list(charset_619), parent=current)
        elif choice == 203:
            UnlexerRule(src=self.char_from_list(charset_620), parent=current)
        elif choice == 204:
            UnlexerRule(src=self.char_from_list(charset_621), parent=current)
        elif choice == 205:
            UnlexerRule(src=self.char_from_list(charset_622), parent=current)
        elif choice == 206:
            UnlexerRule(src=self.char_from_list(charset_623), parent=current)
        elif choice == 207:
            UnlexerRule(src=self.char_from_list(charset_624), parent=current)
        elif choice == 208:
            UnlexerRule(src=self.char_from_list(charset_625), parent=current)
        elif choice == 209:
            UnlexerRule(src=self.char_from_list(charset_626), parent=current)
        elif choice == 210:
            UnlexerRule(src=self.char_from_list(charset_627), parent=current)
        elif choice == 211:
            UnlexerRule(src=self.char_from_list(charset_628), parent=current)
        elif choice == 212:
            UnlexerRule(src=self.char_from_list(charset_629), parent=current)
        elif choice == 213:
            UnlexerRule(src=self.char_from_list(charset_630), parent=current)
        elif choice == 214:
            UnlexerRule(src=self.char_from_list(charset_631), parent=current)
        elif choice == 215:
            UnlexerRule(src=self.char_from_list(charset_632), parent=current)
        elif choice == 216:
            UnlexerRule(src=self.char_from_list(charset_633), parent=current)
        elif choice == 217:
            UnlexerRule(src=self.char_from_list(charset_634), parent=current)
        elif choice == 218:
            UnlexerRule(src=self.char_from_list(charset_635), parent=current)
        elif choice == 219:
            UnlexerRule(src=self.char_from_list(charset_636), parent=current)
        elif choice == 220:
            UnlexerRule(src=self.char_from_list(charset_637), parent=current)
        elif choice == 221:
            UnlexerRule(src=self.char_from_list(charset_638), parent=current)
        elif choice == 222:
            UnlexerRule(src=self.char_from_list(charset_639), parent=current)
        elif choice == 223:
            UnlexerRule(src=self.char_from_list(charset_640), parent=current)
        elif choice == 224:
            UnlexerRule(src=self.char_from_list(charset_641), parent=current)
        elif choice == 225:
            UnlexerRule(src=self.char_from_list(charset_642), parent=current)
        elif choice == 226:
            UnlexerRule(src=self.char_from_list(charset_643), parent=current)
        elif choice == 227:
            UnlexerRule(src=self.char_from_list(charset_644), parent=current)
        elif choice == 228:
            UnlexerRule(src=self.char_from_list(charset_645), parent=current)
        self.exit_rule(current)
        return current
    IdentifierPart.min_depth = 0

    @depthcontrol
    def AT(self, parent=None):
        current = UnlexerRule(name='AT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='@', parent=current)
        self.exit_rule(current)
        return current
    AT.min_depth = 0

    @depthcontrol
    def ELLIPSIS(self, parent=None):
        current = UnlexerRule(name='ELLIPSIS', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='...', parent=current)
        self.exit_rule(current)
        return current
    ELLIPSIS.min_depth = 0

    @depthcontrol
    def WS(self, parent=None):
        current = UnlexerRule(name='WS', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=1, max=inf):
                UnlexerRule(src=self.char_from_list(charset_646), parent=current)
        self.exit_rule(current)
        return current
    WS.min_depth = 0

    @depthcontrol
    def COMMENT(self, parent=None):
        current = UnlexerRule(name='COMMENT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='/*', parent=current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=0, max=inf):
                UnlexerRule(src=self.any_char(), parent=current)
        UnlexerRule(src='*/', parent=current)
        self.exit_rule(current)
        return current
    COMMENT.min_depth = 0

    @depthcontrol
    def LINE_COMMENT(self, parent=None):
        current = UnlexerRule(name='LINE_COMMENT', parent=parent)
        self.enter_rule(current)
        UnlexerRule(src='//', parent=current)
        if self.max_depth >= 0:
            for _ in self.model.quantify(current, 0, min=0, max=inf):
                UnlexerRule(src=self.char_from_list(charset_647), parent=current)
        self.exit_rule(current)
        return current
    LINE_COMMENT.min_depth = 0

    @depthcontrol
    def program(self, parent=None):
        current = UnparserRule(name='program', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 3:
            for _ in self.model.quantify(current, 0, min=0, max=inf):
                self.classDeclaration(parent=current)
        self.main(parent=current)
        self.exit_rule(current)
        return current
    program.min_depth = 3

    @depthcontrol
    def main(self, parent=None):
        current = UnparserRule(name='main', parent=parent)
        self.enter_rule(current)
        self.MAIN(parent=current)
        self.ASSIGN(parent=current)
        self.expr(parent=current)
        self.SEMI(parent=current)
        self.exit_rule(current)
        return current
    main.min_depth = 2

    @depthcontrol
    def classDeclaration(self, parent=None):
        current = UnparserRule(name='classDeclaration', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [2, 2][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            if self.max_depth >= 1:
                for _ in self.model.quantify(current, 0, min=0, max=1):
                    self.CAP(parent=current)
            self.CLASS(parent=current)
            self.Identifier(parent=current)
            if self.max_depth >= 3:
                for _ in self.model.quantify(current, 1, min=0, max=1):
                    self.implementsDeclaration(parent=current)
            self.LBRACE(parent=current)
            if self.max_depth >= 4:
                for _ in self.model.quantify(current, 2, min=0, max=inf):
                    self.fieldDeclaration(parent=current)
            if self.max_depth >= 5:
                for _ in self.model.quantify(current, 3, min=0, max=inf):
                    self.methodDeclaration(parent=current)
            self.RBRACE(parent=current)
        elif choice == 1:
            self.INTERFACE(parent=current)
            self.Identifier(parent=current)
            if self.max_depth >= 3:
                for _ in self.model.quantify(current, 4, min=0, max=1):
                    self.extendsDeclaration(parent=current)
            self.LBRACE(parent=current)
            if self.max_depth >= 4:
                for _ in self.model.quantify(current, 5, min=0, max=inf):
                    self.methodHeader(parent=current)
                    self.SEMI(parent=current)
            self.RBRACE(parent=current)
        self.exit_rule(current)
        return current
    classDeclaration.min_depth = 2

    @depthcontrol
    def implementsDeclaration(self, parent=None):
        current = UnparserRule(name='implementsDeclaration', parent=parent)
        self.enter_rule(current)
        self.IMPLEMENTS(parent=current)
        self.Identifier(parent=current)
        if self.max_depth >= 2:
            for _ in self.model.quantify(current, 0, min=0, max=inf):
                self.COMMA(parent=current)
                self.Identifier(parent=current)
        self.exit_rule(current)
        return current
    implementsDeclaration.min_depth = 2

    @depthcontrol
    def extendsDeclaration(self, parent=None):
        current = UnparserRule(name='extendsDeclaration', parent=parent)
        self.enter_rule(current)
        self.EXTENDS(parent=current)
        self.Identifier(parent=current)
        if self.max_depth >= 2:
            for _ in self.model.quantify(current, 0, min=0, max=inf):
                self.COMMA(parent=current)
                self.Identifier(parent=current)
        self.exit_rule(current)
        return current
    extendsDeclaration.min_depth = 2

    @depthcontrol
    def fieldDeclaration(self, parent=None):
        current = UnparserRule(name='fieldDeclaration', parent=parent)
        self.enter_rule(current)
        self.typeName(parent=current)
        self.Identifier(parent=current)
        self.SEMI(parent=current)
        self.exit_rule(current)
        return current
    fieldDeclaration.min_depth = 3

    @depthcontrol
    def typeName(self, parent=None):
        current = UnparserRule(name='typeName', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [2, 2][i] > self.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            if self.max_depth >= 1:
                for _ in self.model.quantify(current, 0, min=0, max=1):
                    self.MDF(parent=current)
            self.Identifier(parent=current)
        elif choice == 1:
            self.AT(parent=current)
            self.Identifier(parent=current)
        self.exit_rule(current)
        return current
    typeName.min_depth = 2

    @depthcontrol
    def methodHeader(self, parent=None):
        current = UnparserRule(name='methodHeader', parent=parent)
        self.enter_rule(current)
        if self.max_depth >= 1:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.MDF(parent=current)
        self.METHOD(parent=current)
        self.typeName(parent=current)
        self.Identifier(parent=current)
        self.LPAREN(parent=current)
        if self.max_depth >= 4:
            for _ in self.model.quantify(current, 1, min=0, max=1):
                self.methodDeclarationArgument(parent=current)
                if self.max_depth >= 4:
                    for _ in self.model.quantify(current, 2, min=0, max=inf):
                        self.COMMA(parent=current)
                        self.methodDeclarationArgument(parent=current)
        self.RPAREN(parent=current)
        self.exit_rule(current)
        return current
    methodHeader.min_depth = 3

    @depthcontrol
    def methodDeclaration(self, parent=None):
        current = UnparserRule(name='methodDeclaration', parent=parent)
        self.enter_rule(current)
        self.methodHeader(parent=current)
        self.ASSIGN(parent=current)
        self.expr(parent=current)
        self.SEMI(parent=current)
        self.exit_rule(current)
        return current
    methodDeclaration.min_depth = 4

    @depthcontrol
    def methodDeclarationArgument(self, parent=None):
        current = UnparserRule(name='methodDeclarationArgument', parent=parent)
        self.enter_rule(current)
        self.typeName(parent=current)
        self.Identifier(parent=current)
        self.exit_rule(current)
        return current
    methodDeclarationArgument.min_depth = 3

    @depthcontrol
    def expr(self, parent=None):
        current = UnparserRule(name='expr', parent=parent)
        self.enter_rule(current)
        choice = self.model.choice(current, 0, [0 if [3, 3, 2, 3, 3, 4, 3, 1, 3, 4, 1, 1, 2][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            self.instantiationExpr(parent=current)
        elif choice == 1:
            self.signalConstructionExpr(parent=current)
        elif choice == 2:
            self.emptySignalExpr(parent=current)
        elif choice == 3:
            self.headExpr(parent=current)
        elif choice == 4:
            self.tailExpr(parent=current)
        elif choice == 5:
            self.letExpr(parent=current)
        elif choice == 6:
            self.expr(parent=current)
            self.DOT(parent=current)
            choice = self.model.choice(current, 1, [0 if [3, 3, 3, 3][i] > self.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
            if choice == 0:
                self.liftedCallExpr(parent=current)
            elif choice == 1:
                self.callExpr(parent=current)
            elif choice == 2:
                self.fieldAccessExpr(parent=current)
            elif choice == 3:
                self.fieldAssignExpr(parent=current)
        elif choice == 7:
            self.THIS(parent=current)
        elif choice == 8:
            self.IntegerLiteral(parent=current)
        elif choice == 9:
            self.FloatingPointLiteral(parent=current)
        elif choice == 10:
            self.StringLiteral(parent=current)
        elif choice == 11:
            self.BooleanLiteral(parent=current)
        elif choice == 12:
            self.Identifier(parent=current)
        self.exit_rule(current)
        return current
    expr.min_depth = 1

    @depthcontrol
    def instantiationExpr(self, parent=None):
        current = UnparserRule(name='instantiationExpr', parent=parent)
        self.enter_rule(current)
        self.NEW(parent=current)
        self.Identifier(parent=current)
        self.argumentList(parent=current)
        self.exit_rule(current)
        return current
    instantiationExpr.min_depth = 2

    @depthcontrol
    def signalConstructionExpr(self, parent=None):
        current = UnparserRule(name='signalConstructionExpr', parent=parent)
        self.enter_rule(current)
        self.AT(parent=current)
        self.LBRACK(parent=current)
        self.expr(parent=current)
        self.SEMI(parent=current)
        self.expr(parent=current)
        self.RBRACK(parent=current)
        self.exit_rule(current)
        return current
    signalConstructionExpr.min_depth = 2

    @depthcontrol
    def emptySignalExpr(self, parent=None):
        current = UnparserRule(name='emptySignalExpr', parent=parent)
        self.enter_rule(current)
        self.AT(parent=current)
        self.LBRACK(parent=current)
        self.RBRACK(parent=current)
        self.exit_rule(current)
        return current
    emptySignalExpr.min_depth = 1

    @depthcontrol
    def headExpr(self, parent=None):
        current = UnparserRule(name='headExpr', parent=parent)
        self.enter_rule(current)
        self.HEAD(parent=current)
        self.LPAREN(parent=current)
        self.expr(parent=current)
        self.RPAREN(parent=current)
        self.exit_rule(current)
        return current
    headExpr.min_depth = 2

    @depthcontrol
    def tailExpr(self, parent=None):
        current = UnparserRule(name='tailExpr', parent=parent)
        self.enter_rule(current)
        self.TAIL(parent=current)
        self.LPAREN(parent=current)
        self.expr(parent=current)
        self.RPAREN(parent=current)
        self.exit_rule(current)
        return current
    tailExpr.min_depth = 2

    @depthcontrol
    def letExpr(self, parent=None):
        current = UnparserRule(name='letExpr', parent=parent)
        self.enter_rule(current)
        self.typeName(parent=current)
        self.Identifier(parent=current)
        self.ASSIGN(parent=current)
        self.expr(parent=current)
        self.COMMA(parent=current)
        self.expr(parent=current)
        self.exit_rule(current)
        return current
    letExpr.min_depth = 3

    @depthcontrol
    def liftedCallExpr(self, parent=None):
        current = UnparserRule(name='liftedCallExpr', parent=parent)
        self.enter_rule(current)
        self.AT(parent=current)
        self.Identifier(parent=current)
        self.argumentList(parent=current)
        self.exit_rule(current)
        return current
    liftedCallExpr.min_depth = 2

    @depthcontrol
    def callExpr(self, parent=None):
        current = UnparserRule(name='callExpr', parent=parent)
        self.enter_rule(current)
        self.Identifier(parent=current)
        self.argumentList(parent=current)
        self.exit_rule(current)
        return current
    callExpr.min_depth = 2

    @depthcontrol
    def fieldAssignExpr(self, parent=None):
        current = UnparserRule(name='fieldAssignExpr', parent=parent)
        self.enter_rule(current)
        self.Identifier(parent=current)
        self.ASSIGN(parent=current)
        self.expr(parent=current)
        self.exit_rule(current)
        return current
    fieldAssignExpr.min_depth = 2

    @depthcontrol
    def fieldAccessExpr(self, parent=None):
        current = UnparserRule(name='fieldAccessExpr', parent=parent)
        self.enter_rule(current)
        self.Identifier(parent=current)
        self.exit_rule(current)
        return current
    fieldAccessExpr.min_depth = 2

    @depthcontrol
    def argumentList(self, parent=None):
        current = UnparserRule(name='argumentList', parent=parent)
        self.enter_rule(current)
        self.LPAREN(parent=current)
        if self.max_depth >= 2:
            for _ in self.model.quantify(current, 0, min=0, max=1):
                self.expr(parent=current)
                if self.max_depth >= 2:
                    for _ in self.model.quantify(current, 1, min=0, max=inf):
                        self.COMMA(parent=current)
                        self.expr(parent=current)
        self.RPAREN(parent=current)
        self.exit_rule(current)
        return current
    argumentList.min_depth = 1

    default_rule = program
