main = tail(tail(tail(@[@[]; tail(tail(10.0 ).ￋᮀؓࠞꤩ꣥᳐ၩ.ﮬ = @[@[this; this]; head(0.48 )].@ਊᩫ(this, head(tail(@[@@@Ⴧ ꧬ೬્ = 23 ,
@[@[0 ; ઐٰ]; @[new Ⱉ￹().ੳၤ = imm _ᯨ ਅꫬ = head(head(tail(new ￇ()))),
this.ઽൌેׄಃ; head(@["".ℇꥋၖ(this); imm ቍ ৱઁ = "\uuuuuu9C9C\20".@Պ(this, @[imm ଡ଼ Ⴭ = @[],
"\3"; tail("")]),
tail("\25")])]]; tail(this).@ꭋ(this)]).@ড়᪖ુ᤺(this, imm ꨄࠧ꣡ൢ ຳ = 6.0286865234375 ,
@[0.001922607421875 ; new Ẕ(new ⷊ(this), ঽ᪉)], tail(0.0 ), 7 .ﷸ߅ै = tail(head(@[])))).@ৱ(this, new Ⱔಿ(this)), ꥂ))]).Ҟ = new ᴯੋ(ﷺ, @[].ࠨᨘꥈੈ(this))));

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

