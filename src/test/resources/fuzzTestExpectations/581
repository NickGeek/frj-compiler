main = 9.0 ;

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class ল implements ﶝꫵൗꫫꥈ, ಚ  {
imm method @@ℤྒྷਂꤸ Ꙝ(imm ল this) =
@[@@க ኯ = this,
0 .ˣྴ᷄⃡.@Ᾱ༙ླྀୄౕ(this, 0.0 ); @[this; @[""; imm Ꞛ ߵ᷽ = tail(0.03 .ꬑ(this)),
tail(new ℂ(211 , new סּ᳹("\\\"\7", ૹૢ, new ૐැ(10 , a, head(new ࢡ())), @[new ᑉ(new ஐꠂᜳ൦(@[@["\61"; imm µೈ ᡠਹᤨ၀ = new ฃ(),
tail(this).〳 = 0.04736328125 ]; read Ήᜓ็ૉ᳥ ㆇꩌࠦ໔ = new અ෦〫ࠦ(@[].ຮྎ(this)),
21.0 ])); this])))]]];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface ಽ  {

}

interface Int extends Number, Literal  {

}

