main = tail("");

interface ܡ  {

}

capability class ს  {
imm method imm ຽ אַ၆(imm ს this, imm ¢ ࢳ) =
6.0 ;

mut method capsule ៗ ꞩ(mut ს this, @ጔ ዀ၀, @@@ద໌ ױ, @ᪧ᠓ ኴ, @Ⰽ ㆴ, imm ഊ ꩆ꙼) =
tail(tail(֏)).ꬁ6;
}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

class Ｚ꫁꣦  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ﻶ࡛ᝲ༾᳧  {
imm ￕ ᜠ૾ั;imm method mut ꘞ ೠ(imm ﻶ࡛ᝲ༾᳧ this, mut ଞ゙꛰̆ ڢ௯) =
@[];

mut method read Ὕ︯ិ ዀꪴ៝(mut ﻶ࡛ᝲ༾᳧ this) =
this;

imm method @@@@@ந ῲັ(imm ﻶ࡛ᝲ༾᳧ this) =
new ª(0.0 , @[new יִෲ೪᷼ᤰ(ﵷၖૄ); new ႎോ߅꤁༿()]);

imm method @@ⁱꫮᭂ᠎ ℒޫ(imm ﻶ࡛ᝲ༾᳧ this) =
"";
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class ൠॏෝెࣴ implements ꡭ, 〤ཷൄ  {
imm ꧢۜ ዀ;
}

interface ࠚ  {
imm method read ﶂ４ਿꪾ 〇꩙ꥊ(imm ࠚ this);

imm method @@@ꚭ ጓ୧ꦁ(imm ࠚ this, @ර ᯟ, imm ᎉୗ ᨨ᥌ᜓ);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

