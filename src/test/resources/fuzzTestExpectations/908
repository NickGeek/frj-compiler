main = tail("");

interface ܡ  {

}

capability class ს  {
imm method imm ຽ אַ၆(imm ¢ ࢳ) =
6.0 ;

mut method capsule ៗ ꞩ(@ጔ ዀ၀, @@@ద໌ ױ, @ᪧ᠓ ኴ, @Ⰽ ㆴ, imm ഊ ꩆ꙼) =
tail(tail(֏)).ꬁ6;
}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

class Ｚ꫁꣦  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ﻶ࡛ᝲ༾᳧  {
imm ￕ ᜠ૾ั;imm method mut ꘞ ೠ(mut ଞ゙꛰̆ ڢ௯) =
@[];

mut method read Ὕ︯ិ ዀꪴ៝() =
this;

imm method @@@@@ந ῲັ() =
new ª(0.0 , @[new יִෲ೪᷼ᤰ(ﵷၖૄ); new ႎോ߅꤁༿()]);

imm method @@ⁱꫮᭂ᠎ ℒޫ() =
"";
}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class ൠॏෝెࣴ implements ꡭ, 〤ཷൄ  {
imm ꧢۜ ዀ;
}

interface ࠚ  {
imm method read ﶂ４ਿꪾ 〇꩙ꥊ();

imm method @@@ꚭ ጓ୧ꦁ(@ර ᯟ, imm ᎉୗ ᨨ᥌ᜓ);
}

interface ProducerN  {
imm method imm Number get();
}

