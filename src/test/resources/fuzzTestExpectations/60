main = ࠤ๘;

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ʹੵ꯶಼  {

}

class ቐ᪙ૢၫ implements ຍꩃ, ؋  {
@ဈ᳹ µ;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ಏູ implements ە័, ଛ, ױ  {
@ꩮ ゎ᱕ઃૺ;
imm ױ ጶ;
imm ૱ ᛅ;
}

interface Int extends Number, Literal  {

}

interface ઐ⃡  {
imm method imm ૹ 女၁ᨗ();
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

capability class ૠꙻ  {
imm method read ꧻ $᜴(imm מּ᭭ ꧨ) =
@[];
}

interface ProducerN  {
imm method imm Number get();
}

class ኼ implements ܐꩼૣ, ᱲ  {
read method @Ⴭ ＄(imm ᨷ 〸, @@i ࡇ, imm 征 ꟺ, @@Ή ທୋ6ે) =
5.4E41 ;

read method imm ৼ એ᳴࠘() =
new ⷅ്ੑޭ၁ୁ(@[]);
}

