main = "꬗";

interface ꭂௗ extends ᳯ༵  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

capability class Ήఃֿ implements ၻၘ  {
imm Ⳬ ˮᝓ;imm method @ꮅৗ װꙻ(imm Ήఃֿ this) =
tail(6 ).@ߩ᪔(this).ລ᳤.ঌ〬;
}

interface ߝ⃩ extends ꜘ়  {

}

interface Int extends Number, Literal  {

}

class ળଂ implements Ϳ, ຄ  {
capsule method imm ዃࠖᤳٰ ꠸(capsule ળଂ this, @֏۰ ロ) =
@[""; @[imm ϳ઼ ࢶ = "",
ꬬ᱙᪉⁤ୖ; "\b\uF516"]].@ℿ(this);

imm method @@@@ኲ᧕᳐ா ໝ(imm ળଂ this) =
tail(@["\uu8e55𝋴῔\4ꬉ\ubE49"; head(new ᧅ๔ั೦ꪸꪾꢀ(@[], head(ପ).ዀ̑ = head(@[])))]);
}

interface Float extends Number, Literal  {

}

capability class ⷑ  {
read ᮯ ଽ᧗;mut method capsule Ⴭ۹ே ゞে(mut ⷑ this) =
6 ;
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

capability class ℷᯨ implements ດ᠒, ૐ  {
imm ଢ଼ ꧏ;
imm ಐᢆ ޱ;
}

interface ᾶ  {

}

capability class ןਹૻ  {
imm method capsule ૠဳ଼්࠙ৣ హ(imm ןਹૻ this, @ቛ⁤ᢩ ර) =
tail("\30");
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

