main = head(97088.0 .ߺ゚್ = new ⶽ݈());

interface Float extends Number, Literal  {

}

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class ஓ  {
@ࠨ ᎃ;
imm Ú ᠡ۠;
@ⶡ᠔ ൽ;
@ℕ ၡ;
@ਫ਼়ꪴ߬ා ⶊ;
imm º᭒්꩒ Ὕꩃ‏꩗ᢩࠩ;
@@@ຣ ዀ᱇;imm method @ו ⶀ(imm ஓ this) =
@[];

imm method @@ⶡ ಏꥉ(imm ஓ this) =
this;

imm method imm ῄ ᯏ๗(imm ஓ this) =
head(@[]);

imm method @Ｚే ၜ⁪(imm ஓ this, read ἦ טּྍ܏༵᮲ั) =
head(@[]);

mut method @@ㅢ්᭔ٰ Ὼꩃ(mut ஓ this, @@@@@ಐ ଽ, @ꧺ᪕ ⵔ, @@ໆ ￜ᭮, imm Γৗৌ꧱؀ి ꪱ࿆꧘ั, mut ᝌ ஜ) =
ਸ਼ੵ؜ᬁ៝;
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

