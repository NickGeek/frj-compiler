main = mut ͺ ℋৗ = mut ౚ꛰ ℼ = @Ԥ꯬ ꚸ = this,
242 ,
new ꬨ(),
new ቘிॣᨗ෫ۧ(this.ྋ(this));

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

interface Number extends Literal  {

}

capability class ﬤ implements ഈ  {
imm ఐ꧑゚ ಽ;
imm ᭅ֢ զ;
mut ⶁ ﬀ;
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ꟺ implements ອ, え, ꝛ߲؁, ቛׄ⁤⃰, ꦝై᳸  {
read method imm ￥࿆ ܐꫮື๒(read ꟺ this) =
0.0 ;

imm method @ﺎ ᢪ़(imm ꟺ this, @ഖ ޱ, @@ܠ಼۬ ᆳే, @ῒⷠ᳸ꨰ ළꯥ, @@Ʇ Ὑ, imm බ꙽ ဿ໕᪗) =
ୱ;

capsule method @@@@ຄ Ὃ꩘(capsule ꟺ this) =
tail(@టꚞ෯⳰ ︳େං = 4.0 ,
head(head(ﵓ⳯ూ)).@ᘑ(this)).ꩺᬄૌ(this);

read method capsule ߺꦶ ⶵꢀ(read ꟺ this) =
this;

imm method read ﲰ ꤿ(imm ꟺ this) =
@[];
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

