main = this;

interface ℽ෦ੈ  {

}

class ୡ  {
imm method @ꤸ ྉ(imm ୡ this, @ᦽꙻ ㄐౄׂ, imm ᡣ҆ਐ⵿ᷞׄ๙ ֏, imm એ ᳱ) =
tail(head(@[new ՙ(); @[@[26 .ﵒ = @[]; imm ட ꨞֿೊᜓ = @[ꩁֿ; tail(1.91889408E8 )],
ዅ]; new ଷ()]]));
}

interface ᲁ extends ⅇ༿  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method mut Std print(mut Std this, imm String msg) =
this;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();

read method imm String concat(read Std this, imm String a, imm String b) =
a;
}

class ⶤ  {
imm method @@@@@@ⷌ᪱ ꣳ(imm ⶤ this, @@ഽ⵿ ᕿ, read ܐ ලೕ) =
"";
}

interface ヶᩗ extends ዀ, ᮾ  {

}

interface ۻၳ꧳ extends ៗׇො  {
imm method read ՙ༘ ¢(imm ۻၳ꧳ this, imm ꡛ ㇽ);

capsule method @@ઇ් _း᳑꣒(capsule ۻၳ꧳ this, @@@@ඵ יִ, @@@ඐ சৣૢ);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface મ  {
imm method @ﶮ ಬ᪕ᝒ(imm મ this, @@ᎉ ն᳐, read ㅍ᭔࡛ࠝூ᥇꛱ Ⱓ७, @ￗ ᢄۨ, imm ⶖ ၔ);
}

interface Float extends Number, Literal  {

}

interface ᥳ extends ꣽ  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

class ⱖ implements £꘧ᤪ, ᝧᝲ  {
@ᥚ Όׅೇੵ;
@@ⱊ ൕ᳐ꢁ;
imm แ࿆ ꭤ;
@ৼ᠗ ᪧ;
imm ஔ ᎆ￹୧ཱུၢၞ;
imm 〥 ጔ;
imm ꣻ܏ౌ ꘕ᭕ೈ;mut method @Ί ᰐ(mut ⱖ this) =
12.51953125 ;
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

