main = new ᨎ();

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface ℨۧৗ extends ળ, ൎᳳꯦ  {
imm method imm ኽ ꫂ(@@ٮ ⁿ, imm ꧺ॒ Ֆ, read ⅅ໘ ൔᤦᨛ);
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ࠉ  {

}

class ꮜ༹ం⁭７  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

class Ⴧိ༵  {
imm method @@@@@ῑ ῡ᭬꯹() =
@ୱ װᝲऻᜓ = this,
3 ;
}

interface Float extends Number, Literal  {

}

class ￎꩼ implements ℰ  {
imm method read ﹲ ⅈ() =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

interface ꭺః  {
imm method imm ৎ ॐ(imm Ά៝ঃ ਰຸં, imm ਣ ϊ, imm ؋ ͽ꯴);

imm method read า ੲ(capsule Ά ৎ꧗᳙ꫵ, imm ℤ ㄔ, capsule ꓶ എ２);

capsule method @@ௐၨ᧙ে ὒ(imm ⵯ ꘫ҆, capsule Ά ℎꪲ҇ꢁ­꩔ූा);

capsule method @ޱୈ ꩄ(capsule ઑ ၕ⵿༹);

read method @ၓౌ ఏ໋(@ຊ ⁿ, @@ಀ ΐᬹ);

imm method @ᳩ ᳯ(read එ૾ᜓ ॳ, imm ℂ ⁀, imm ቌֿૌꫫ Ὕ);
}

