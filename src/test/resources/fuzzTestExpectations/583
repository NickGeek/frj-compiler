main = new ᨎ();

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

interface ℨۧৗ extends ળ, ൎᳳꯦ  {
imm method imm ኽ ꫂ(imm ℨۧৗ this, @@ٮ ⁿ, imm ꧺ॒ Ֆ, read ⅅ໘ ൔᤦᨛ);
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ࠉ  {

}

class ꮜ༹ం⁭７  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

class Ⴧိ༵  {
imm method @@@@@ῑ ῡ᭬꯹(imm Ⴧိ༵ this) =
@ୱ װᝲऻᜓ = this,
3 ;
}

interface Float extends Number, Literal  {

}

class ￎꩼ implements ℰ  {
imm method read ﹲ ⅈ(imm ￎꩼ this) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface ꭺః  {
imm method imm ৎ ॐ(imm ꭺః this, imm Ά៝ঃ ਰຸં, imm ਣ ϊ, imm ؋ ͽ꯴);

imm method read า ੲ(imm ꭺః this, capsule Ά ৎ꧗᳙ꫵ, imm ℤ ㄔ, capsule ꓶ എ２);

capsule method @@ௐၨ᧙ে ὒ(capsule ꭺః this, imm ⵯ ꘫ҆, capsule Ά ℎꪲ҇ꢁ­꩔ූा);

capsule method @ޱୈ ꩄ(capsule ꭺః this, capsule ઑ ၕ⵿༹);

read method @ၓౌ ఏ໋(read ꭺః this, @ຊ ⁿ, @@ಀ ΐᬹ);

imm method @ᳩ ᳯ(imm ꭺః this, read එ૾ᜓ ॳ, imm ℂ ⁀, imm ቌֿૌꫫ Ὕ);
}

