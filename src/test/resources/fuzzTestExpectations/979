main = new ঐਂﬞ(@[Ꮟਁ; imm ૱ᬂ ஏ߬ꥌ = this,
"෗𝒩\b𑊟\r"]);

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ፗꦁ  {
imm method imm ⵯ 𢡄(imm ፗꦁ this, imm や॔ৃꦴႄꦂ ힵ꯬, read ᥒ܏⵿ ೲୈ, imm ٮ ︴);

read method @@@@@ⶄ ᜰᭁ(read ፗꦁ this, @ஙᬀ ຂ);

capsule method @@@@ສ௬ Ᾱ꛰(capsule ፗꦁ this, @@ᦿ ኑ̖, @@ྌ᷼ ⵯ໋ે꫁ெᝲ, imm գ ˬ, read І க, imm ᢌ ਫ਼, imm x༷᭳ ൽి, @ᜧᜓꯪ ﹍꩐);

imm method @@ଇ⃫ ᚹ༷(imm ፗꦁ this);
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

class ꫳ  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class 緑ෲׇ݄ꙺ implements ල  {
mut ઐؓꪳ ꘚ⵿ꦁ႗ﬞᝒೕ­්ှ６಼͍ั⵿۟꪿ா;
imm ᝯ່︈ ꓹ꩔ැ;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface ㆨ߇﻿  {

}

