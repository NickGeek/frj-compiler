main = @[this; @[]];

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ꩆ  {
@ℾૂꙻؓ᥏ ᦑ࠭ၳ;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface ⳳ꠆  {

}

interface Literal  {
imm method imm String toString();
}

interface Ὑ  {
imm method capsule إꩃ 㟧ⷬ(imm ힱ ｲၪ, @@@@ꯝ ῗ, @@@ຢಃ 䩄, read 顅۱᷉᱆ ࢨ, @@@@য় Ｕ, imm Å෮౭߇⃩ අ, @@৻ܸ᳸ ࡢഀ, @ຳिᳲᬷꢀ ቩ, @ࢻٰ ᦷ, @@@ࡍႛ￹ ࠨྞ༹᷻, @@@ៗ ߴྖ);

imm method imm ە༷ࠦ Ά(@@@ᚆ ῑ᱄７ࠫ);

imm method @Ⴁೈ්ஂ ஈ();
}

interface ProducerN  {
imm method imm Number get();
}

