main = @[this; @[]];

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class ꩆ  {
@ℾૂꙻؓ᥏ ᦑ࠭ၳ;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface ⳳ꠆  {

}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface Ὑ  {
imm method capsule إꩃ 㟧ⷬ(imm Ὑ this, imm ힱ ｲၪ, @@@@ꯝ ῗ, @@@ຢಃ 䩄, read 顅۱᷉᱆ ࢨ, @@@@য় Ｕ, imm Å෮౭߇⃩ අ, @@৻ܸ᳸ ࡢഀ, @ຳिᳲᬷꢀ ቩ, @ࢻٰ ᦷ, @@@ࡍႛ￹ ࠨྞ༹᷻, @@@ៗ ߴྖ);

imm method imm ە༷ࠦ Ά(imm Ὑ this, @@@ᚆ ῑ᱄７ࠫ);

imm method @Ⴁೈ්ஂ ஈ(imm Ὑ this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

