main = Í¨í‡™º;

interface ·©ÉÍ†Ü extends œç‡∏±ﬂÆ  {

}

capability class Ôø†  {
imm ·Äé‡ß¢ „Äß‡µÜ‡•ë;imm method @Íüª‡©µÍ´Æ ‚Ñ§(imm Ôø† this, @@Ôº∏ »ê‡ºµ) =
tail(head(@[""; 640019.0 ]).·ù¶ = new ·Ωù·≥≤‡ßá·®ô());

capsule method imm ‹ê‡°ö‡Ω∏ „Ü†‡ÆÇ·ü©(capsule Ôø† this, @@À§ ‡§ó) =
@[];

capsule method imm ‚Åî‡∫ª ·≥Ø‡≥Ç‡∑≥(capsule Ôø† this, imm Ôøã Í≠°Íöû) =
@[];

imm method @„Éè Ôøã‡£ª(imm Ôø† this, @@Í®Ñ‡∑õ „Öè, @√∞ ·ãÇ) =
@[];

capsule method @@@·æº·©ï‡•ï‡¨É ·úÑ€°(capsule Ôø† this) =
"\nÍ©ÄëÉÇ".Í•ÑÍ†• = "\uucf8a\\";
}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method mut Std print(mut Std this, imm String msg) =
this;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();

read method imm String concat(read Std this, imm String a, imm String b) =
a;
}

capability class €∫‡µÅ  {
@ÎÜ≤ Í¶Ñ‡°õ;mut method mut ·®ã ·äæ(mut €∫‡µÅ this) =
tail(tail(new Í™∂Í¶É‡¨É(@@Íß∫‡ß£ Ìêæ = head(10.0 ),
14 )));
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class Í¥π implements ’¢, ·äµ‡∂É›á‡ßç, ·è∏, ·âõ, ·âã‡∑û  {
@ﬂï Í©Ç;
imm ·ΩõÍ£´ Í≠°;
}

interface ·É∫ extends ÔºøÔø∫‡©¶, ·¨û‡∑ò  {

}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

