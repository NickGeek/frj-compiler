main = tail("");

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class ꨆ៝ implements ꩤ៝, ৡෑ, ਏ༙, ྌׄ, உ, ꚳ  {
imm ၛꤨ଼ ဿ৭;imm method imm ˮ Ὑ(imm ꨆ៝ this, capsule ߴ ほ, imm ᇂ נּ༘, imm ꧏ႐ ˣ) =
@@ࢶܑ ଏ = this,
@[ῤ਼ܑ; new פּ܏().@ᢐং(this, @@ⷚꢷ ߺ = this,
tail(this), @[])].ꣽᦻ(this, 0.0 );

mut method mut ⶂ ꬫ(mut ꨆ៝ this, @@ۥంऻ༾ꢻ︥ ྊꠋ⃡) =
"";
}

interface ⷀۡ extends ⷋ, ޱ  {

}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

class ꜙֿ  {
imm അ ᡏె;
imm ⴉ྆ 奄⁦;
}

capability class ਸ਼࿆ꢀ꩗  {
imm method mut ᜏಿె ଲః(imm ਸ਼࿆ꢀ꩗ this, imm ᨀ ꣳᩮࣘꤩ‌ಂਃ, @@@@ꭓ༾ౕ ꫴ៝୧ᩪ) =
96436.0 ;

read method imm ߪ ﹎(read ਸ਼࿆ꢀ꩗ this) =
tail(@[@[]; @[]]);
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

capability class ᣞဴ  {
mut ៗ ꘫ;
@@ˮ ὖꠦ;
capsule স᩻ ዀୖ᳙᪳;
@@@@@ꬒ꩓॔ൊ ࢴ;
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

