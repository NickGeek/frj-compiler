main = ᨯ;

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method mut Std print(mut Std this, imm String msg) =
this;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();

read method imm String concat(read Std this, imm String a, imm String b) =
a;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

class ª  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Ωଂ꫁ॅ extends Ὓ୩  {
imm method @ꜘෞ ꭠ(imm Ωଂ꫁ॅ this);

mut method mut Έ ዀ(mut Ωଂ꫁ॅ this, imm ΐ３ੁ ꮪֿ, imm ꪹ ᝂൂ, imm ἦ᭑ੋோ ؋);

imm method @ﹲഁ ꪊ́᳹(imm Ωଂ꫁ॅ this);

capsule method read ࡖྒࠠ ￜ່᥈ᢩ(capsule Ωଂ꫁ॅ this, @ͻ૮଼꛰᱂ੑ ꣳ);

imm method imm 齵 ㇶ(imm Ωଂ꫁ॅ this, @@ﻭ ཀ, mut ᝅ Ꭵࠬ);

capsule method @﹏⳰ ꨗ(capsule Ωଂ꫁ॅ this);

mut method read ਸꩽ़ ῲ‍(mut Ωଂ꫁ॅ this);

imm method @@@Ꮍ ড়(imm Ωଂ꫁ॅ this, @ૐ꪿ ꩺ);
}

interface Float extends Number, Literal  {

}

interface ᣱ؃ extends ኯ  {
capsule method imm ਯ⁪ ﷸꠧே(capsule ᣱ؃ this, @@@ঋ ＄, @@૱ ꖉ, imm ௹͋ೕꠋꢁ ⵯੑ២);
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

