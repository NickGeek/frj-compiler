main = head(0.307 );

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method mut Std print(mut Std this, imm String msg) =
this;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();

read method imm String concat(read Std this, imm String a, imm String b) =
a;
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

capability class ꠟ­꯷꤫ implements ⴧྻ, ಀ, ၰ  {
@@@ײ ዃ;capsule method imm ឯ￺༹ ຍᷝ(capsule ꠟ­꯷꤫ this) =
@Ⴭ K = mut ஸᯫꫯ ױ = new ಀ༿(head(head(@["\74"; new Δ()]))),
tail(0 ),
ٯꙶ;

mut method imm ퟢැ꣬ ⶒ᥈(mut ꠟ­꯷꤫ this, imm ཁె ー) =
imm ቘ࡙༵ ⶭ = new இ(),
new ѿ꯬();

imm method read ࠤࠪ ᾃੇౕ(imm ꠟ­꯷꤫ this, @@@ᱶꪰ ꪻꠥၬెꠦ, @@ｎ óಂ߰᮳) =
tail(this);

imm method @@@ۥ ߺ(imm ꠟ­꯷꤫ this, @@@¢ഁ ઽၤ, capsule Ýੑ౭ ૠ, @Ꮶ ףּ, mut ⷋ ໂၪꯨ᷸ꣂ, imm ਊ ꫪ, imm ຍ ꪶ෧ᰥ, mut ൡ ͼ３ੋ, imm ໆ ゟ) =
new ⶆၞࠦⷰऻ(ც).@ਜ(this);

imm method @ܤ ⷋ(imm ꠟ­꯷꤫ this, @@ᢪާ ࠕ࿆ⷬꩻ) =
2 ;
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface Όܸ᳐  {
imm method @ⅶᝒ Ἑૣ(imm Όܸ᳐ this, @@立 Ⴭ਼, @@ퟨ জ಼꫁꫁);
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

