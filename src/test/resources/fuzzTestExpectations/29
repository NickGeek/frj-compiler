main = 1.3695494260769754E36 .ᤁৈ(this);

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ᣵᤤঁ᭮ extends ஃֿ  {

}

interface ᳬ extends ￛ  {
imm method @@ꛙோ ஞੇ(imm ᳬ this, @@૱ ૹ, @@ᜠ਼ ꪹ৯);

capsule method @@ଡ଼ၴ ˉ(capsule ᳬ this, capsule ℿৄ꣕ꯤ ퟫ);

read method @ૠۡ؂༙ ℌం꫶ⷺꫯ౫ႈ(read ᳬ this, @@@Ձ ᳮ︉, imm எ꪿⁬⁦꯹྆྆၆ 〸፞);
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

class ὕꦵ⁤ີᮣ  {
read method capsule יִ ￖ༵(read ὕꦵ⁤ີᮣ this, @ਵ྇ၗ ጮ៝ි, mut ೡ꧱ූ ղꦃ, imm $ ῳ҆, mut Ｐ꧱ׄ⁤ ℸ) =
1.2370144554547378E27 ;

capsule method @@ൎ ࠚ(capsule ὕꦵ⁤ີᮣ this, @@@ಓ්៧ ḥ) =
@[@[]; 0.83984375 ];
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

