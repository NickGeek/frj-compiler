main = read ኸ ꭉ = 8.0 ,
"";

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

interface ೱ꩑  {
read method imm ႁ ਗ਼ْ༹⃡(read ೱ꩑ this);

imm method imm ꩆ‮ ゑ(imm ೱ꩑ this, imm ৠ ゟ, @@@ॳ ߴೇ, imm ឥ ģ, @ꫧᮡᩘ྇ ⱛ, @ၡ Ûꩌ, @@@ꠃᬼೋꩼ ྋ෬ః);

imm method @@@झౣ ℤ҅(imm ೱ꩑ this, @ൺੀ ףּັᨗިೃ﻿);

imm method imm 〴꣑ ⶬꩌୈ(imm ೱ꩑ this);

imm method @ஜ Ꞝ︫(imm ೱ꩑ this);

imm method mut ᐜீ ડꩌ(imm ೱ꩑ this, imm り༩ Qಃ꫁ꧥ, @ຊ ᮮཷꚞ૮);

read method @@@ￗ ൎ(read ೱ꩑ this);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ꘪ extends ࠤ, Ῑ୫, ⁔ၭ  {
capsule method read ഏู ૐ(capsule ꘪ this, imm ⵯ ℽ);

imm method @@ඪ ቋᮭ(imm ꘪ this, imm ᳫ ꮋୖᰮ, @ຫઃ ‿);

imm method @@ౚ ະ(imm ꘪ this);

mut method @լ় ऽੈி⳱ꩍ(mut ꘪ this);
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface ֏ extends ﹷિ  {
capsule method @@ࡢ ℂ(capsule ֏ this, @ﲱᮡ꯭ 〻, imm ͽ഻҅ ೱꤨ᳧ຸ॔);
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

