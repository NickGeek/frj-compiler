main = new ꢮ꯭(tail(@ꪶꩼ ಏꫭ = new ຢ("", imm ꕑ੯ ઽ = "\137",
Ⴧ༵.ⴘಂ(this), head(150 ), imm ꩄ ꥸౣ = 0.0 ,
imm ᮮ ኺ᪳ = 336 ,
@@ব ঽ܏ = this,
Ή០᱈.ඓᝲ = 10 .ㇽ = 0 , this, tail(head(0 )), tail(""), "", new ℕૢ️(), "", new ଽ(), @[ୡ; Infinity ].Ά, tail(ᚾ), 0.0 ),
Ά), @[@[head(new Ὃ(head(@[15 ; head(new ܐᮩ()).ꜘ = @[]])).ઉ); @ம༷۱ᝒ ಌ = new ၥ(tail(ꬢ), 0 , @[], @[@[].ñ(this, imm ຍ᳑ைꪾ ࢴ = head(new ៛꫁ົ⁩()).@ꭡ(this),
@ᰝ ዀꦾ੪ = @[],
this.@ၥ(this), new ㄔ(@[@[tail(this); @[].ऽౣేꫬ = ৻ꠋ༨]; @[]]), read ଽ ֏ꣃ᧔ = @[],
7 ); @[].ૐࠖෳׁ(this, 0.0 )], 1 .@֏ᝲ(this, this, 11.25 , ۯྒ᳹᱀), 14.0 ),
2.0 ]; ""], this, 11.8125 , @[]);

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

class ꟻၳ  {
imm ꧏั᧗ꩃౣ ᳮ҅;
}

interface Int extends Number, Literal  {

}

