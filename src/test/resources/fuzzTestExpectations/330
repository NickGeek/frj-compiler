main = 47 ;

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ૹົ implements ඡ  {
@यᳲ ዻ᪄;imm method imm סּۧ ኌ၂⃫ୂ(@@@@ﻦ ৱ๖, @ਪௌۨ ༀ) =
tail(@ꩂۧ꪿꯸ಎ ﶙ = ﬧ,
this);

capsule method mut ꬫ അ() =
ೡ;
}

interface த  {
imm method @ລೣᜲ ำׄ(@Ử הּ);

imm method @ၑฺ தྡྷ();
}

interface ລ extends ៗ, ம, મ, ₦  {
imm method @@@@ᠭ ໟ᯦(mut ಇ ⅈ, imm ቝ꤃ Ὓ);

imm method @ጜ ºూ();
}

interface ۥ  {
imm method @ꭡു ٯੈ(@ⳬ ⅎᨘு, @ຂୄ ᢄ, imm ᛊീ ᳶ꯹, capsule ಥೋ２ ႎ⃜᳸, @ᩆ 㽊, @@ￗ෮ _, imm ﬕ ဿ, @Ⴭ એ);
}

interface ℂۤ  {
capsule method imm ୡ ᝮ(imm ລ ￛܑஂ);
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

class Ⳬ implements Ϟ  {
imm method @ߠ έౣ(capsule ᦲꫮ ⁱ) =
imm ꣻ໒ ஓຼೆ = @@ꘝ ﯰ = "",
head(capsule ᾱො߯ ႎ = ꠃ,
@ῗ ꘄ = tail(head(new ஈꯣ(tail(@["\3𖩟\""; new ൡ᳹(0.0 , 256.0 ).@Ὲ(this)])))),
""),
head(ቘ⃚۟೫.@ﰢ(this));

capsule method imm ᥦ ꠃ() =
new ᡍ();

imm method @@@ꩈۢާ꫁ ꧏৣೌ⃡(@@@@@@ቛ ᥠ, @ૠ ꞈ, imm ꩬ ꅄ) =
tail(new ⁔(2.861E11 , tail(0.0 ), imm ᛗ ⶲ = head(ຣ),
ꣴ));

imm method read ஏ ヽႈ() =
2.0E-9 ;
}

interface Int extends Number, Literal  {

}

class థ॔  {
imm method @@ℑ ͳ(imm Ὶׅ፞८᩼ୈ ˮꩼ) =
@@ቋၳ ⳳ = 1.7498005798264095E100 ,
1 ;

imm method imm ꜙ༙ੈ ड྇() =
"ਫ਼";
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

interface p〬  {

}

capability class ঢ় implements ﹏಼  {

}

interface ꣽ extends ಲ, ᛂ, ௹꫁ᳲ, ᬳ︀  {
imm method @ㅢฺઁ ꩉ(capsule ঐ଼༙꯲ ዂ);
}

