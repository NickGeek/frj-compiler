main = 0 ;

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

capability class և⁬഻꤄᭒  {
@@@מּ ఏັ;
}

capability class ᤃ  {
capsule ᪧ૦ૈ ˬ;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ꞵํ  {
imm method @@@ﱎꤧୗਁ༿꛱ ꮪ();

capsule method @ￃ༿ ᭆ꣮(mut ⅆ ﹲ, @ᮙܑଂെ öਿ, @ዏ ணᤥ);

imm method @ꩺ༙ం ⶪૢ();

imm method @ᭉ ೡ઼⁧(mut ݼੵື ꫳ, imm ﬗᮁຼ٣᮰؅꤀ ൠꩌ);
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

class ਲ਼ implements ꚣ⁬  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

capability class ᩃ꧔ั߈ꩍ༘߇꧱  {

}

capability class ࢺ implements র  {
@@@ແ ⶏ;
}

interface ProducerN  {
imm method imm Number get();
}

