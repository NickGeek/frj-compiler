main = @[];

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ℚ  {
imm ꥱꩃౣﬞ ቔ᳴ꠂැ;capsule method imm ଽ᮰ އொ() =
head("");

imm method @ၡೃ ە() =
head(@ᮆ ＄ꩍ් = this,
this.בּ);

imm method imm ⁀ ꢈၫ() =
ꖁ.@µ(this, 70.0 );

imm method imm ℇ ୡ઼(@ᮮ ହொ០᱒ൊ) =
@[this; @[]];

imm method mut ଲ୩ ᢪ() =
@⁔ෟꠣ ଆ༵ે១༷ = @ᛵு ۯु = @[75 ; @@@＄ ۿ꙯႕ = @[@ଳׁ᧘ ມੈ᭔ = "\2\05\41\\\336",
2559 ; 7 ],
new ਈ྆(0.0 )],
head(mut ⅸ ˮࠦྏୋ = @[],
@[@[]; mut ᚨ ⁿ⃡ೆ = this,
@[head(new ဿൢஂ()); 20 ]].எ = head(new ఝ().ۺ = @[27 ; read ㇱ ಅ = 41 ,
ⴧ]).@〺(this, "", head(0 )).@Ųၤ᭭ඃ(this, @[])),
2 ;

read method mut ℹꫬ ఽ() =
tail("");

imm method @એᩜ ഐൌ() =
head("\\").ࠨႆ = ॐ૭;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

