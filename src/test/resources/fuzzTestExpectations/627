main = this;

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Ⴭ  {
imm method @@ຍꥐ ℤ();
}

interface Int extends Number, Literal  {

}

capability class ໆ࿆ௗ implements ⅅ  {
@@@ᳶ꫶ ῴ;
imm Ըྒྷ ૹ;
@@ఫ _ୣႚ࿆ে;
mut ၑ ꘓ࿆ⷦ9ٰ;
}

interface ம extends ޱ  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

capability class ወ઼ implements Ｋᮀ࿆឵  {
@@ꬃ፟ ૡ়;
mut ꣲ מּᝲ꠆;imm method @ᳵ᳭ ϡ(@@ୱ ⳳ᪄, imm ૐႏᤱ ಫ￺, @@@ヾꫫୂ ￗ゙) =
imm Ｖ꤉ ﬓ = new ܐ(),
@[@[""; 49 ]; tail(@[@[""; head(new ꧏ(@ⷌ ஐ = 0 ,
ⁱ︉ᢩ, 39 ))]; new ன()])];
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

