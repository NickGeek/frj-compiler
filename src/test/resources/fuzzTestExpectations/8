main = @—á Œè = head(this).·É¨ = tail(8.0 ),
@[56470402307 ; new ‡ºÄ‡†™(imm ·∞û‡µ™ Àë‡µÜ·†ô = new ‡®ê(@[this; new ÔΩÆ·ÅÉ(1.0 , @["\f\uDEbd"; 0 ], 0.0 .‚ÑáÍôØ, @[tail(94.0 ); @[]])]),
head("\t"), 1.8130221999122236E-217 , @["\uuuucbF8"; Í≠ù‡´¢·©¥Í©ª], "\4".‡∫∞‡µÜ‡´ã€≠‡µÉ(this, 10.0 , new ‡™∏(), this, 0.9375 .·±ç‡≥á))].‡©ô = @@@@·®† ‡ÆÉ‡µó = @@‚Ñá ÈÅÄÍ•è = 1.37438953472E13 ,
@[head(""); "ò†ÄÔ¨Ω\u7a34\0‚Éê".Í°à = À¨Í™øﬁ´],
new ‚Ñ≠();

interface Float extends Number, Literal  {

}

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

