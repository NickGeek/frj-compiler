main = @ч Ώ = head(this).წ = tail(8.0 ),
@[56470402307 ; new ༀࠪ(imm ᰞ൪ ˑെ᠙ = new ਐ(@[this; new ｮ၃(1.0 , @["\f\uDEbd"; 0 ], 0.0 .ℇ꙯, @[tail(94.0 ); @[]])]),
head("\t"), 1.8130221999122236E-217 , @["\uuuucbF8"; ꭝૢᩴꩻ], "\4".ະെોۭൃ(this, 10.0 , new સ(), this, 0.9375 .ᱍೇ))].ਖ਼ = @@@@ᨠ ஃൗ = @@ℇ 遀ꥏ = 1.37438953472E13 ,
@[head(""); "𘠀﬽\u7a34\0⃐".ꡈ = ˬ꪿ޫ],
new ℭ();

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

