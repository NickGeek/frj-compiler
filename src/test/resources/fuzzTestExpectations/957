main = this;

class ᄁ implements ѐႋେ  {
imm method capsule ጶ଼ ᝋᤣࠧ(@ꓱ೪৭꫶᷈ 〆￻ྖܑ) =
imm ൎ ؋ॎ﻿ാွ३ = @@〺௩ஂ᳷ᢩ ವ = Ή,
@[],
10.0 ;

imm method imm ꫂꩃꠋ౬්ꢀ ιᩖᤡۣ() =
@ᢟᝳৌ꧓ֿ ྋ = 0 .@ᝮꩼ(this, @[ﮟൃ; @ౡꩍ ᝉ = new ꠸၈ೊ᳸۵(this),
"\77\\﹓່\t\\".ⸯۤ꧸ = 3.0E-8 ]),
ⳳ꧓ꩌ.ℚ = "\uu0Da2".@ऎ෦(this);

capsule method @ℝ ⶳᨛ(mut ꙡ⃡ ⁀ੈᮀၩื, capsule ٯ ꪘ) =
7 ;
}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ௐ﻿  {
imm method @@µࠜ ꠄ０ഁ(imm ﹎ྎ ῂޮ2, @@p ꬠ);

imm method capsule ၦ꧹͐ ᏹ⁭(@@@@@@@ﾲ༧ ຮ);

imm method capsule ەꬉ଼᜔່ꦿ᠗꪿ឺ ໝ();
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface ॺਾ໓឴ၞ  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

interface Ｏ൯  {

}

