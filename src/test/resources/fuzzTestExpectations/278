main = "";

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class ￂ়  {
@@ᜯᩝ ﻣଁ꯵᮷ൣᬀ⵿;
@Ⴧ഻ࠣ⃜ ঋ಼⵿꠆ਁ႓꧖;imm method imm ռ ᲅ(imm ￂ় this) =
mut অ ﬣ = ᲃ,
head("঍").玲 = 0.375 ;

imm method @@@@Ꞌ ؽ(imm ￂ় this) =
tail(@യ‪ Å᠋ = 3.0 ,
head(tail(@@@ꧾ ߺ១ꠂ = ଽܑ,
1 )));
}

class ꚹ් implements ຊၟ꫶, ꜝ, ᯜ  {
imm method @ꗉ ㅛ(imm ꚹ් this, mut ￠ ဦ) =
"\uuFAf5𐢟";
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ꬉ  {
imm ຫ ஜ಼­꙯;capsule method @@@סּ߳⃡ ॱ(capsule ꬉ this, read ⴭෑׇ᪷ ꘙྒ, imm ꦍᬄୃ স, @ΐꫬ ᢄ) =
this;

imm method @@ꠉ༹ Ῠ(imm ꬉ this) =
@[""; new ⳳꨱﬞࣦ᳒("\r︀")];
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ۮ⁤⁨ extends Ὴ, キၴᢩࠧ  {
read method @@@ꜩᯧ ਖ਼ꥊৗࠩ(read ۮ⁤⁨ this, mut ቘꥏྯ꠆᷾ࠟ ㄓൊ);
}

interface Int extends Number, Literal  {

}

class ຽ໋ implements ꪹ, ߵ‬ᭂ, ꘫ, ઽꯩ  {
@@Ὕ ૹࠠׄᝳ;
}

interface Float extends Number, Literal  {

}

interface ﵳ⁩ꠥ  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

capability class ড় implements ﻺ, ℤ៨  {
@@ৼᩩ 〦;
mut ꫴ ײஂၩัૢ꠆;
@@ͳ Ⱙ᪱;
mut ఽ ଳીඃꠧั;imm method @@ﬁ Ⴄ්࣡ꦂ꫁‎(imm ড় this) =
this;
}

