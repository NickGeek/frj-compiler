main = "";

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

capability class ￂ়  {
@@ᜯᩝ ﻣଁ꯵᮷ൣᬀ⵿;
@Ⴧ഻ࠣ⃜ ঋ಼⵿꠆ਁ႓꧖;imm method imm ռ ᲅ() =
mut অ ﬣ = ᲃ,
head("঍").玲 = 0.375 ;

imm method @@@@Ꞌ ؽ() =
tail(@യ‪ Å᠋ = 3.0 ,
head(tail(@@@ꧾ ߺ១ꠂ = ଽܑ,
1 )));
}

class ꚹ් implements ຊၟ꫶, ꜝ, ᯜ  {
imm method @ꗉ ㅛ(mut ￠ ဦ) =
"\uuFAf5𐢟";
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ꬉ  {
imm ຫ ஜ಼­꙯;capsule method @@@סּ߳⃡ ॱ(read ⴭෑׇ᪷ ꘙྒ, imm ꦍᬄୃ স, @ΐꫬ ᢄ) =
this;

imm method @@ꠉ༹ Ῠ() =
@[""; new ⳳꨱﬞࣦ᳒("\r︀")];
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ۮ⁤⁨ extends Ὴ, キၴᢩࠧ  {
read method @@@ꜩᯧ ਖ਼ꥊৗࠩ(mut ቘꥏྯ꠆᷾ࠟ ㄓൊ);
}

interface Int extends Number, Literal  {

}

class ຽ໋ implements ꪹ, ߵ‬ᭂ, ꘫ, ઽꯩ  {
@@Ὕ ૹࠠׄᝳ;
}

interface Float extends Number, Literal  {

}

interface ﵳ⁩ꠥ  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

capability class ড় implements ﻺ, ℤ៨  {
@@ৼᩩ 〦;
mut ꫴ ײஂၩัૢ꠆;
@@ͳ Ⱙ᪱;
mut ఽ ଳીඃꠧั;imm method @@ﬁ Ⴄ්࣡ꦂ꫁‎() =
this;
}

