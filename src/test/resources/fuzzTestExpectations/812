main = @ႁ ப = head(ꦜ⳱),
this;

class ௐ implements ꧣ྆ۢ, ꠍૣ  {
capsule method @@ࡊᰦ ᜑ(capsule ௐ this) =
459 ;

imm method @@ৎᮁׇࠚೆ ᨆֿ(imm ௐ this) =
"⻴\u2106";

capsule method read ৳଼ ㇹั(capsule ௐ this, mut ㄠ꫁ᝓ༾ ꡜੵꤧ, imm ၓೖ ꫢ಼᳑) =
tail("");

imm method @ꬨ ﵟ(imm ௐ this, @ー ㇲᩕ꛱) =
@[@[]; @@@ℕ ཕํ = @[],
tail("\uuu81Feꢀ")];
}

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ඊ extends ۮ  {
capsule method @@@@ՙ ഐꠂৢৗ⃡(capsule ඊ this);
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

