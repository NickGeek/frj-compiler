main = @[];

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

capability class ࢷ৫ᜳ  {
@@ஃꢀ ａ;
imm ኋ ਆ;
@@@ⵯৣ᳥ ꘪᳲ;imm method @@Ά༙ ਹﬞࠩ() =
88.0 ;

imm method @ዧ ᬏֿ(mut ᬪ ᴗ۴ೀ, imm Ω ঐᰲ܏૾, @Ᾱ উၣ᳕, @@ᦏ ᨍঃ, mut ꣻؙೢৈ ꜞ༹༵ᢩัୣ᱑) =
new ࢽ︤("");

imm method @@@ⶢ ΰ(mut ⁔ ળ, imm ⁀ ㄍ, @ႎ 略ி꤇) =
head("𑙠");

mut method @@ઽଃ ኵ() =
@[].@ऩ(this, this);

imm method imm ۄۨേൢ୍ ߺූꦵ(@@Ά ˬ) =
@ꮖ ꣻ૿ = this,
imm է ຊ = this,
94.0 .@ੜ᳸(this, this.ຝ = head(7.31E32 ), new 〢("", head(head(@[@@@@@@ମ؜ ૱ = 0.0 ,
0.2 ; @[].@ૹ︠(this, 5.0E30 , ࠤꤦ, @[tail(@[]); tail("ࢶ𞹐")], ﾗ)]))), tail(head(head(head(ଉ)).Ͳ়꠆ேࠫ܏(this, @[]))), @[7 ; @[]], 41 .@ວ(this));
}

interface Int extends Number, Literal  {

}

