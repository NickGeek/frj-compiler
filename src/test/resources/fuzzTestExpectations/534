main = ಏ᭘⁦;

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

class ဿ implements ޱꪰၨ, ꠅ  {
read Ǉ༙ ꩄ᷃;read method @ῐ ៗೢৗ‪(read ဿ this, @ᚿ ℂੵ꩖, mut הּ ףּ, read ꭼॣꪴ ዂ, imm ຽိᢩ ꥮ, imm ⵂ໕ꪴᷙෲ ꧤ) =
tail(new ਪ().ꤢ);

capsule method @ວ ᱍ(capsule ဿ this, imm ꣽ ò᪘, @ᤏ౦ౢྒྷ સ) =
@[].ૠྟྡ؂഻(this, ܯ۱ܱۡ).ˡ = new Ά(0 , this, @ៗ ဖ౬ = @[2538.0 ; ၐ],
219 );
}

interface ۿ extends ᢛੑ, ꠔூ᭓܏ࠛ, ಎ  {
read method @@Ωཽ᭗ ⷊ(read ۿ this, @ൠ ഽ꩒҃);

imm method @ᢽ︅ ꟼ(imm ۿ this, @ச ୡླྀ﻿);

imm method imm ⁀ ઽ(imm ۿ this);
}

