main = ಏ᭘⁦;

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

class ဿ implements ޱꪰၨ, ꠅ  {
read Ǉ༙ ꩄ᷃;read method @ῐ ៗೢৗ‪(@ᚿ ℂੵ꩖, mut הּ ףּ, read ꭼॣꪴ ዂ, imm ຽိᢩ ꥮ, imm ⵂ໕ꪴᷙෲ ꧤ) =
tail(new ਪ().ꤢ);

capsule method @ວ ᱍ(imm ꣽ ò᪘, @ᤏ౦ౢྒྷ સ) =
@[].ૠྟྡ؂഻(this, ܯ۱ܱۡ).ˡ = new Ά(0 , this, @ៗ ဖ౬ = @[2538.0 ; ၐ],
219 );
}

interface ۿ extends ᢛੑ, ꠔூ᭓܏ࠛ, ಎ  {
read method @@Ωཽ᭗ ⷊ(@ൠ ഽ꩒҃);

imm method @ᢽ︅ ꟼ(@ச ୡླྀ﻿);

imm method imm ⁀ ઽ();
}

