main = 8657 ;

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Ὑ៝ extends ၥ‍, ꤶ۲, ਐ  {

}

class ｔꢁۧ implements ዓੁ, ὕ૨, ຢׇꫵ  {
imm method read ℑﬞ꛱ ꧢॕ꦳ؙ⳱꙯() =
tail(@[head(imm ꫴૈ꫁ ᝠ᳭๗ = new ᢃ(@@Ω ｲॕ = @[],
0.0 , @[]),
head(@@@ൖ ௐ = "",
8.0 )); @[tail(@ၝ꫶᪂ அ = @@@@ꫀֿ Ꮤ = head(ⱅ.@ቻ(this, 72.25 , @[1.1520083343244394E-243 ; new ￗᬾ()])),
@["𑊟"; 2.0008951093219984E-16 ],
this).ౠ; 3.84690557026304E14 ]]);

imm method mut ᱹ ই() =
this;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ￦⁯゙  {
imm method @︴ಁ ɜᩝ(capsule ご‪ั᳠ ⳅ) =
@[];

imm method read ኴ‭ ຈ() =
8.882843134248342E28 .ꢎ = new ㄇ྇ྷ़ᜏෞ(this, 0.022 );

imm method @@ሢ౧ຼ꣧ೕ ᳯ⃜(imm ⅼ Ϳ፞) =
new ￇᩝ();
}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ⷚ extends ⷂ  {

}

interface ProducerN  {
imm method imm Number get();
}

interface ఞᰧࠧৣ꫁ಾ  {

}

