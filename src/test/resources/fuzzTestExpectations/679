main = this;

capability class ˋᝲ５  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ຍ႕ૅ implements ߺ, ଲ, ਬ  {
imm method @@Ḻ᧔௪꣡ꢼ ꬥ꧰ⷧೋ(@@ดྸ᷻ າ゙ۗ, @@@@ࢦ߅ ⴭ꤄, imm ঽ Ⱆ) =
7 ;

imm method imm ᡥ ᥰ༵؃͡(@@ￅ ₖ) =
2971264.0 ;

imm method imm ⴭ ι(@@ໄ؜〬 ၰິ꘣) =
head(400000.0 );

imm method capsule ꧦ੭ ᛴۛെꪰꯦࠩᢅ᮪(imm ⁔௩ ஷ്) =
ᦪ꙯;

imm method @ឈꠧௗ ໞ꠆〬ೕ࡚ඃࠧீ(capsule ᑞ ꥧ) =
"઺".Ὓೕ = 5.0 ;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ඡྖ᳴ implements ቓᮤ꯲  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface ଋᩚ extends ݴ, ⶤׇ, Ⴧ᭗ീੑ, ওᩨ, అ  {
imm method @@ಙ ஃ(@@@￡ᤴᰫંஂ᥇￺᳴ ꠈ);

imm method @@@@ባౄ ᮮ᠎();

read method capsule ˈை؜ ⶦ(imm ₑ ຳᯬ៝, @ꩺ゚ꨶ ＿);

imm method imm ￃ ⷈ(@ಆ ᰆ᳠াූ, @ࠂ ℂ);

imm method imm ௹ ଉ(@ఐ꧓ؒಿ⁣ ℇ﻿);

imm method imm ᜏ ຫ۶();

imm method @@ૐ ﻫ();

read method read ஷ ൎ(mut ℰৌౖ᷾ ৼັ์);

imm method imm ℶ ߺ(@ⵯ ೞ);

mut method imm ಳ ਗ਼(read ᱹ ག, @ಽ഼ׂ ၺ);

imm method imm ୡಂਁ 〲⁯ꩃᝒ();

imm method @ൕ ඊᬄ(@@@ೠᮂે ͻ);

imm method @ၮ᳭ ꨈ້᱀();
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface ড়᠑１ extends ୡ  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface ჶ  {

}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

