main = head("\n");

class ⷀׅ implements ၕ  {
capsule method read ﶪ⃔ۙ Ｃొ() =
@[];
}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

capability class ℇ  {

}

interface ⸯ଼ extends ᛳ, ⴧꠋ, ₷  {
read method mut ゟ꤬ୁ࠘ᬁ꤄ ꫂ(@இ ୟ);

imm method imm ၐ ະ᳒ޮ(@@@〨᮶ ງ, @ℝ ᏻ);

imm method @ষ ꠊ(@ၡ ﹍);

imm method @@ହੂ ಀ꧕੍(@ࠨ ꪵ, @ഐꙻᬄ꤭ Ὓૌ༷ౣஂ, imm ఽ ༀ, @@ಏ ⶮ, @ꟻࣞ ஃ, @ꥠଂ Ꞵⶦ꣄ֿۙ꯲, @ਫ਼྆ ⁿ꣮);

read method imm Ἢ לּ();
}

capability class ꤣ⵿ implements ࢦ  {
@@@ಀ൬ ˮ;
@@@Ᾱ Ά્;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

class ﬗ༷೩ꦀ implements ῃ, ᠹ꙯ॢ, ῇး, ᇩஂ゙ﬞꪴ۪ꪸ᭳, ఒ, ౚੑ෫၀໊꧑  {

}

interface ਸౣ extends ௹྇۰ؐ᱖൫ᤠ  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

capability class ঘׅ  {

}

interface Int extends Number, Literal  {

}

interface ວာ᥎ extends ￄ〫ௗ٥, Ϳ  {

}

interface Float extends Number, Literal  {

}

class ೲ  {
imm ଯ ౚ;
}

capability class ᧁੱ implements ഐ, ഉ, ꭟ  {
@@ୡ ࠚ࠭;
@@@ⵯꨪ꯭︦ ꧏ;
capsule ᄋ⁣ꦃ᪘৪ୁ ഢᳲ;
imm Ⳬ೩ ૱;
}

interface Number extends Literal  {

}

class ˮꩃ  {
imm method imm 㳉ৣ Ɫ(imm ଡ ײ) =
@[@[51.5 ; 0.6 ]; @[]];
}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

interface ٯৌ extends 嗃  {

}

class מּ  {
imm method mut Άั꩒ֿ า() =
new ಠ᧘꣕ௗ();

mut method imm ࠚ ྋ() =
this;
}

