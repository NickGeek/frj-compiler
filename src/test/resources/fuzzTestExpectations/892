main = head("\n");

class ⷀׅ implements ၕ  {
capsule method read ﶪ⃔ۙ Ｃొ(capsule ⷀׅ this) =
@[];
}

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

capability class ℇ  {

}

interface ⸯ଼ extends ᛳ, ⴧꠋ, ₷  {
read method mut ゟ꤬ୁ࠘ᬁ꤄ ꫂ(read ⸯ଼ this, @இ ୟ);

imm method imm ၐ ະ᳒ޮ(imm ⸯ଼ this, @@@〨᮶ ງ, @ℝ ᏻ);

imm method @ষ ꠊ(imm ⸯ଼ this, @ၡ ﹍);

imm method @@ହੂ ಀ꧕੍(imm ⸯ଼ this, @ࠨ ꪵ, @ഐꙻᬄ꤭ Ὓૌ༷ౣஂ, imm ఽ ༀ, @@ಏ ⶮ, @ꟻࣞ ஃ, @ꥠଂ Ꞵⶦ꣄ֿۙ꯲, @ਫ਼྆ ⁿ꣮);

read method imm Ἢ לּ(read ⸯ଼ this);
}

capability class ꤣ⵿ implements ࢦ  {
@@@ಀ൬ ˮ;
@@@Ᾱ Ά્;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

class ﬗ༷೩ꦀ implements ῃ, ᠹ꙯ॢ, ῇး, ᇩஂ゙ﬞꪴ۪ꪸ᭳, ఒ, ౚੑ෫၀໊꧑  {

}

interface ਸౣ extends ௹྇۰ؐ᱖൫ᤠ  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

capability class ঘׅ  {

}

interface Int extends Number, Literal  {

}

interface ວာ᥎ extends ￄ〫ௗ٥, Ϳ  {

}

interface Float extends Number, Literal  {

}

class ೲ  {
imm ଯ ౚ;
}

capability class ᧁੱ implements ഐ, ഉ, ꭟ  {
@@ୡ ࠚ࠭;
@@@ⵯꨪ꯭︦ ꧏ;
capsule ᄋ⁣ꦃ᪘৪ୁ ഢᳲ;
imm Ⳬ೩ ૱;
}

interface Number extends Literal  {

}

class ˮꩃ  {
imm method imm 㳉ৣ Ɫ(imm ˮꩃ this, imm ଡ ײ) =
@[@[51.5 ; 0.6 ]; @[]];
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface ٯৌ extends 嗃  {

}

class מּ  {
imm method mut Άั꩒ֿ า(imm מּ this) =
new ಠ᧘꣕ௗ();

mut method imm ࠚ ྋ(mut מּ this) =
this;
}

