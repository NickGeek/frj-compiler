main = "\'";

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ·ú¨‡¥Ç·§πÍ©ò·†ï implements ﬁ±  {
imm Ô¨∏‡ßÉ ‚Çõ‡≠Ñ‡≠Ñ‚Å±·†å;
mut Í≠¢‡∫∂‡≥®‡≥ç ·Ωã;
@@@‚Ñõ‡´´ ◊∞;
imm ·Ω´‚Ä≠ œ†‡®º;
mut Í£µ÷ø Ôø¶·†ç;
imm ‡Æú ‡™∞‡¨ºÍô¥;
@@@Í≠§ ·èª·Ø≥;
}

interface ﬂô·†î‡µÅ extends ‡∑Å  {

}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

class ‡∫∞ implements Íì´Í¢∏, ·æÆ, ‡¨è  {
@@@·¢Ä·∑û ·®é;imm method capsule ‡ΩÜ‡∑õ ‡≤ÖÍ¶Å() =
tail(new ‡¢Ω‡±Ü(tail(@[tail(this); "".‡©û]), 15.0 , new ‡¥é‡±Ü‚Ä≠(@[], "êÄß‚Çè")));
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

