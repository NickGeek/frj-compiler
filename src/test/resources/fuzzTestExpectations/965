main = @[imm ೲ ￃ᭑݁ = @[tail(@Ⴧ ꟸ = "",
Ꭓ); 194 ],
new ꧠ߳(@[new ೠၘׇ᩶ේ꣤(7.0 , mut Ͷᯧᳳ᳝േ༘ൗ២୩ ጓ៝꙯ = @[],
Ⴧᝒ, tail(@[])); new ᤙ(ፃ).@ៗ(this, 0 , ℿ, @@അਃ า = ຄ,
0.56 , this)], @ৼׇﬞ าꦶꠂ = mut ถ ⅶ = "\0",
new ﬗ⁧("", 0.0 ),
ঐેꯣ, imm ფऻੑᜓ༹ු᥎꛰ ꫲ⳱ేౢ᱙ = capsule ർு ⷝ = 5632.0 ,
ዙ,
head(0.087 )); @ˬ _ = tail(@[2 ; 839 ]),
23970.0 ].@ῐ‭(this);

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

interface ᥗ᳸  {
imm method imm ꫩ ﬂ(imm ᥗ᳸ this);
}

capability class ΰ  {
imm Ｃᩢ එ᮶꛱ె़;
}

capability class ＄  {
capsule method @ͽ ℂ(capsule ＄ this) =
8 .ݽ(this);

imm method capsule ၦ ꣳ(imm ＄ this) =
tail(0 );

read method @ഽၪ ኣ(read ＄ this, @@ൕ ஃ) =
this.ਜ਼꛰৮ׁ᱐꯬ = tail(head(5 ));
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ᾯ⃡ાଂ⁮꙯ implements וેྫꚟ, מּꪰ꫁ੑ٩้４  {

}

class Ⅲꠋଁ  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Ό  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

class ॠࣴ  {

}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

