main = head(imm x‚Éô ‡™ä = head(0 ),
5.994140625 );

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

capability class Ô∏¥Í¢Ä implements ·öí·™ô, ‡∫Å, ·Ωâ  {
imm method capsule À¨Í™æÍ§ß €•(imm ’ª „ÖÇ, @J·∑æ Ô¨ì·™ô, read Ô¨ñ _‡≠¢, @@ÍåÖ ‡∫ú‚∑≤‡∑ü‡∑©) =
new Ô¨•(@@‚∞µ ·õ∞ = imm ‡®µ ·Å° = tail(Íß£‡ªã),
tail(0 ),
tail(@[this; @[]]).Í¨°‡µÅ, imm ·öä·©ø ‡¶≤ = @[],
new ‡∞ô‡∑≤(„Ä©Íß¥.‡Æû(this, new ’â(Í©Ç‡∑™, new ‚Ö©Í†ã·Å®(tail(Ô¨æ‡†´)), 2.19043332096E11 , 6 ).·ä¥ = head(new Á≥º‡©©‡µó‡¶ºÍ•ã("û∫Ä")))).Í¨•(this, head(650 ).@‡¢∑·≠≥(this)).ŒÜ·≥í = 0.0 ).„Ü™(this);
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

