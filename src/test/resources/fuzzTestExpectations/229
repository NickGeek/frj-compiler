main = head(imm x‚Éô ‡™ä = head(0 ),
5.994140625 );

interface Float extends Number, Literal  {

}

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class Ô∏¥Í¢Ä implements ·öí·™ô, ‡∫Å, ·Ωâ  {
imm method capsule À¨Í™æÍ§ß €•(imm Ô∏¥Í¢Ä this, imm ’ª „ÖÇ, @J·∑æ Ô¨ì·™ô, read Ô¨ñ _‡≠¢, @@ÍåÖ ‡∫ú‚∑≤‡∑ü‡∑©) =
new Ô¨•(@@‚∞µ ·õ∞ = imm ‡®µ ·Å° = tail(Íß£‡ªã),
tail(0 ),
tail(@[this; @[]]).Í¨°‡µÅ, imm ·öä·©ø ‡¶≤ = @[],
new ‡∞ô‡∑≤(„Ä©Íß¥.‡Æû(this, new ’â(Í©Ç‡∑™, new ‚Ö©Í†ã·Å®(tail(Ô¨æ‡†´)), 2.19043332096E11 , 6 ).·ä¥ = head(new Á≥º‡©©‡µó‡¶ºÍ•ã("û∫Ä")))).Í¨•(this, head(650 ).@‡¢∑·≠≥(this)).ŒÜ·≥í = 0.0 ).„Ü™(this);
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

