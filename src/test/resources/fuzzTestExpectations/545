main = head(new ౡඃ(@[@[].@ꫩ(this, head("൤𑅐\\".@ࢭౢၴ(this)), @ꋶ᜔ૅꠋﬞಂ ꧡ = @[].ꬫ༿༷,
@ස ͽ᜔ꚞᳲ്์ = this,
head(@[2 ; @ཇ ヿ = head(ࡨۘ),
head(tail(@[]))])).ၯ(this, "", ""); mut ໄ๖ৄ҃ ຽ = 40.0 ,
mut ͳ ﯴ૨ = new ℝၲ‬(),
head(new Ꙥ()).@ଆ⵿ꙴ(this)].ꘗ = head(@[head(imm ｊᢩ੨ஂꚟꙻ๕ଂ ၮൗ‪ = "⁰଱\uu8f1F﹔",
tail(@[].@ῒ(this))); new Άꩽ()]), "\t\uuuu3C84", 0 , བྷ));

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class ꤓ۪  {
imm method mut ไ ૹ(imm ꤓ۪ this) =
2 ;
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

capability class ਕ implements ᜈ‮߈, ꥨ  {
@@@ꧏ ۮ⵿୭꯬๔﻿;
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

