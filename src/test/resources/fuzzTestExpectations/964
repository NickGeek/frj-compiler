main = 7.464012558583961E-25 ;

interface Float extends Number, Literal  {

}

class ୱ  {
imm ⁔ᮧ ມ;imm method @@@ૠಃ᪁ꦼ Ḡ(@ٮ࠙︎ ᙿ, @ۿꠦ༨३ྕ ຊ) =
39830 ;

imm method @@@ྉ ᨬꯧꙷ︋᳷ᝒ() =
@ℙ Ὸ಼ꚟؗಿ = new ꨒ⁨ൈ(head(this).ᢪ, 36.304 , "", @[], @[this; tail(@@@ऽ ꪱႌ = @ළ ㄳ = new ꩺૼ(),
new ㅮ︂(tail(ﷸ২)),
@[])], @[], "𝟌\166"),
1376.0 ;

imm method imm ￗ ﹎৪(@ῇ ಇ) =
"";

mut method mut ꣲꩍ ຣ፞() =
this;

capsule method @@ᜑٰ ˢୈ؜૽᤻(@ὥ ꚹ, imm ஊ〭 ਫ਼) =
tail(@[15.36328125 ; mut ᜰ૬ ꬢ = 1 ,
head(this)]);
}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

