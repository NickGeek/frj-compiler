main = ﭫၣ꧑ਿ⵿ੈ;

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface ൡ᜔ූ  {

}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

class ꪼ implements ꠝ, ၦ, ဿ୧２, ౙ, ઽﬞ, ቊ؅, ճ  {
@ⴱಁ઼۱ ˣᤣ;read method imm ᚚ᭐⳰ ⳳ(@@ꬥ੍ ﻳ, @ᣨ़ؘ༹⃡྇ꩼ ࠈ) =
ᦇ.@ⁱ(this);

imm method imm Û൦ ৡേ(mut ㇱ ꪽ, capsule ஏ೪ ॹႊ़ꠥ) =
@[];

mut method imm ﵞ1 ⷘၢ೮(capsule ਢ꧗ ە) =
90.0 ;

imm method mut চꪰା݅ ຍ(@וּ ૠີ) =
tail(ₓ￻〭);

imm method @@@@ၚீ ⅎ(@ᜈ̍ য়, mut એ ꩁ, imm ኴ഼ Ꜷై᳭) =
this;
}

interface Int extends Number, Literal  {

}

