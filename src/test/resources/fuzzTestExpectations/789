main = @[1 ; @[]];

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

capability class ঢ়᭯ᮡ  {
mut method capsule ຜ ঽୗ() =
@["𑊈𑍐"; @[]].@Ὕ્ொ(this, @[head(tail(@[tail(@[this.@ꜙ(this, tail(imm ⶡ µ = tail(new ฝ()),
tail(@[])).ਹ⁡ృ꫁(this)); @ۿั ꠸ = head(new ꞡ(head(head(@[])), new µ६ᝓંू().ￔ꫁(this, new ຄ(ൿ७꯭്︣, @@@Ꮉ ۿ = head(capsule ᙸั꛰؜ લ = this.ߺ꤉꛰ = 0 .﹎ꠦ = 3 ,
@ⴇ ꪙͩ = 161.0 ,
@[]),
new ᥳꢁ᭮(), this.@ꫴ­(this), head(imm Ⅳ૮ꨬ ꫢᢆిᮑ = new ᳶ(),
@[]))), new ⰱ॔(tail(0 )), 43 , 14 )),
this]); ள؅])); 1.2898511802149966E94 ]).ⶮ;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

