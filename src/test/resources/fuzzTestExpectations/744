main = new ੲ꙯១(head(@[mut ₚꩽ ﷇ = @[tail("﹧\uuudEc6").@ໟ༾(this, new ꬓ᪐()).ग़(this); @[]],
head(new నׇ᳙()); ""].ळ഻), "");

interface ℰ  {
capsule method imm แෝܾ ㆸ(read Ͷꯥ ⴭ, @ਸ〯 ৠऻ༷);

imm method capsule פּ᭒ ఽ();

imm method mut ᝡ­ᮦ ˮ();
}

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

interface ヾ  {
imm method @@ꓮꠂ꛰๗ ၝื(imm লꢁꩍ ৻༥, imm Hா ꘑ);

imm method imm ๆ Έ();

imm method imm ㇻ ᎍ(imm ﹴஂ أ, @@@ຢ ຯͥ᮷, imm ୱ ꡕ);

capsule method imm ἤ ឮ᮱ᜳꦵ­ꠂᷭ۰᪽();
}

