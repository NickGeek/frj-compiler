main = read લ᳭ ౠ = 4.3686639050223575E-14 ,
new ऩ(2.342525203531497E-147 , imm ꥧৣ ᱽ = ආ႒꛱࠭ᜳੵٰ,
@@@ὗ q = head(new ꬑ()),
head(ꧣ.@ύ(this, @[])), @[].ߴ(this), tail(tail(tail(ၕ))).ᥲ؄ো = head("").@︳⃚ᩖ⃡២(this, 0 ), @[], new ೡைֿ⳯⳱ۢ᱗ၣᬻ(ၸ));

interface ꬅັ܏ extends ᢃ  {
read method @ᳩ ꩺᨛෳ(@@ꫛு ᳯ);

imm method imm ḣ᳭꫁ ꬣ();

imm method mut ಶ Ꚗ();

imm method @@@@@ৱ ᳩ᠕᭒(imm ⶨ ๅ, imm ධꪲૼ ଇ០);

read method @@@@ꫂྎ 〺(@@@@@૱ ꡄ);

imm method @ᮔ ꮛ(imm Ꙃ‍ꠣꙵ ຫ);

imm method @@௹ೢ ℿ(@ঔ‪︉ૢ꪿⁠ंୢ տ);
}

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

