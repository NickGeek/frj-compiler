main = this;

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class ꣻ८ implements ᳫ  {
imm 金਼᳡ ઽꩽ;imm method imm ଏྐᜒ ࠚਾ() =
head(imm 喇 ኹ = @[head(6 ); ""],
@[tail(head(@@ᱚ ꬮ = @[12 ; head(new ব꘣(5 , @[], "\uuBCa1", this, @[], new ካౌං(), ಎ, new ℕ⃒(), head(head(this.全ූ꛰(this, 0.0 , @[])))))],
1 .@µ᭔഼៝(this, ꣳึ, @[1.2149104264978924E122 ; this], 584930 ))); @[tail(ܔ.$਼ᜒྒᰨ = tail(ῂꠤ꣡)); @ꦌ ඹௗ = imm ℤ ໆ = head(tail("\n")).ༀ,
5.6 ,
য]].ꬤ(this, @@ﬕ ࡦ = 1.158567428096E12 ,
ꪙ)).ૡ１ꫵ꤅ = @[].ᳱੰൣ᱄;
}

capability class ସ  {

}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

