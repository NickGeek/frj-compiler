main = capsule ە ᜇೋ્ = head(@[]),
this;

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method mut Std print(mut Std this, imm String msg) =
this;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();

read method imm String concat(read Std this, imm String a, imm String b) =
a;
}

interface ꤢ extends ﹩ോ  {
imm method capsule ꩶ ℤ(imm ꤢ this, @ح­ ഥ);

imm method read ꣽྎ ஃᤶོ༿꫶(imm ꤢ this, @ꭟ ᳱ);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ଫ implements Ⴧિ, ﭱෲ, ஔᝲ  {
imm ᰢֶ༷ ￏ;imm method @@@ጬေ উꚟ᠑(imm ଫ this, @@@ꪶ ᜎᝳ) =
this;

imm method @@ઈ ՙ(imm ଫ this, imm ⴭ࿆ׄ ℋᰯ﻿, imm ᦸ꯶ۚ ꪱ, imm ೞ෭ ۯ) =
new ശ้();

imm method @ಫ ヾ(imm ଫ this, @ￌ ꜗ, @ⷙ क़) =
@[];
}

interface Ⴭ extends ꟷ  {
capsule method @@@@@@@@ꫣ ल﻿᷏ྐ(capsule Ⴭ this, @@ቊᬂָׂ ῖ);

imm method @ퟯ ຕැ༷(imm Ⴭ this, capsule ᢪ 〇߳);
}

interface Int extends Number, Literal  {

}

interface ௐ extends ⴻ, ᥲ౭ؐ  {

}

interface Float extends Number, Literal  {

}

capability class ﶟ৫ implements ꫛ  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

