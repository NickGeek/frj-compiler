main = 0 ;

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class ல­  {

}

interface ൡ় extends け, ꧏੵ  {

}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

capability class ۿ implements ℝ᳴  {
@‿ၲ ኴೆ;
mut 々۪ ᝯﬞ༧;
capsule ٯ ⴧ;
imm µූྎె໐ௗ ஶ৪፝;
imm ꠅ ﬤ;
imm ӕꪰ ᬢ߁;imm method imm ﬄ ݳ(imm ۿ this) =
tail(షᭀั);

imm method @@@@@ਸ਼༙ ૱ઁිꨯꫫ꫁ᜒ(imm ۿ this, @ᨰ ₣, imm µ็ॎ ౡ਼᷾, imm ଐ⁨ ヿ, mut ঋ ག්ୢꢁ, imm ᛯઁႎ Ί, @ዀൊᝳ ᳱ౫ၢ) =
@["﵀𐒞଱𐣴𝑖\uuu9913"; 0 ];
}

