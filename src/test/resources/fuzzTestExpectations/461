main = 12 ;

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ভ extends ꩥ꩒্꫁  {
read method @ৎ হૼ(read ভ this, imm ᮮઃൗ ஃ, @բᷪ ຄົࠧ୨ઁොॢ๓੨ುׁ, @@@@@@@ၡ⃡ ਸ, @@ꥻ Ῐ);

mut method imm ὓ É(mut ভ this);
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

class Ⴌू implements ￅ, ᢸ, ಈᤥ꯵, יִࠦ᳛, ᎃ  {
imm ⅳ ￆ;imm method @ήၤ ౙ᤻(imm Ⴌू this) =
7168.0 .@〹(this, 284 , head(@["\77".ⴧ(this); @[8.25 ; tail(new ഽۭ(@[])).ᭉꚞꯧ = @[].რ = tail(2 )]]), this);

mut method imm ಶೖ᩠ ꫨ(mut Ⴌू this) =
this;

imm method @@@@@ٯੌꨯോ༩ ᣏ(imm Ⴌू this, @ꠅ‫۹ װၨ) =
0 ;
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

