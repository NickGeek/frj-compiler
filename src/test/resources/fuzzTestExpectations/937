main = tail(this);

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface ࠚေ় extends ꧾ, ຽ  {

}

class ቋٰ௪༵ୄோ implements ᥭ᯦ׇૢ, Ὕ  {

}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

class ꩉ implements ⵊꨲ, ຯ  {
imm Ͳ᥋ ヿ८᤹߃;
@@ᮉୢ ןᤰ;
@@@ℂ ఱ;
}

class অ꯭  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

capability class ഏ  {
imm method imm ලᩨົ ⅸ() =
ˊ.潅 = this;
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

capability class ⅅេ  {
imm Ὓঃ ꩣ;
imm ꩺ ર;
imm ᥲ៧༿୯ Ð;imm method @ዃে ૱(@@Ѫ᯲ࠪ Ν൯ᨚ, @ຕ ഌ゚, imm ꩁ খ਼ꠋ) =
@Ⴭ Û = @[@[]; imm ঢ় ଅഐ = head(@[]),
"🩻"],
@[head(new ౠ﻿(this, @[])); new ફ᷿()];

imm method read ὓ ࠚ(imm ｴᩰৡ ͺિ, @ᬟ Eಿܱ, @@ⸯੵ ៗ්) =
@[];
}

interface ProducerN  {
imm method imm Number get();
}

class ഖ꯭ᩲ  {
@@@ⶵ ࠨ;
@@@Ὺ k;
@ࠨ⃨ ꪹ;
}

interface ۿ࠭ဲ extends ไᨛ  {

}

capability class ‿ implements ﳅ  {
capsule method imm ⷓꩃᨚ ੳ() =
0.0 .வࣖ(this);
}

