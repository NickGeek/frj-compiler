main = tail(this);

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

interface ࠚေ় extends ꧾ, ຽ  {

}

class ቋٰ௪༵ୄோ implements ᥭ᯦ׇૢ, Ὕ  {

}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

class ꩉ implements ⵊꨲ, ຯ  {
imm Ͳ᥋ ヿ८᤹߃;
@@ᮉୢ ןᤰ;
@@@ℂ ఱ;
}

class অ꯭  {

}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

capability class ഏ  {
imm method imm ලᩨົ ⅸ(imm ഏ this) =
ˊ.潅 = this;
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

capability class ⅅេ  {
imm Ὓঃ ꩣ;
imm ꩺ ર;
imm ᥲ៧༿୯ Ð;imm method @ዃে ૱(imm ⅅេ this, @@Ѫ᯲ࠪ Ν൯ᨚ, @ຕ ഌ゚, imm ꩁ খ਼ꠋ) =
@Ⴭ Û = @[@[]; imm ঢ় ଅഐ = head(@[]),
"🩻"],
@[head(new ౠ﻿(this, @[])); new ફ᷿()];

imm method read ὓ ࠚ(imm ⅅេ this, imm ｴᩰৡ ͺિ, @ᬟ Eಿܱ, @@ⸯੵ ៗ්) =
@[];
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

class ഖ꯭ᩲ  {
@@@ⶵ ࠨ;
@@@Ὺ k;
@ࠨ⃨ ꪹ;
}

interface ۿ࠭ဲ extends ไᨛ  {

}

capability class ‿ implements ﳅ  {
capsule method imm ⷓꩃᨚ ੳ(capsule ‿ this) =
0.0 .வࣖ(this);
}

