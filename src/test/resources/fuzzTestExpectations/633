main = 0.0 ;

interface ऽৈ­  {
mut method @@@@ᰡ Ⴧ਼();

read method imm Ά ꪉᝒ᯦(imm ꣻౖ᪰⃑༾ັ ᯔ්ܶ);
}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface ℂ extends ໆ  {
read method @ங ๅ(capsule ೱ ၔ);
}

interface ຊ︊ extends ໆຸ, ஐ, ⶍ્৫, 〆ᨛ, ឌ, ૱, ঌ੯  {
mut method @﹩ ௐ();

imm method @ჶຼ⃰᪐ ಗ();
}

interface ꪱೢᝲ extends ₜၫᨛ઼, 〳᥌᷌ꫯ  {

}

interface ￄ extends ਗ਼ૼ  {

}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

class ˮ implements ວ, ᳪ  {
@@@@@ࡆ ￦᪓;
capsule ꓵ ࠤ;imm method imm ꬣ഼ ꪢ໘() =
head(tail(60.3 ));

imm method imm יִ࿆᮹᥏ ꚙෳꪰ() =
ꪝૼᜲ꛱;
}

capability class ᱎ႓ࠧ implements ॴ꛱  {
imm method capsule ୱ ﶶ() =
head(tail(@@ℕ ㅕ = @[],
302 ));

imm method @ױ ୱꫯെ(@ꮅ ၡ, @Ṋ Ήᰫ) =
0.9375 ;

imm method imm ਸ ஏ᪑ే(imm લ Ω, @@ຍ ன૮) =
imm ⶦ ௹ = @[],
@[tail(head(ꤞ)); "𑴻\uCBB4"];

read method @ಹ ﹍ા༵() =
head(Ἐ྆᪼);
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

capability class ㄕ၈  {
@ዔ ｇꩃ;
@@ຍ꧙ ச;imm method capsule ఽֿூ௪ Ꭽ() =
"\70\51\uuuu3eC0🄐\r\135𑵪";
}

class ᱹꨯ᷼ႋ implements ꬢᩖᨛ  {
capsule method imm ꫛ ꜗ(@@@@ꩪ ꦕຼం, @@ー ౡꚟண, @֏᪃ᩬ ￥੍᭑꩘ၙ￹ꦃऻ) =
tail(@[]);

read method imm ℇၧ ࡪ() =
@[];

imm method @@ꩨᢩ ऽ(@ⵋ ୠ) =
@[1 ; @[]];
}

interface Literal  {
imm method imm String toString();
}

capability class ޱඃ᳙ implements ퟵ꤫꙯  {
imm ꧏ Ε;imm method @@@ಋ ퟅංꩌୋ(@@充ׇ９ චೆ, @@ⵯ ⷞꪲ) =
1 ;

read method @ౡ᭑ ၑ() =
0 ;

imm method @ف ቌ() =
tail(head(new ﾚ(tail(this), @Ὅ྆᪔్ ᏺ꤅ૣ = እ,
this, head(384 ), tail(tail(3 )), ክ᱆ॣಂ, 0.0 , ゥꩃ꠆￻꯲ఴ, "\'𑃺቗ᝮ", this.ၦୖ = 六ﾻ, @[], @[], 0 )));
}

capability class ໆീ implements ℇ, బ, ℨ༩  {

}

interface ProducerN  {
imm method imm Number get();
}

