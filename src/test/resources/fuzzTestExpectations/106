main = ミၞਁ;

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

interface ＄ extends ꯟ, 〣  {

}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ಎၨ၈ົ੍҆ꫵ implements Ᾱૢ, טּ᳕, º  {
capsule ऽ 々‎;
imm ட ⲻ;
imm ꫀ ᰐޭ߳⃡;
@@ൖ ﮇ;
@@@ㆬꠂ ஃ;
@@@ಽ￹ാ ꮔᯫ;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ૹೣ  {
imm method mut ৰ ᥜ­(imm ૹೣ this, @ﹲꩼ⁡ Ὕ༹) =
new ଽ(@[]);
}

interface ֆ᭲  {
imm method @@Ⴧ ᚻᰳீ଼ୢ２಼ັ(imm ֆ᭲ this);

imm method imm ₹ꩃꢀᜳ ᧈ᠎(imm ֆ᭲ this);
}

interface Int extends Number, Literal  {

}

capability class ૐ  {
@@@@@Ӡ⃙ꠣٰꚟॆ᯲᳴ ᭆ;imm method imm ꩡ ᵑ༹ᷔ꩓(imm ૐ this, imm ৎ ꫀ, @@ᮘ ઽ, imm ખௌ ቍ, @ㆵ ൎ) =
new ꚭ(tail(ⅎௗົ.ٮ๓ۗꪸ᱕߳ੑ = tail(head(new ᱠꦺ()))));

read method imm ꩁී ྋ(read ૐ this) =
"𐫧஖";
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

class ᤇ᜔ܑ  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

