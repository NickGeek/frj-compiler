main = new ড়(@[].ਫ਼᳴, mut ە ꟾ­୪ = this,
head(@[].ಠ゙(this, @@@ල‏ ꤼ = @ༀ ךּ = 1 ,
ળ,
imm අៃ ਲ႐ = @@ઽ⵿᳒ ૱໒ = ײ,
ஜ,
ꘫ)).@ລ(this), head("".＿), @[], tail(ὕ⁪), @[@[capsule ＿ 並ၴೈꢀ = @@@צൢ؜ ᬯൈ = new ᜎ(),
3175.0 ,
tail(this); mut ᎋ Ά = 7 ,
new ꧼ(head(3 ))]; head(new ക꣗ꪾᮢ())], new Ⴭ(@[@[this; mut ႎ ꭘ = @[imm ᯀၳ ᎋ = 830 ,
new ࠤੵ(); 0.0 .ड़],
this.ⁱ(this, 4.0E-36 , tail(new ኹ()), @[], ᛗ, @[@[]; @[@[this; head(2 )]; head(new ଆ())]], @[Infinity ; head(2 )], @ꪗ Ὑ = "ૹ០",
@[].Η(this, 0.0 , "\uuu4707ᬀ"), @[])]; mut ঐ ະ = ⵯ,
"\'"]));

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

