main = new ⁿꠋ(3984 .@䈇ꙴ(this), this);

interface ᦂઃെꠧ  {
imm method imm ৲8 ᜯ߰꯹(@@ວ ແ);

imm method @ଽ ກ();

capsule method imm ە ˢ(imm ᲇᬀ ר);

capsule method @@ၛ ᱍ();
}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ¥  {
@@＿࿆ ꧠ;
@ㄫൗ ℷ;
@ಙ ﬧ;
@ଈ ৡꤩ;
@@ࡍ מּ⃡;
}

class ᏸೢ  {
@@ײ У;
@@ড়ൊ ꔟॉ;
imm Ì ὗ;imm method read ำᢅ ܯੵᰧ፟ᷓᩜ⵿(@@@ೱ၀꠆ ᧁ༾) =
"";

imm method @फ़ ᢪ(@ૠ༷ ᮜઁ) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ວꨶྀᤸᮣ  {

}

capability class ഋ implements ᪧ, ª, ホ  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

capability class ﹱ implements ࠨ, ៛ೊఀୖ್ொᜳ៦ਿ؜꫁ۨၘׇ०  {
imm ౡ ච;read method @ૐ ۥ() =
@[tail(ଲ); new ℤܑ᳐()];

imm method @@ቓ ຫႇ() =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

class ຊୢ  {

}

interface ProducerN  {
imm method imm Number get();
}

interface Ꮮ extends ﶦ, ષ  {

}

