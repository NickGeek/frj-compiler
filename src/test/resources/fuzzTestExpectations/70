main = new ⁿꠋ(3984 .@䈇ꙴ(this), this);

interface ᦂઃെꠧ  {
imm method imm ৲8 ᜯ߰꯹(imm ᦂઃെꠧ this, @@ວ ແ);

imm method @ଽ ກ(imm ᦂઃെꠧ this);

capsule method imm ە ˢ(capsule ᦂઃെꠧ this, imm ᲇᬀ ר);

capsule method @@ၛ ᱍ(capsule ᦂઃെꠧ this);
}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class ¥  {
@@＿࿆ ꧠ;
@ㄫൗ ℷ;
@ಙ ﬧ;
@ଈ ৡꤩ;
@@ࡍ מּ⃡;
}

class ᏸೢ  {
@@ײ У;
@@ড়ൊ ꔟॉ;
imm Ì ὗ;imm method read ำᢅ ܯੵᰧ፟ᷓᩜ⵿(imm ᏸೢ this, @@@ೱ၀꠆ ᧁ༾) =
"";

imm method @फ़ ᢪ(imm ᏸೢ this, @ૠ༷ ᮜઁ) =
@[];
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ວꨶྀᤸᮣ  {

}

capability class ഋ implements ᪧ, ª, ホ  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

capability class ﹱ implements ࠨ, ៛ೊఀୖ್ொᜳ៦ਿ؜꫁ۨၘׇ०  {
imm ౡ ච;read method @ૐ ۥ(read ﹱ this) =
@[tail(ଲ); new ℤܑ᳐()];

imm method @@ቓ ຫႇ(imm ﹱ this) =
@[];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class ຊୢ  {

}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Ꮮ extends ﶦ, ષ  {

}

