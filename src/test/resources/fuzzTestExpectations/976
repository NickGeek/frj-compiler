main = @[];

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

capability class ⴇ  {
@@@ຢ เ᭕;imm method @﹍ᜳ༦ රേꪷ༧(imm ⴇ this) =
new ⳳ௭ၧ೯(@[125.8125 ; 0 ]);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

capability class ᝪ  {
mut method imm හେ ବ(mut ᝪ this, @ൔ ೞֿ, imm ㆋ ൎ, @ˮ ᪧ) =
head(ൿ.હ(this));
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ℨ᪘  {

}

interface ٯืೕ extends ꜙ  {
capsule method mut Ⴗ҃؜୯ ޱࠡᩞ్ৗ(capsule ٯืೕ this, imm ꧼ᯳༨ מּ);
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ܐ҅ౢ੬ extends Ⴐ, Έେ⁮, ර  {

}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

