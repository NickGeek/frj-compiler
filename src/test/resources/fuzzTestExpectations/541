main = 0.0 ;

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

class ァଂ implements ꘖ, វఀ  {
capsule method imm ਹ ˠ(capsule ァଂ this) =
6.0E42 ;

capsule method @ꚋۗ ൔ(capsule ァଂ this) =
@[];

imm method imm ೠꦽ๑ﬞ ᳵ(imm ァଂ this, imm ᜏ ꪶ) =
new ၶ(@[], this);

imm method imm ﬓ߄ྟ 〵(imm ァଂ this, imm ᜧ୍꣫ Ό્) =
@@ຽೄ ꭅᩝೈ = ﹍,
new לּ(70 .@ໆᤱ‭(this, new ਬ(8.0 , head(head(tail(this))), "\3\t𑌓ⶨ­\43\uu95B5\uuuu3C60", new ᙻে().ῦ = this.ᳵ(this, new ศၗ(mut ந᭭ࠪ؅྆ ܭ༵ = @[],
22.0 .ﲪ = @[new ၐ꤇(Ꙇ᱃⵿꩘꣖၈૾ⷴ); this]))), tail(ﭪ꫶ූ), this, ឬௗૢ￺ꩃ));

imm method imm Հ ῌ(imm ァଂ this, @@ࢹ Ὑౣ, imm Ὕ᪴ ະۨ) =
"\'\u1a34";

imm method imm ﹴ ᴟ(imm ァଂ this) =
ⷍ﻿;
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface ꫳֿꣁ  {

}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

