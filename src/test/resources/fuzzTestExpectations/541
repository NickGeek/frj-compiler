main = 0.0 ;

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method imm Int exit(imm Int code) =
code;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

interface Number extends Literal  {

}

class ァଂ implements ꘖ, វఀ  {
capsule method imm ਹ ˠ() =
6.0E42 ;

capsule method @ꚋۗ ൔ() =
@[];

imm method imm ೠꦽ๑ﬞ ᳵ(imm ᜏ ꪶ) =
new ၶ(@[], this);

imm method imm ﬓ߄ྟ 〵(imm ᜧ୍꣫ Ό્) =
@@ຽೄ ꭅᩝೈ = ﹍,
new לּ(70 .@ໆᤱ‭(this, new ਬ(8.0 , head(head(tail(this))), "\3\t𑌓ⶨ­\43\uu95B5\uuuu3C60", new ᙻে().ῦ = this.ᳵ(this, new ศၗ(mut ந᭭ࠪ؅྆ ܭ༵ = @[],
22.0 .ﲪ = @[new ၐ꤇(Ꙇ᱃⵿꩘꣖၈૾ⷴ); this]))), tail(ﭪ꫶ූ), this, ឬௗૢ￺ꩃ));

imm method imm Հ ῌ(@@ࢹ Ὑౣ, imm Ὕ᪴ ະۨ) =
"\'\u1a34";

imm method imm ﹴ ᴟ() =
ⷍ﻿;
}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface ꫳֿꣁ  {

}

interface Literal  {
imm method imm String toString();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get();
}

interface Int extends Number, Literal  {

}

