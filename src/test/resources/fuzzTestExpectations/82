main = @[];

interface ꩀ extends ڍి꣖ᭃ꪿२܏  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

interface ↇ  {

}

capability class Ⴈ implements ⰶ  {
read method @@똘 ਏ߰(read Ⴈ this, @@@@@@ퟮ ꠸ުའ) =
ၥ;

capsule method @Ⴧ᪳ రᮦ(capsule Ⴈ this, imm ꦔ් સෳ) =
@[];
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

class ૱  {
capsule method @ⷘ ιୖ(capsule ૱ this, capsule ל 烙) =
new ︴ං(new ৡ(this, @[@[@[].@zᮦꩃ(this, 0 ); this]; head(@@@@প ᆍে = this.ㅓ = tail(this),
head(@ⴾ઼᭖ ϥ = this,
"ྙ".ꏸెॆ੭᮹꘦ = this.ⴅਁ⃦(this)).〢 = "𑌓߻\u5bf4")])).ￄ = imm ￥᭮᧘ുਁ꛰؅ৗ ၥꩼ = this,
æ;
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface ℼ  {
imm method @ࠤ྆ᤧ ⴖ៧(imm ℼ this, imm 〇ࠣ Ὕ);

imm method @@@@ޱެి ຕ(imm ℼ this);

imm method imm ৼ؜ ষ(imm ℼ this);

read method @௹༙ະ ກௗែ(read ℼ this, @ୱ ਸ, imm நัꦃ﻿ ꧤ꣦, imm ங ஆ꩕ꯩ, mut ⷙ ۺ);
}

