main = imm ፕ ‿ = tail(0 ),
0.028 ;

class Std  {
imm method imm Number add(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number sub(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Number mul(imm Std this, imm Number a, imm Number b) =
0 ;

imm method imm Bool gte(imm Std this, imm Number a, imm Number b) =
new False();
}

capability class StdC  {
mut method imm String print(mut StdC this, imm String msg) =
msg;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ﷴ  {
@ꋅིৗꧥ ᚦ;mut method capsule ೲྔࠥျో౩܏ᩝ ૱(mut ﷴ this, imm 杖 ꪱೄઁ꤃᜴, imm ꡜ ᯆ, imm ꉘ౩ ー, imm ទ ⶅ) =
"";

read method capsule ヾ ї(read ﷴ this, read ၥᳲ ᱟ) =
new ኍൢࣙ࠘(1 );
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class ݷ implements ੴ  {

}

interface ⱙ  {
imm method mut ໆॏ ݴ༨(imm ⱙ this);

imm method capsule ﶠᰨၴ ꩅ(imm ⱙ this);

imm method imm ᢪౖ ກ꧹ౖ(imm ⱙ this, @ࠚ Ὂ);

mut method imm ঽೖ⵿ꪰ꘢ࠜ ꩺೕ܏(mut ⱙ this);

imm method @@@@⁀ ៗ(imm ⱙ this, read ପ੍ ㇳ);

imm method mut ⷓை ᩊൗ਼(imm ⱙ this, imm ଣ ￋ꯰);

imm method @சꤪ ࢼ(imm ⱙ this, imm P ᲀ);

mut method @ஃׇ Ⳟ਼ୖ٘(mut ⱙ this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

