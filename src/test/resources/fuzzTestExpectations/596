main = tail(ₑ);

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

mut method mut Std println(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ﾦ  {
imm method imm ₓ ඒ(imm ῶஂ ᾧૢ༙) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ꚉ  {
mut method @@ൔᩙ ꣻ();
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ᚩ᪗  {
@@@Ꮕ ᮯ;imm method read ᜤ়〪྆ ㆡ(imm ౘੂ ⴭٰ) =
9030 ;

imm method mut ະ ꨞႃ() =
"";

capsule method imm ਹ๕ָ ꣵ۰ৣ(capsule Ⰱ਼᭬ᢩ⃩⳰ এ, imm ໞ႘ົా ଽ᪗) =
ߺ༷ৢ;

imm method mut ቍꧥ 靖ׂ(@@ΐᷦꤧ ܞٰ, imm ኾ ጳୗ) =
@[].@ৡ(this, this, 123392.0 );

mut method @ꮱு Ⴧᬸ꣗ׇ(@ℇ ꩺꯤཽ, @ᧁ꫶ ⷙ, @@@@ꬎ ゞ) =
head(ℶ);

imm method imm ꠅ ব૦(imm ᨆ שׁ෫, imm ຂ ⅎᜳꫵ፟, imm ᱡ ꙃ, @@@ힺ ᭋꨯ᮫, read ߺ ല, imm Ü੧ ඇ୭, imm ල ﬓᩖ) =
@[];

imm method @ￃ ऽ() =
0 .ᙯ଼(this);

capsule method @@ℕ ⵯ꧵ࣗ() =
@[];
}

interface 〡︬  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ͺ  {
mut method imm ⵆ଼ ￄ(@@ᙰ︌ ﮢ);
}

interface ProducerN  {
imm method imm Number get();
}

