main = tail(ₑ);

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class ﾦ  {
imm method imm ₓ ඒ(imm ﾦ this, imm ῶஂ ᾧૢ༙) =
@[];
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface ꚉ  {
mut method @@ൔᩙ ꣻ(mut ꚉ this);
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

class ᚩ᪗  {
@@@Ꮕ ᮯ;imm method read ᜤ়〪྆ ㆡ(imm ᚩ᪗ this, imm ౘੂ ⴭٰ) =
9030 ;

imm method mut ະ ꨞႃ(imm ᚩ᪗ this) =
"";

capsule method imm ਹ๕ָ ꣵ۰ৣ(capsule ᚩ᪗ this, capsule Ⰱ਼᭬ᢩ⃩⳰ এ, imm ໞ႘ົా ଽ᪗) =
ߺ༷ৢ;

imm method mut ቍꧥ 靖ׂ(imm ᚩ᪗ this, @@ΐᷦꤧ ܞٰ, imm ኾ ጳୗ) =
@[].@ৡ(this, this, 123392.0 );

mut method @ꮱு Ⴧᬸ꣗ׇ(mut ᚩ᪗ this, @ℇ ꩺꯤཽ, @ᧁ꫶ ⷙ, @@@@ꬎ ゞ) =
head(ℶ);

imm method imm ꠅ ব૦(imm ᚩ᪗ this, imm ᨆ שׁ෫, imm ຂ ⅎᜳꫵ፟, imm ᱡ ꙃ, @@@ힺ ᭋꨯ᮫, read ߺ ല, imm Ü੧ ඇ୭, imm ල ﬓᩖ) =
@[];

imm method @ￃ ऽ(imm ᚩ᪗ this) =
0 .ᙯ଼(this);

capsule method @@ℕ ⵯ꧵ࣗ(capsule ᚩ᪗ this) =
@[];
}

interface 〡︬  {

}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ͺ  {
mut method imm ⵆ଼ ￄ(mut ͺ this, @@ᙰ︌ ﮢ);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

