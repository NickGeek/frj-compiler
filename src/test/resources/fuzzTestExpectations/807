main = 9.250648557997953E274 ;

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ௐᝒ implements Ω່  {
capsule method imm ଆ ᆷ() =
this;
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ຂෳွ implements চ, ᥰ  {
imm method @ኻ઼࡚ ꣴ() =
this;

imm method capsule ⶃ த() =
@@ೱ Î = ꨁ,
this.ঞ;

imm method @ໟׁ ꠅ௧() =
new ｮ؁ັ();

mut method @ઑ ힼ() =
ۿ;

mut method @ꠑ ட(@ꩺ୯ꩽ ڣ࿆ූꥎ, @ຣ⃭ ﰺ, imm ﻵᝒ ퟃ꛱, @@ﻝ゚ ৼٰ౬, imm 々ꧥ࿆ ࠨ) =
@[];
}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface Ɬོ  {
imm method imm ශ᪁ ꤷ();
}

interface ProducerN  {
imm method imm Number get();
}

interface ߵ꦳  {
imm method imm ਥ Ｕ(imm Ῑؓ ⅻ, @ⴜ꧔ ኈ);
}

