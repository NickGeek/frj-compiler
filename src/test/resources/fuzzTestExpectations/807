main = 9.250648557997953E274 ;

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method mut Std print(mut Std this, imm String msg) =
this;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();

read method imm String concat(read Std this, imm String a, imm String b) =
a;
}

class ௐᝒ implements Ω່  {
capsule method imm ଆ ᆷ(capsule ௐᝒ this) =
this;
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

capability class ຂෳွ implements চ, ᥰ  {
imm method @ኻ઼࡚ ꣴ(imm ຂෳွ this) =
this;

imm method capsule ⶃ த(imm ຂෳွ this) =
@@ೱ Î = ꨁ,
this.ঞ;

imm method @ໟׁ ꠅ௧(imm ຂෳွ this) =
new ｮ؁ັ();

mut method @ઑ ힼ(mut ຂෳွ this) =
ۿ;

mut method @ꠑ ட(mut ຂෳွ this, @ꩺ୯ꩽ ڣ࿆ූꥎ, @ຣ⃭ ﰺ, imm ﻵᝒ ퟃ꛱, @@ﻝ゚ ৼٰ౬, imm 々ꧥ࿆ ࠨ) =
@[];
}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface Ɬོ  {
imm method imm ශ᪁ ꤷ(imm Ɬོ this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface ߵ꦳  {
imm method imm ਥ Ｕ(imm ߵ꦳ this, imm Ῑؓ ⅻ, @ⴜ꧔ ኈ);
}

