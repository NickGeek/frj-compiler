main = new ශௗ(235 , "", 0 );

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class Ⴧ implements ೲ༾᠑, ഩൈ഼, இ, ඪ, Ⴭៅ໌, ప︫꧑, ᆣ  {
@ቝ ਊׅ៝;imm method @ਹ ⶼᯬ(imm Ⴧ this) =
new ꘕ();
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

capability class ණ  {
read method capsule ଈ ὐ(read ණ this) =
7 ;

read method read ᰌ 䨓ୌ(read ණ this, @ꣽ༙ⷰ⃡ ຢႄ, @@@@@@ଲၬ ዀ) =
@[];

imm method imm ￅ Ꚓ(imm ණ this) =
this;

imm method imm ⁱުූ᳹ᳳ༷৪ ײ(imm ණ this) =
@[];

imm method imm ︳ ℨ߯(imm ණ this, @@@ຊോ ꬠ१્) =
this;

imm method @ꠃᜓ ץ(imm ණ this) =
this;
}

interface Int extends Number, Literal  {

}

class ト꧰࠭࠘ௗ implements Ⲋ⵿ܑ, ೱꠂࣜ, ஜ, ᠽ, ኴ, ￛ༹  {
imm የீ ꭠຶ⁡ᜳ;mut method imm ῳ༧ᮀ ℜၪ༵(mut ト꧰࠭࠘ௗ this) =
@[new ײ(43 ).ꩈ᭙ٰ; 359808.0 ];

imm method @ῃ᩠ ன꣨(imm ト꧰࠭࠘ௗ this) =
@[];
}

capability class ᨏ implements Όᝒೆ, ᓇ, Ωె, ۿ꣱, ᡲ়ਿ꩐, ຄೌൣୗઃ߂, ೡೕౕ, ዐ  {
imm method @ﭑ স(imm ᨏ this, @@@ﵣ ߋ꫶, mut ιೋஂྻۭ 〇꣔, imm ၯ０ ຕং9) =
@[tail(tail(@[new ষީ᪕("\112\uuua93F𞸨"); 49 ])); Å];

imm method @ꫛ ߴୢྔ(imm ᨏ this) =
this;

imm method @ᡧ꯲ ⴭ(imm ᨏ this) =
this;

read method @ⅎ ঽ(read ᨏ this) =
head(︴);

imm method capsule Ὶ ໟ(imm ᨏ this, @@@︳ ῃ࿆) =
8.0 .ⷕꨶꣅꫮ(this);
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

