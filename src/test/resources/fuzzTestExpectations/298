main = new ශௗ(235 , "", 0 );

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class Ⴧ implements ೲ༾᠑, ഩൈ഼, இ, ඪ, Ⴭៅ໌, ప︫꧑, ᆣ  {
@ቝ ਊׅ៝;imm method @ਹ ⶼᯬ() =
new ꘕ();
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

capability class ණ  {
read method capsule ଈ ὐ() =
7 ;

read method read ᰌ 䨓ୌ(@ꣽ༙ⷰ⃡ ຢႄ, @@@@@@ଲၬ ዀ) =
@[];

imm method imm ￅ Ꚓ() =
this;

imm method imm ⁱުූ᳹ᳳ༷৪ ײ() =
@[];

imm method imm ︳ ℨ߯(@@@ຊോ ꬠ१્) =
this;

imm method @ꠃᜓ ץ() =
this;
}

interface Int extends Number, Literal  {

}

class ト꧰࠭࠘ௗ implements Ⲋ⵿ܑ, ೱꠂࣜ, ஜ, ᠽ, ኴ, ￛ༹  {
imm የீ ꭠຶ⁡ᜳ;mut method imm ῳ༧ᮀ ℜၪ༵() =
@[new ײ(43 ).ꩈ᭙ٰ; 359808.0 ];

imm method @ῃ᩠ ன꣨() =
@[];
}

capability class ᨏ implements Όᝒೆ, ᓇ, Ωె, ۿ꣱, ᡲ়ਿ꩐, ຄೌൣୗઃ߂, ೡೕౕ, ዐ  {
imm method @ﭑ স(@@@ﵣ ߋ꫶, mut ιೋஂྻۭ 〇꣔, imm ၯ０ ຕং9) =
@[tail(tail(@[new ষީ᪕("\112\uuua93F𞸨"); 49 ])); Å];

imm method @ꫛ ߴୢྔ() =
this;

imm method @ᡧ꯲ ⴭ() =
this;

read method @ⅎ ঽ() =
head(︴);

imm method capsule Ὶ ໟ(@@@︳ ῃ࿆) =
8.0 .ⷕꨶꣅꫮ(this);
}

interface Float extends Number, Literal  {

}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ProducerN  {
imm method imm Number get();
}

