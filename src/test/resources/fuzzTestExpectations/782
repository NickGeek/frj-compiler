main = this;

interface Float extends Number, Literal  {

}

capability class Std  {
read method imm Number add(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(mut Std this, imm Number min, imm Number max) =
0.0 ;

mut method @Bool sleep(mut Std this, imm Int timeMs) =
@[];

read method imm Number sub(read Std this, imm Number a, imm Number b) =
0 ;

mut method imm String print(mut Std this, imm String msg) =
msg;

read method imm Number mul(read Std this, imm Number a, imm Number b) =
0 ;

read method imm Bool gte(read Std this, imm Number a, imm Number b) =
new False();
}

class ꫣ  {
@Όࠦ క;
read ኳ ဍ゙༷;
@@@@@ၦ ꫲ៩;
imm Ꞡ ᯔ;read method @tื꣐ ط(read ꫣ this, mut ￍⷬ૾᠒ ῃੵ, @ˬ ఏଁ꧹) =
@@ங୮૽ Ⴭႇ = new ഽัᭁ⃘(),
tail("\r");

imm method imm Ὸ હ(imm ꫣ this) =
new ጕੌ();

imm method imm ℾ ಹ(imm ꫣ this, imm 궣 $୧) =
tail("".ۯ = "\\").ꉀை = @[""; new ㄅ(tail(@[]), new ႎో꯬("𓐯\uuubf1d\uE9Bfກ", tail(ᄚ༠៨), tail(@@ݮ ℜ = head(@[279 ; ＿၄.ວ(this, head(@[؋᳢.ە(this); this])).ꓭ = tail("".Ͷ᭄ꪷઃ(this, @[new Ϧ๘ે(); this], 0.46875 , new Υ(), ꣵꩍ))]).ൻ໊,
"\uuDdfb")), this, imm ৎ ଡⷻऻॗֿੵ༹ࠧᰪ = 0.0 .@ꮭ਼(this),
52.0 , ມ)];
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not(imm Bool this);

imm method imm Bool or(imm Bool this, imm Bool b);

imm method imm Bool and(imm Bool this, imm Bool b);

imm method imm ProducerN thenElse(imm Bool this, imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString(imm Literal this);
}

class True implements Bool  {
imm method imm Bool not(imm True this) =
new False();

imm method imm Bool or(imm True this, imm Bool b) =
this;

imm method imm Bool and(imm True this, imm Bool b) =
b;

imm method imm String toString(imm True this) =
"true";

imm method imm ProducerN thenElse(imm True this, imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not(imm False this) =
new True();

imm method imm Bool or(imm False this, imm Bool b) =
b;

imm method imm Bool and(imm False this, imm Bool b) =
this;

imm method imm String toString(imm False this) =
"false";

imm method imm ProducerN thenElse(imm False this, imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface ProducerN  {
imm method imm Number get(imm ProducerN this);
}

interface Int extends Number, Literal  {

}

