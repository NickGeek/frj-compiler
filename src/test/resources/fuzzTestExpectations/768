main = @[head(0 ); head(0.0 )].ଳେᨗ(this);

capability class Std  {
read method imm Number add(imm Number a, imm Number b) =
0 ;

mut method imm Float randomFloat(imm Number min, imm Number max) =
0.0 ;

read method imm Number sub(imm Number a, imm Number b) =
0 ;

mut method mut Std print(imm String msg) =
this;

read method imm Number mul(imm Number a, imm Number b) =
0 ;

read method imm Bool gte(imm Number a, imm Number b) =
new False();

read method imm String concat(imm String a, imm String b) =
a;

read method @Bool clock(imm Int timeMs) =
@[];
}

class ಅ  {
@@ᜠꠋ Αྨ;
imm ꇭ Ⴍ;
@@@@@@@@@ｽॣ ቜঃ᧙;
}

capability class ጦ  {
imm 枔 Ἠ;imm method @ഏ ꬑ߄(imm ﾵ ำޭꠂั) =
@[];

imm method imm ꩧꫫ ៛(@ⴜ ⅈꠣ, @@@ۯ Ա᳭, @ༀ ꡎꩌॆ) =
@[];
}

class True implements Bool  {
imm method imm Bool not() =
new False();

imm method imm Bool or(imm Bool b) =
this;

imm method imm Bool and(imm Bool b) =
b;

imm method imm String toString() =
"true";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f1;
}

interface String extends Literal  {

}

class False implements Bool  {
imm method imm Bool not() =
new True();

imm method imm Bool or(imm Bool b) =
b;

imm method imm Bool and(imm Bool b) =
this;

imm method imm String toString() =
"false";

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2) =
f2;
}

interface Int extends Number, Literal  {

}

interface Ẅ︠￹  {
imm method imm ೱ꙯᩻ ㆣ༾();

capsule method imm ꩊꩻ᠙߀ೢۧ ൿ();

mut method mut ଵ ॿ();
}

interface Float extends Number, Literal  {

}

capability class ղ  {
@ຯ װ;
imm ਜ਼ Ὑꩍ;
imm ꥠꩌ ힶ;
@@ⅎꩌූੑ֜ⷲꪾෲ ᭊ;capsule method imm ૹ ꠉ() =
new ਊ(tail(tail(@[])), this);
}

interface Number extends Literal  {

}

interface Bool extends Literal  {
imm method imm Bool not();

imm method imm Bool or(imm Bool b);

imm method imm Bool and(imm Bool b);

imm method imm ProducerN thenElse(imm ProducerN f1, imm ProducerN f2);
}

interface Literal  {
imm method imm String toString();
}

interface ੳᷙᝲᤱ extends ꫥ, ῼ⃛, ۿ਼  {
imm method @ꪻۨࠠၨੋ꩖᩸ ￗ();

capsule method mut நௌ܏ꠥ ㅼꪸ(mut ℕంྏ ℤ, @@@@ⁿୣೋ ꟼ);
}

interface ProducerN  {
imm method imm Number get();
}

